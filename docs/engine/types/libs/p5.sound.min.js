!function(n) {
  var i = {};
  function r(t) {
    if (i[t])
      return i[t].exports;
    var e = i[t] = { i: t, l: false, exports: {} };
    return n[t].call(e.exports, e, e.exports, r), e.l = true, e.exports;
  }
  r.m = n, r.c = i, r.d = function(t, e, n2) {
    r.o(t, e) || Object.defineProperty(t, e, { enumerable: true, get: n2 });
  }, r.r = function(t) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: true });
  }, r.t = function(e, t) {
    if (1 & t && (e = r(e)), 8 & t)
      return e;
    if (4 & t && "object" == typeof e && e && e.__esModule)
      return e;
    var n2 = /* @__PURE__ */ Object.create(null);
    if (r.r(n2), Object.defineProperty(n2, "default", { enumerable: true, value: e }), 2 & t && "string" != typeof e)
      for (var i2 in e)
        r.d(n2, i2, function(t2) {
          return e[t2];
        }.bind(null, i2));
    return n2;
  }, r.n = function(t) {
    var e = t && t.__esModule ? function() {
      return t.default;
    } : function() {
      return t;
    };
    return r.d(e, "a", e), e;
  }, r.o = function(t, e) {
    return Object.prototype.hasOwnProperty.call(t, e);
  }, r.p = "", r(r.s = 40);
}([function(t, e, n) {
  var i;
  void 0 === (i = function() {
    "use strict";
    function l(t2, e3) {
      this.isUndef(t2) || 1 === t2 ? this.input = this.context.createGain() : 1 < t2 && (this.input = new Array(t2)), this.isUndef(e3) || 1 === e3 ? this.output = this.context.createGain() : 1 < e3 && (this.output = new Array(t2));
    }
    var e2;
    return l.prototype.set = function(t2, e3, n2) {
      if (this.isObject(t2))
        n2 = e3;
      else if (this.isString(t2)) {
        var i2 = {};
        i2[t2] = e3, t2 = i2;
      }
      t:
        for (var r in t2) {
          e3 = t2[r];
          var o = this;
          if (-1 !== r.indexOf(".")) {
            for (var s = r.split("."), a = 0; a < s.length - 1; a++)
              if ((o = o[s[a]]) instanceof l) {
                s.splice(0, a + 1);
                var u = s.join(".");
                o.set(u, e3);
                continue t;
              }
            r = s[s.length - 1];
          }
          var c = o[r];
          this.isUndef(c) || (l.Signal && c instanceof l.Signal || l.Param && c instanceof l.Param ? c.value !== e3 && (this.isUndef(n2) ? c.value = e3 : c.rampTo(e3, n2)) : c instanceof AudioParam ? c.value !== e3 && (c.value = e3) : c instanceof l ? c.set(e3) : c !== e3 && (o[r] = e3));
        }
      return this;
    }, l.prototype.get = function(t2) {
      this.isUndef(t2) ? t2 = this._collectDefaults(this.constructor) : this.isString(t2) && (t2 = [t2]);
      for (var e3 = {}, n2 = 0; n2 < t2.length; n2++) {
        var i2 = t2[n2], r = this, o = e3;
        if (-1 !== i2.indexOf(".")) {
          for (var s = i2.split("."), a = 0; a < s.length - 1; a++) {
            var u = s[a];
            o[u] = o[u] || {}, o = o[u], r = r[u];
          }
          i2 = s[s.length - 1];
        }
        var c = r[i2];
        this.isObject(t2[i2]) ? o[i2] = c.get() : l.Signal && c instanceof l.Signal ? o[i2] = c.value : l.Param && c instanceof l.Param ? o[i2] = c.value : c instanceof AudioParam ? o[i2] = c.value : c instanceof l ? o[i2] = c.get() : this.isFunction(c) || this.isUndef(c) || (o[i2] = c);
      }
      return e3;
    }, l.prototype._collectDefaults = function(t2) {
      var e3 = [];
      if (this.isUndef(t2.defaults) || (e3 = Object.keys(t2.defaults)), !this.isUndef(t2._super))
        for (var n2 = this._collectDefaults(t2._super), i2 = 0; i2 < n2.length; i2++)
          -1 === e3.indexOf(n2[i2]) && e3.push(n2[i2]);
      return e3;
    }, l.prototype.toString = function() {
      for (var t2 in l) {
        var e3 = t2[0].match(/^[A-Z]$/), n2 = l[t2] === this.constructor;
        if (this.isFunction(l[t2]) && e3 && n2)
          return t2;
      }
      return "Tone";
    }, Object.defineProperty(l.prototype, "numberOfInputs", { get: function() {
      return this.input ? this.isArray(this.input) ? this.input.length : 1 : 0;
    } }), Object.defineProperty(l.prototype, "numberOfOutputs", { get: function() {
      return this.output ? this.isArray(this.output) ? this.output.length : 1 : 0;
    } }), l.prototype.dispose = function() {
      return this.isUndef(this.input) || (this.input instanceof AudioNode && this.input.disconnect(), this.input = null), this.isUndef(this.output) || (this.output instanceof AudioNode && this.output.disconnect(), this.output = null), this;
    }, l.prototype.connect = function(t2, e3, n2) {
      return Array.isArray(this.output) ? (e3 = this.defaultArg(e3, 0), this.output[e3].connect(t2, 0, n2)) : this.output.connect(t2, e3, n2), this;
    }, l.prototype.disconnect = function(t2, e3, n2) {
      this.isArray(this.output) ? this.isNumber(t2) ? this.output[t2].disconnect() : (e3 = this.defaultArg(e3, 0), this.output[e3].disconnect(t2, 0, n2)) : this.output.disconnect.apply(this.output, arguments);
    }, l.prototype.connectSeries = function() {
      if (1 < arguments.length)
        for (var t2 = arguments[0], e3 = 1; e3 < arguments.length; e3++) {
          var n2 = arguments[e3];
          t2.connect(n2), t2 = n2;
        }
      return this;
    }, l.prototype.chain = function() {
      if (0 < arguments.length)
        for (var t2 = this, e3 = 0; e3 < arguments.length; e3++) {
          var n2 = arguments[e3];
          t2.connect(n2), t2 = n2;
        }
      return this;
    }, l.prototype.fan = function() {
      if (0 < arguments.length)
        for (var t2 = 0; t2 < arguments.length; t2++)
          this.connect(arguments[t2]);
      return this;
    }, AudioNode.prototype.chain = l.prototype.chain, AudioNode.prototype.fan = l.prototype.fan, l.prototype.defaultArg = function(t2, e3) {
      if (this.isObject(t2) && this.isObject(e3)) {
        var n2 = {};
        for (var i2 in t2)
          n2[i2] = this.defaultArg(e3[i2], t2[i2]);
        for (var r in e3)
          n2[r] = this.defaultArg(t2[r], e3[r]);
        return n2;
      }
      return this.isUndef(t2) ? e3 : t2;
    }, l.prototype.optionsObject = function(t2, e3, n2) {
      var i2 = {};
      if (1 === t2.length && this.isObject(t2[0]))
        i2 = t2[0];
      else
        for (var r = 0; r < e3.length; r++)
          i2[e3[r]] = t2[r];
      return this.isUndef(n2) ? i2 : this.defaultArg(i2, n2);
    }, l.prototype.isUndef = function(t2) {
      return void 0 === t2;
    }, l.prototype.isFunction = function(t2) {
      return "function" == typeof t2;
    }, l.prototype.isNumber = function(t2) {
      return "number" == typeof t2;
    }, l.prototype.isObject = function(t2) {
      return "[object Object]" === Object.prototype.toString.call(t2) && t2.constructor === Object;
    }, l.prototype.isBoolean = function(t2) {
      return "boolean" == typeof t2;
    }, l.prototype.isArray = function(t2) {
      return Array.isArray(t2);
    }, l.prototype.isString = function(t2) {
      return "string" == typeof t2;
    }, l.noOp = function() {
    }, l.prototype._readOnly = function(t2) {
      if (Array.isArray(t2))
        for (var e3 = 0; e3 < t2.length; e3++)
          this._readOnly(t2[e3]);
      else
        Object.defineProperty(this, t2, { writable: false, enumerable: true });
    }, l.prototype._writable = function(t2) {
      if (Array.isArray(t2))
        for (var e3 = 0; e3 < t2.length; e3++)
          this._writable(t2[e3]);
      else
        Object.defineProperty(this, t2, { writable: true });
    }, l.State = { Started: "started", Stopped: "stopped", Paused: "paused" }, l.prototype.equalPowerScale = function(t2) {
      var e3 = 0.5 * Math.PI;
      return Math.sin(t2 * e3);
    }, l.prototype.dbToGain = function(t2) {
      return Math.pow(2, t2 / 6);
    }, l.prototype.gainToDb = function(t2) {
      return Math.log(t2) / Math.LN10 * 20;
    }, l.prototype.intervalToFrequencyRatio = function(t2) {
      return Math.pow(2, t2 / 12);
    }, l.prototype.now = function() {
      return l.context.now();
    }, l.now = function() {
      return l.context.now();
    }, l.extend = function(t2, e3) {
      function n2() {
      }
      l.prototype.isUndef(e3) && (e3 = l), n2.prototype = e3.prototype, t2.prototype = new n2(), (t2.prototype.constructor = t2)._super = e3;
    }, Object.defineProperty(l, "context", { get: function() {
      return e2;
    }, set: function(t2) {
      e2 = l.Context && t2 instanceof l.Context ? t2 : new l.Context(t2), l.Context && l.Context.emit("init", e2);
    } }), Object.defineProperty(l.prototype, "context", { get: function() {
      return l.context;
    } }), l.setContext = function(t2) {
      l.context = t2;
    }, Object.defineProperty(l.prototype, "blockTime", { get: function() {
      return 128 / this.context.sampleRate;
    } }), Object.defineProperty(l.prototype, "sampleTime", { get: function() {
      return 1 / this.context.sampleRate;
    } }), Object.defineProperty(l, "supported", { get: function() {
      var t2 = window.hasOwnProperty("AudioContext") || window.hasOwnProperty("webkitAudioContext"), e3 = window.hasOwnProperty("Promise"), n2 = window.hasOwnProperty("Worker");
      return t2 && e3 && n2;
    } }), l.version = "r10", window.TONE_SILENCE_VERSION_LOGGING, l;
  }.call(e, n, e, t)) || (t.exports = i);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(2), n(10)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Multiply = function(t2) {
      this.createInsOuts(2, 0), this._mult = this.input[0] = this.output = new e2.Gain(), this._param = this.input[1] = this.output.gain, this._param.value = this.defaultArg(t2, 0);
    }, e2.extend(e2.Multiply, e2.Signal), e2.Multiply.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._mult.dispose(), this._mult = null, this._param = null, this;
    }, e2.Multiply;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6), n(9), n(18), n(10)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Signal = function() {
      var t2 = this.optionsObject(arguments, ["value", "units"], e2.Signal.defaults);
      this.output = this._gain = this.context.createGain(), t2.param = this._gain.gain, e2.Param.call(this, t2), this.input = this._param = this._gain.gain, this.context.getConstant(1).chain(this._gain);
    }, e2.extend(e2.Signal, e2.Param), e2.Signal.defaults = { value: 0, units: e2.Type.Default, convert: true }, e2.Signal.prototype.connect = e2.SignalBase.prototype.connect, e2.Signal.prototype.dispose = function() {
      return e2.Param.prototype.dispose.call(this), this._param = null, this._gain.disconnect(), this._gain = null, this;
    }, e2.Signal;
  }.apply(e, i)) || (t.exports = r);
}, function(t, u, c) {
  "use strict";
  (function(t2) {
    c.d(u, "b", function() {
      return s;
    }), c.d(u, "c", function() {
      return a;
    });
    var e = c(22), i = c.n(e), n = c(0), r = c.n(n);
    c(12);
    t2.TONE_SILENCE_VERSION_LOGGING = true;
    var o = new window.AudioContext();
    function s() {
      return o;
    }
    function a(t3, e2) {
      var n2 = t3;
      return t3 instanceof p5.Element ? n2 = t3.elt : t3 instanceof Array && t3[0] instanceof p5.Element && (n2 = t3.map(function(t4) {
        return t4.elt;
      })), i()(o, n2, e2);
    }
    r.a.setContext(o), u.a = o;
  }).call(this, c(26));
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(2), n(10)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Add = function(t2) {
      this.createInsOuts(2, 0), this._sum = this.input[0] = this.input[1] = this.output = new e2.Gain(), this._param = this.input[1] = new e2.Signal(t2), this._param.connect(this._sum);
    }, e2.extend(e2.Add, e2.Signal), e2.Add.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._sum.dispose(), this._sum = null, this._param.dispose(), this._param = null, this;
    }, e2.Add;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e) {
  t.exports = { recorderProcessor: "recorder-processor", soundFileProcessor: "sound-file-processor", amplitudeProcessor: "amplitude-processor" };
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(15)], void 0 === (r = function(t2) {
    "use strict";
    return t2.WaveShaper = function(t3, e2) {
      this._shaper = this.input = this.output = this.context.createWaveShaper(), this._curve = null, Array.isArray(t3) ? this.curve = t3 : isFinite(t3) || this.isUndef(t3) ? this._curve = new Float32Array(this.defaultArg(t3, 1024)) : this.isFunction(t3) && (this._curve = new Float32Array(this.defaultArg(e2, 1024)), this.setMap(t3));
    }, t2.extend(t2.WaveShaper, t2.SignalBase), t2.WaveShaper.prototype.setMap = function(t3) {
      for (var e2 = 0, n2 = this._curve.length; e2 < n2; e2++) {
        var i2 = e2 / (n2 - 1) * 2 - 1;
        this._curve[e2] = t3(i2, e2);
      }
      return this._shaper.curve = this._curve, this;
    }, Object.defineProperty(t2.WaveShaper.prototype, "curve", { get: function() {
      return this._shaper.curve;
    }, set: function(t3) {
      this._curve = new Float32Array(t3), this._shaper.curve = this._curve;
    } }), Object.defineProperty(t2.WaveShaper.prototype, "oversample", { get: function() {
      return this._shaper.oversample;
    }, set: function(t3) {
      if (-1 === ["none", "2x", "4x"].indexOf(t3))
        throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'");
      this._shaper.oversample = t3;
    } }), t2.WaveShaper.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._shaper.disconnect(), this._shaper = null, this._curve = null, this;
    }, t2.WaveShaper;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(2), n(19)], void 0 === (r = function(u) {
    "use strict";
    return u.TimelineSignal = function() {
      var t2 = this.optionsObject(arguments, ["value", "units"], u.Signal.defaults);
      this._events = new u.Timeline(10), u.Signal.apply(this, t2), t2.param = this._param, u.Param.call(this, t2), this._initial = this._fromUnits(this._param.value);
    }, u.extend(u.TimelineSignal, u.Param), u.TimelineSignal.Type = { Linear: "linear", Exponential: "exponential", Target: "target", Curve: "curve", Set: "set" }, Object.defineProperty(u.TimelineSignal.prototype, "value", { get: function() {
      var t2 = this.now(), e2 = this.getValueAtTime(t2);
      return this._toUnits(e2);
    }, set: function(t2) {
      var e2 = this._fromUnits(t2);
      this._initial = e2, this.cancelScheduledValues(), this._param.value = e2;
    } }), u.TimelineSignal.prototype.setValueAtTime = function(t2, e2) {
      return t2 = this._fromUnits(t2), e2 = this.toSeconds(e2), this._events.add({ type: u.TimelineSignal.Type.Set, value: t2, time: e2 }), this._param.setValueAtTime(t2, e2), this;
    }, u.TimelineSignal.prototype.linearRampToValueAtTime = function(t2, e2) {
      return t2 = this._fromUnits(t2), e2 = this.toSeconds(e2), this._events.add({ type: u.TimelineSignal.Type.Linear, value: t2, time: e2 }), this._param.linearRampToValueAtTime(t2, e2), this;
    }, u.TimelineSignal.prototype.exponentialRampToValueAtTime = function(t2, e2) {
      e2 = this.toSeconds(e2);
      var n2 = this._searchBefore(e2);
      n2 && 0 === n2.value && this.setValueAtTime(this._minOutput, n2.time), t2 = this._fromUnits(t2);
      var i2 = Math.max(t2, this._minOutput);
      return this._events.add({ type: u.TimelineSignal.Type.Exponential, value: i2, time: e2 }), t2 < this._minOutput ? (this._param.exponentialRampToValueAtTime(this._minOutput, e2 - this.sampleTime), this.setValueAtTime(0, e2)) : this._param.exponentialRampToValueAtTime(t2, e2), this;
    }, u.TimelineSignal.prototype.setTargetAtTime = function(t2, e2, n2) {
      return t2 = this._fromUnits(t2), t2 = Math.max(this._minOutput, t2), n2 = Math.max(this._minOutput, n2), e2 = this.toSeconds(e2), this._events.add({ type: u.TimelineSignal.Type.Target, value: t2, time: e2, constant: n2 }), this._param.setTargetAtTime(t2, e2, n2), this;
    }, u.TimelineSignal.prototype.setValueCurveAtTime = function(t2, e2, n2, i2) {
      i2 = this.defaultArg(i2, 1);
      for (var r2 = new Array(t2.length), o = 0; o < r2.length; o++)
        r2[o] = this._fromUnits(t2[o]) * i2;
      e2 = this.toSeconds(e2), n2 = this.toSeconds(n2), this._events.add({ type: u.TimelineSignal.Type.Curve, value: r2, time: e2, duration: n2 }), this._param.setValueAtTime(r2[0], e2);
      for (var s = 1; s < r2.length; s++) {
        var a = e2 + s / (r2.length - 1) * n2;
        this._param.linearRampToValueAtTime(r2[s], a);
      }
      return this;
    }, u.TimelineSignal.prototype.cancelScheduledValues = function(t2) {
      return t2 = this.toSeconds(t2), this._events.cancel(t2), this._param.cancelScheduledValues(t2), this;
    }, u.TimelineSignal.prototype.setRampPoint = function(t2) {
      t2 = this.toSeconds(t2);
      var e2 = this._toUnits(this.getValueAtTime(t2)), n2 = this._searchBefore(t2);
      if (n2 && n2.time === t2)
        this.cancelScheduledValues(t2 + this.sampleTime);
      else if (n2 && n2.type === u.TimelineSignal.Type.Curve && n2.time + n2.duration > t2)
        this.cancelScheduledValues(t2), this.linearRampToValueAtTime(e2, t2);
      else {
        var i2 = this._searchAfter(t2);
        i2 && (this.cancelScheduledValues(t2), i2.type === u.TimelineSignal.Type.Linear ? this.linearRampToValueAtTime(e2, t2) : i2.type === u.TimelineSignal.Type.Exponential && this.exponentialRampToValueAtTime(e2, t2)), this.setValueAtTime(e2, t2);
      }
      return this;
    }, u.TimelineSignal.prototype.linearRampToValueBetween = function(t2, e2, n2) {
      return this.setRampPoint(e2), this.linearRampToValueAtTime(t2, n2), this;
    }, u.TimelineSignal.prototype.exponentialRampToValueBetween = function(t2, e2, n2) {
      return this.setRampPoint(e2), this.exponentialRampToValueAtTime(t2, n2), this;
    }, u.TimelineSignal.prototype._searchBefore = function(t2) {
      return this._events.get(t2);
    }, u.TimelineSignal.prototype._searchAfter = function(t2) {
      return this._events.getAfter(t2);
    }, u.TimelineSignal.prototype.getValueAtTime = function(t2) {
      t2 = this.toSeconds(t2);
      var e2 = this._searchAfter(t2), n2 = this._searchBefore(t2), i2 = this._initial;
      if (null === n2)
        i2 = this._initial;
      else if (n2.type === u.TimelineSignal.Type.Target) {
        var r2, o = this._events.getBefore(n2.time);
        r2 = null === o ? this._initial : o.value, i2 = this._exponentialApproach(n2.time, r2, n2.value, n2.constant, t2);
      } else
        i2 = n2.type === u.TimelineSignal.Type.Curve ? this._curveInterpolate(n2.time, n2.value, n2.duration, t2) : null === e2 ? n2.value : e2.type === u.TimelineSignal.Type.Linear ? this._linearInterpolate(n2.time, n2.value, e2.time, e2.value, t2) : e2.type === u.TimelineSignal.Type.Exponential ? this._exponentialInterpolate(n2.time, n2.value, e2.time, e2.value, t2) : n2.value;
      return i2;
    }, u.TimelineSignal.prototype.connect = u.SignalBase.prototype.connect, u.TimelineSignal.prototype._exponentialApproach = function(t2, e2, n2, i2, r2) {
      return n2 + (e2 - n2) * Math.exp(-(r2 - t2) / i2);
    }, u.TimelineSignal.prototype._linearInterpolate = function(t2, e2, n2, i2, r2) {
      return e2 + (r2 - t2) / (n2 - t2) * (i2 - e2);
    }, u.TimelineSignal.prototype._exponentialInterpolate = function(t2, e2, n2, i2, r2) {
      return (e2 = Math.max(this._minOutput, e2)) * Math.pow(i2 / e2, (r2 - t2) / (n2 - t2));
    }, u.TimelineSignal.prototype._curveInterpolate = function(t2, e2, n2, i2) {
      var r2 = e2.length;
      if (t2 + n2 <= i2)
        return e2[r2 - 1];
      if (i2 <= t2)
        return e2[0];
      var o = (i2 - t2) / n2, s = Math.floor((r2 - 1) * o), a = Math.ceil((r2 - 1) * o), u2 = e2[s], c = e2[a];
      return a === s ? u2 : this._linearInterpolate(s, u2, a, c, o * (r2 - 1));
    }, u.TimelineSignal.prototype.dispose = function() {
      u.Signal.prototype.dispose.call(this), u.Param.prototype.dispose.call(this), this._events.dispose(), this._events = null;
    }, u.TimelineSignal;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(4), n(1), n(2)], void 0 === (r = function(n2) {
    "use strict";
    return n2.Scale = function(t2, e2) {
      this._outputMin = this.defaultArg(t2, 0), this._outputMax = this.defaultArg(e2, 1), this._scale = this.input = new n2.Multiply(1), this._add = this.output = new n2.Add(0), this._scale.connect(this._add), this._setRange();
    }, n2.extend(n2.Scale, n2.SignalBase), Object.defineProperty(n2.Scale.prototype, "min", { get: function() {
      return this._outputMin;
    }, set: function(t2) {
      this._outputMin = t2, this._setRange();
    } }), Object.defineProperty(n2.Scale.prototype, "max", { get: function() {
      return this._outputMax;
    }, set: function(t2) {
      this._outputMax = t2, this._setRange();
    } }), n2.Scale.prototype._setRange = function() {
      this._add.value = this._outputMin, this._scale.value = this._outputMax - this._outputMin;
    }, n2.Scale.prototype.dispose = function() {
      return n2.prototype.dispose.call(this), this._add.dispose(), this._add = null, this._scale.dispose(), this._scale = null, this;
    }, n2.Scale;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(16), n(30), n(31), n(12)], void 0 === (r = function(e2) {
    return e2.Type = { Default: "number", Time: "time", Frequency: "frequency", TransportTime: "transportTime", Ticks: "ticks", NormalRange: "normalRange", AudioRange: "audioRange", Decibels: "db", Interval: "interval", BPM: "bpm", Positive: "positive", Cents: "cents", Degrees: "degrees", MIDI: "midi", BarsBeatsSixteenths: "barsBeatsSixteenths", Samples: "samples", Hertz: "hertz", Note: "note", Milliseconds: "milliseconds", Seconds: "seconds", Notation: "notation" }, e2.prototype.toSeconds = function(t2) {
      return this.isNumber(t2) ? t2 : this.isUndef(t2) ? this.now() : this.isString(t2) ? new e2.Time(t2).toSeconds() : t2 instanceof e2.TimeBase ? t2.toSeconds() : void 0;
    }, e2.prototype.toFrequency = function(t2) {
      return this.isNumber(t2) ? t2 : this.isString(t2) || this.isUndef(t2) ? new e2.Frequency(t2).valueOf() : t2 instanceof e2.TimeBase ? t2.toFrequency() : void 0;
    }, e2.prototype.toTicks = function(t2) {
      return this.isNumber(t2) || this.isString(t2) ? new e2.TransportTime(t2).toTicks() : this.isUndef(t2) ? e2.Transport.ticks : t2 instanceof e2.TimeBase ? t2.toTicks() : void 0;
    }, e2;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(18), n(9)], void 0 === (r = function(n2) {
    "use strict";
    return window.GainNode && !AudioContext.prototype.createGain && (AudioContext.prototype.createGain = AudioContext.prototype.createGainNode), n2.Gain = function() {
      var t2 = this.optionsObject(arguments, ["gain", "units"], n2.Gain.defaults);
      this.input = this.output = this._gainNode = this.context.createGain(), this.gain = new n2.Param({ param: this._gainNode.gain, units: t2.units, value: t2.gain, convert: t2.convert }), this._readOnly("gain");
    }, n2.extend(n2.Gain), n2.Gain.defaults = { gain: 1, convert: true }, n2.Gain.prototype.dispose = function() {
      n2.Param.prototype.dispose.call(this), this._gainNode.disconnect(), this._gainNode = null, this._writable("gain"), this.gain.dispose(), this.gain = null;
    }, n2.prototype.createInsOuts = function(t2, e2) {
      1 === t2 ? this.input = new n2.Gain() : 1 < t2 && (this.input = new Array(t2)), 1 === e2 ? this.output = new n2.Gain() : 1 < e2 && (this.output = new Array(t2));
    }, n2.Gain;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(7), n(39), n(14), n(12)], void 0 === (r = function(r2) {
    "use strict";
    return r2.Clock = function() {
      r2.Emitter.call(this);
      var t2 = this.optionsObject(arguments, ["callback", "frequency"], r2.Clock.defaults);
      this.callback = t2.callback, this._nextTick = 0, this._lastState = r2.State.Stopped, this.frequency = new r2.TimelineSignal(t2.frequency, r2.Type.Frequency), this._readOnly("frequency"), this.ticks = 0, this._state = new r2.TimelineState(r2.State.Stopped), this._boundLoop = this._loop.bind(this), this.context.on("tick", this._boundLoop);
    }, r2.extend(r2.Clock, r2.Emitter), r2.Clock.defaults = { callback: r2.noOp, frequency: 1, lookAhead: "auto" }, Object.defineProperty(r2.Clock.prototype, "state", { get: function() {
      return this._state.getValueAtTime(this.now());
    } }), r2.Clock.prototype.start = function(t2, e2) {
      return t2 = this.toSeconds(t2), this._state.getValueAtTime(t2) !== r2.State.Started && this._state.add({ state: r2.State.Started, time: t2, offset: e2 }), this;
    }, r2.Clock.prototype.stop = function(t2) {
      return t2 = this.toSeconds(t2), this._state.cancel(t2), this._state.setStateAtTime(r2.State.Stopped, t2), this;
    }, r2.Clock.prototype.pause = function(t2) {
      return t2 = this.toSeconds(t2), this._state.getValueAtTime(t2) === r2.State.Started && this._state.setStateAtTime(r2.State.Paused, t2), this;
    }, r2.Clock.prototype._loop = function() {
      for (var t2 = this.now() + this.context.lookAhead + this.context.updateInterval + 2 * this.context.lag; t2 > this._nextTick && this._state; ) {
        var e2 = this._state.getValueAtTime(this._nextTick);
        if (e2 !== this._lastState) {
          this._lastState = e2;
          var n2 = this._state.get(this._nextTick);
          e2 === r2.State.Started ? (this._nextTick = n2.time, this.isUndef(n2.offset) || (this.ticks = n2.offset), this.emit("start", n2.time, this.ticks)) : e2 === r2.State.Stopped ? (this.ticks = 0, this.emit("stop", n2.time)) : e2 === r2.State.Paused && this.emit("pause", n2.time);
        }
        var i2 = this._nextTick;
        this.frequency && (this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick), e2 === r2.State.Started && (this.callback(i2), this.ticks++));
      }
    }, r2.Clock.prototype.getStateAtTime = function(t2) {
      return t2 = this.toSeconds(t2), this._state.getValueAtTime(t2);
    }, r2.Clock.prototype.dispose = function() {
      r2.Emitter.prototype.dispose.call(this), this.context.off("tick", this._boundLoop), this._writable("frequency"), this.frequency.dispose(), this.frequency = null, this._boundLoop = null, this._nextTick = 1 / 0, this.callback = null, this._state.dispose(), this._state = null;
    }, r2.Clock;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(14)], void 0 === (r = function(i2) {
    function t2(t3, e2, n2) {
      if (t3.input)
        Array.isArray(t3.input) ? (i2.prototype.isUndef(n2) && (n2 = 0), this.connect(t3.input[n2])) : this.connect(t3.input, e2, n2);
      else
        try {
          t3 instanceof AudioNode ? r2.call(this, t3, e2, n2) : r2.call(this, t3, e2);
        } catch (e3) {
          throw new Error("error connecting to node: " + t3 + "\n" + e3);
        }
    }
    var r2, o;
    return !window.hasOwnProperty("AudioContext") && window.hasOwnProperty("webkitAudioContext") && (window.AudioContext = window.webkitAudioContext), i2.Context = function(t3) {
      for (var e2 in i2.Emitter.call(this), t3 = t3 || new window.AudioContext(), this._context = t3, this._context)
        this._defineProperty(this._context, e2);
      this._latencyHint = "interactive", this._lookAhead = 0.1, this._updateInterval = this._lookAhead / 3, this._computedUpdateInterval = 0, this._worker = this._createWorker(), this._constants = {};
    }, i2.extend(i2.Context, i2.Emitter), i2.Emitter.mixin(i2.Context), i2.Context.prototype._defineProperty = function(e2, n2) {
      this.isUndef(this[n2]) && Object.defineProperty(this, n2, { get: function() {
        return "function" == typeof e2[n2] ? e2[n2].bind(e2) : e2[n2];
      }, set: function(t3) {
        e2[n2] = t3;
      } });
    }, i2.Context.prototype.now = function() {
      return this._context.currentTime;
    }, i2.Context.prototype._createWorker = function() {
      window.URL = window.URL || window.webkitURL;
      var t3 = new Blob(["var timeoutTime = " + (1e3 * this._updateInterval).toFixed(1) + ";self.onmessage = function(msg){	timeoutTime = parseInt(msg.data);};function tick(){	setTimeout(tick, timeoutTime);	self.postMessage('tick');}tick();"]), e2 = URL.createObjectURL(t3), n2 = new Worker(e2);
      return n2.addEventListener("message", function() {
        this.emit("tick");
      }.bind(this)), n2.addEventListener("message", function() {
        var t4 = this.now();
        if (this.isNumber(this._lastUpdate)) {
          var e3 = t4 - this._lastUpdate;
          this._computedUpdateInterval = Math.max(e3, 0.97 * this._computedUpdateInterval);
        }
        this._lastUpdate = t4;
      }.bind(this)), n2;
    }, i2.Context.prototype.getConstant = function(t3) {
      if (this._constants[t3])
        return this._constants[t3];
      for (var e2 = this._context.createBuffer(1, 128, this._context.sampleRate), n2 = e2.getChannelData(0), i3 = 0; i3 < n2.length; i3++)
        n2[i3] = t3;
      var r3 = this._context.createBufferSource();
      return r3.channelCount = 1, r3.channelCountMode = "explicit", r3.buffer = e2, r3.loop = true, r3.start(0), this._constants[t3] = r3;
    }, Object.defineProperty(i2.Context.prototype, "lag", { get: function() {
      var t3 = this._computedUpdateInterval - this._updateInterval;
      return Math.max(t3, 0);
    } }), Object.defineProperty(i2.Context.prototype, "lookAhead", { get: function() {
      return this._lookAhead;
    }, set: function(t3) {
      this._lookAhead = t3;
    } }), Object.defineProperty(i2.Context.prototype, "updateInterval", { get: function() {
      return this._updateInterval;
    }, set: function(t3) {
      this._updateInterval = Math.max(t3, i2.prototype.blockTime), this._worker.postMessage(Math.max(1e3 * t3, 1));
    } }), Object.defineProperty(i2.Context.prototype, "latencyHint", { get: function() {
      return this._latencyHint;
    }, set: function(t3) {
      var e2 = t3;
      if (this._latencyHint = t3, this.isString(t3))
        switch (t3) {
          case "interactive":
            e2 = 0.1, this._context.latencyHint = t3;
            break;
          case "playback":
            e2 = 0.8, this._context.latencyHint = t3;
            break;
          case "balanced":
            e2 = 0.25, this._context.latencyHint = t3;
            break;
          case "fastest":
            e2 = 0.01;
        }
      this.lookAhead = e2, this.updateInterval = e2 / 3;
    } }), i2.supported && (r2 = AudioNode.prototype.connect, o = AudioNode.prototype.disconnect, AudioNode.prototype.connect !== t2 && (AudioNode.prototype.connect = t2, AudioNode.prototype.disconnect = function(t3, e2, n2) {
      if (t3 && t3.input && Array.isArray(t3.input))
        i2.prototype.isUndef(n2) && (n2 = 0), this.disconnect(t3.input[n2], e2, n2);
      else if (t3 && t3.input)
        this.disconnect(t3.input, e2, n2);
      else
        try {
          o.apply(this, arguments);
        } catch (e3) {
          throw new Error("error disconnecting node: " + t3 + "\n" + e3);
        }
    }), i2.context = new i2.Context()), i2.Context;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(4), n(20), n(2), n(10)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Subtract = function(t2) {
      this.createInsOuts(2, 0), this._sum = this.input[0] = this.output = new e2.Gain(), this._neg = new e2.Negate(), this._param = this.input[1] = new e2.Signal(t2), this._param.chain(this._neg, this._sum);
    }, e2.extend(e2.Subtract, e2.Signal), e2.Subtract.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._neg.dispose(), this._neg = null, this._sum.disconnect(), this._sum = null, this._param.dispose(), this._param = null, this;
    }, e2.Subtract;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0)], void 0 === (r = function(s) {
    "use strict";
    return s.Emitter = function() {
      this._events = {};
    }, s.extend(s.Emitter), s.Emitter.prototype.on = function(t2, e2) {
      for (var n2 = t2.split(/\W+/), i2 = 0; i2 < n2.length; i2++) {
        var r2 = n2[i2];
        this._events.hasOwnProperty(r2) || (this._events[r2] = []), this._events[r2].push(e2);
      }
      return this;
    }, s.Emitter.prototype.off = function(t2, e2) {
      for (var n2 = t2.split(/\W+/), i2 = 0; i2 < n2.length; i2++)
        if (t2 = n2[i2], this._events.hasOwnProperty(t2))
          if (s.prototype.isUndef(e2))
            this._events[t2] = [];
          else
            for (var r2 = this._events[t2], o = 0; o < r2.length; o++)
              r2[o] === e2 && r2.splice(o, 1);
      return this;
    }, s.Emitter.prototype.emit = function(t2) {
      if (this._events) {
        var e2 = Array.apply(null, arguments).slice(1);
        if (this._events.hasOwnProperty(t2))
          for (var n2 = this._events[t2], i2 = 0, r2 = n2.length; i2 < r2; i2++)
            n2[i2].apply(this, e2);
      }
      return this;
    }, s.Emitter.mixin = function(t2) {
      var e2 = ["on", "off", "emit"];
      t2._events = {};
      for (var n2 = 0; n2 < e2.length; n2++) {
        var i2 = e2[n2], r2 = s.Emitter.prototype[i2];
        t2[i2] = r2;
      }
    }, s.Emitter.prototype.dispose = function() {
      return s.prototype.dispose.call(this), this._events = null, this;
    }, s.Emitter;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0)], void 0 === (r = function(i2) {
    "use strict";
    return i2.SignalBase = function() {
    }, i2.extend(i2.SignalBase), i2.SignalBase.prototype.connect = function(t2, e2, n2) {
      return i2.Signal && i2.Signal === t2.constructor || i2.Param && i2.Param === t2.constructor || i2.TimelineSignal && i2.TimelineSignal === t2.constructor ? (t2._param.cancelScheduledValues(0), t2._param.value = 0, t2.overridden = true) : t2 instanceof AudioParam && (t2.cancelScheduledValues(0), t2.value = 0), i2.prototype.connect.call(this, t2, e2, n2), this;
    }, i2.SignalBase;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(17)], void 0 === (r = function(n2) {
    return n2.Time = function(t2, e2) {
      if (!(this instanceof n2.Time))
        return new n2.Time(t2, e2);
      this._plusNow = false, n2.TimeBase.call(this, t2, e2);
    }, n2.extend(n2.Time, n2.TimeBase), n2.Time.prototype._unaryExpressions = Object.create(n2.TimeBase.prototype._unaryExpressions), n2.Time.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function(t2) {
      return n2.Transport.nextSubdivision(t2());
    } }, n2.Time.prototype._unaryExpressions.now = { regexp: /^\+/, method: function(t2) {
      return this._plusNow = true, t2();
    } }, n2.Time.prototype.quantize = function(t2, e2) {
      return e2 = this.defaultArg(e2, 1), this._expr = function(t3, e3, n3) {
        return t3 = t3(), e3 = e3.toSeconds(), t3 + (Math.round(t3 / e3) * e3 - t3) * n3;
      }.bind(this, this._expr, new this.constructor(t2), e2), this;
    }, n2.Time.prototype.addNow = function() {
      return this._plusNow = true, this;
    }, n2.Time.prototype._defaultExpr = function() {
      return this._plusNow = true, this._noOp;
    }, n2.Time.prototype.copy = function(t2) {
      return n2.TimeBase.prototype.copy.call(this, t2), this._plusNow = t2._plusNow, this;
    }, n2.Time.prototype.toNotation = function() {
      var t2 = this.toSeconds(), e2 = this._toNotationHelper(t2, ["1m", "2n", "4n", "8n", "16n", "32n", "64n", "128n"]), n3 = this._toNotationHelper(t2, ["1m", "2n", "2t", "4n", "4t", "8n", "8t", "16n", "16t", "32n", "32t", "64n", "64t", "128n"]);
      return n3.split("+").length < e2.split("+").length ? n3 : e2;
    }, n2.Time.prototype._toNotationHelper = function(t2, e2) {
      for (var n3 = this._notationToUnits(e2[e2.length - 1]), i2 = "", r2 = 0; r2 < e2.length; r2++) {
        var o = this._notationToUnits(e2[r2]), s = t2 / o;
        if (1 - s % 1 < 1e-6 && (s += 1e-6), 0 < (s = Math.floor(s))) {
          if (i2 += 1 === s ? e2[r2] : s.toString() + "*" + e2[r2], (t2 -= s * o) < n3)
            break;
          i2 += " + ";
        }
      }
      return "" === i2 && (i2 = "0"), i2;
    }, n2.Time.prototype._notationToUnits = function(t2) {
      for (var e2 = this._primaryExpressions, n3 = [e2.n, e2.t, e2.m], i2 = 0; i2 < n3.length; i2++) {
        var r2 = n3[i2], o = t2.match(r2.regexp);
        if (o)
          return r2.method.call(this, o[1]);
      }
    }, n2.Time.prototype.toBarsBeatsSixteenths = function() {
      var t2 = this._beatsToUnits(1), e2 = this.toSeconds() / t2, n3 = Math.floor(e2 / this._timeSignature()), i2 = e2 % 1 * 4;
      return e2 = Math.floor(e2) % this._timeSignature(), 3 < (i2 = i2.toString()).length && (i2 = parseFloat(i2).toFixed(3)), [n3, e2, i2].join(":");
    }, n2.Time.prototype.toTicks = function() {
      var t2 = this._beatsToUnits(1), e2 = this.valueOf() / t2;
      return Math.floor(e2 * n2.Transport.PPQ);
    }, n2.Time.prototype.toSamples = function() {
      return this.toSeconds() * this.context.sampleRate;
    }, n2.Time.prototype.toFrequency = function() {
      return 1 / this.toSeconds();
    }, n2.Time.prototype.toSeconds = function() {
      return this.valueOf();
    }, n2.Time.prototype.toMilliseconds = function() {
      return 1e3 * this.toSeconds();
    }, n2.Time.prototype.valueOf = function() {
      return this._expr() + (this._plusNow ? this.now() : 0);
    }, n2.Time;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0)], void 0 === (r = function(i2) {
    return i2.TimeBase = function(t2, e2) {
      if (!(this instanceof i2.TimeBase))
        return new i2.TimeBase(t2, e2);
      if (this._expr = this._noOp, t2 instanceof i2.TimeBase)
        this.copy(t2);
      else if (!this.isUndef(e2) || this.isNumber(t2)) {
        e2 = this.defaultArg(e2, this._defaultUnits);
        var n2 = this._primaryExpressions[e2].method;
        this._expr = n2.bind(this, t2);
      } else
        this.isString(t2) ? this.set(t2) : this.isUndef(t2) && (this._expr = this._defaultExpr());
    }, i2.extend(i2.TimeBase), i2.TimeBase.prototype.set = function(t2) {
      return this._expr = this._parseExprString(t2), this;
    }, i2.TimeBase.prototype.clone = function() {
      var t2 = new this.constructor();
      return t2.copy(this), t2;
    }, i2.TimeBase.prototype.copy = function(t2) {
      var e2 = t2._expr();
      return this.set(e2);
    }, i2.TimeBase.prototype._primaryExpressions = { n: { regexp: /^(\d+)n/i, method: function(t2) {
      return 1 === (t2 = parseInt(t2)) ? this._beatsToUnits(this._timeSignature()) : this._beatsToUnits(4 / t2);
    } }, t: { regexp: /^(\d+)t/i, method: function(t2) {
      return t2 = parseInt(t2), this._beatsToUnits(8 / (3 * parseInt(t2)));
    } }, m: { regexp: /^(\d+)m/i, method: function(t2) {
      return this._beatsToUnits(parseInt(t2) * this._timeSignature());
    } }, i: { regexp: /^(\d+)i/i, method: function(t2) {
      return this._ticksToUnits(parseInt(t2));
    } }, hz: { regexp: /^(\d+(?:\.\d+)?)hz/i, method: function(t2) {
      return this._frequencyToUnits(parseFloat(t2));
    } }, tr: { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function(t2, e2, n2) {
      var i3 = 0;
      return t2 && "0" !== t2 && (i3 += this._beatsToUnits(this._timeSignature() * parseFloat(t2))), e2 && "0" !== e2 && (i3 += this._beatsToUnits(parseFloat(e2))), n2 && "0" !== n2 && (i3 += this._beatsToUnits(parseFloat(n2) / 4)), i3;
    } }, s: { regexp: /^(\d+(?:\.\d+)?s)/, method: function(t2) {
      return this._secondsToUnits(parseFloat(t2));
    } }, samples: { regexp: /^(\d+)samples/, method: function(t2) {
      return parseInt(t2) / this.context.sampleRate;
    } }, default: { regexp: /^(\d+(?:\.\d+)?)/, method: function(t2) {
      return this._primaryExpressions[this._defaultUnits].method.call(this, t2);
    } } }, i2.TimeBase.prototype._binaryExpressions = { "+": { regexp: /^\+/, precedence: 2, method: function(t2, e2) {
      return t2() + e2();
    } }, "-": { regexp: /^\-/, precedence: 2, method: function(t2, e2) {
      return t2() - e2();
    } }, "*": { regexp: /^\*/, precedence: 1, method: function(t2, e2) {
      return t2() * e2();
    } }, "/": { regexp: /^\//, precedence: 1, method: function(t2, e2) {
      return t2() / e2();
    } } }, i2.TimeBase.prototype._unaryExpressions = { neg: { regexp: /^\-/, method: function(t2) {
      return -t2();
    } } }, i2.TimeBase.prototype._syntaxGlue = { "(": { regexp: /^\(/ }, ")": { regexp: /^\)/ } }, i2.TimeBase.prototype._tokenize = function(t2) {
      for (var e2 = -1, n2 = []; 0 < t2.length; ) {
        var i3 = r2(t2 = t2.trim(), this);
        n2.push(i3), t2 = t2.substr(i3.value.length);
      }
      function r2(t3, e3) {
        for (var n3 = ["_binaryExpressions", "_unaryExpressions", "_primaryExpressions", "_syntaxGlue"], i4 = 0; i4 < n3.length; i4++) {
          var r3 = e3[n3[i4]];
          for (var o in r3) {
            var s = r3[o], a = s.regexp, u = t3.match(a);
            if (null !== u)
              return { method: s.method, precedence: s.precedence, regexp: s.regexp, value: u[0] };
          }
        }
        throw new SyntaxError("Tone.TimeBase: Unexpected token " + t3);
      }
      return { next: function() {
        return n2[++e2];
      }, peek: function() {
        return n2[e2 + 1];
      } };
    }, i2.TimeBase.prototype._matchGroup = function(t2, e2, n2) {
      if (!this.isUndef(t2))
        for (var i3 in e2) {
          var r2 = e2[i3];
          if (r2.regexp.test(t2.value)) {
            if (this.isUndef(n2))
              return r2;
            if (r2.precedence === n2)
              return r2;
          }
        }
      return false;
    }, i2.TimeBase.prototype._parseBinary = function(t2, e2) {
      var n2;
      this.isUndef(e2) && (e2 = 2), n2 = e2 < 0 ? this._parseUnary(t2) : this._parseBinary(t2, e2 - 1);
      for (var i3 = t2.peek(); i3 && this._matchGroup(i3, this._binaryExpressions, e2); )
        n2 = (i3 = t2.next()).method.bind(this, n2, this._parseBinary(t2, e2 - 1)), i3 = t2.peek();
      return n2;
    }, i2.TimeBase.prototype._parseUnary = function(t2) {
      var e2, n2;
      e2 = t2.peek();
      var i3 = this._matchGroup(e2, this._unaryExpressions);
      return i3 ? (e2 = t2.next(), n2 = this._parseUnary(t2), i3.method.bind(this, n2)) : this._parsePrimary(t2);
    }, i2.TimeBase.prototype._parsePrimary = function(t2) {
      var e2, n2;
      if (e2 = t2.peek(), this.isUndef(e2))
        throw new SyntaxError("Tone.TimeBase: Unexpected end of expression");
      if (this._matchGroup(e2, this._primaryExpressions)) {
        var i3 = (e2 = t2.next()).value.match(e2.regexp);
        return e2.method.bind(this, i3[1], i3[2], i3[3]);
      }
      if (e2 && "(" === e2.value) {
        if (t2.next(), n2 = this._parseBinary(t2), !(e2 = t2.next()) || ")" !== e2.value)
          throw new SyntaxError("Expected )");
        return n2;
      }
      throw new SyntaxError("Tone.TimeBase: Cannot process token " + e2.value);
    }, i2.TimeBase.prototype._parseExprString = function(t2) {
      this.isString(t2) || (t2 = t2.toString());
      var e2 = this._tokenize(t2);
      return this._parseBinary(e2);
    }, i2.TimeBase.prototype._noOp = function() {
      return 0;
    }, i2.TimeBase.prototype._defaultExpr = function() {
      return this._noOp;
    }, i2.TimeBase.prototype._defaultUnits = "s", i2.TimeBase.prototype._frequencyToUnits = function(t2) {
      return 1 / t2;
    }, i2.TimeBase.prototype._beatsToUnits = function(t2) {
      return 60 / i2.Transport.bpm.value * t2;
    }, i2.TimeBase.prototype._secondsToUnits = function(t2) {
      return t2;
    }, i2.TimeBase.prototype._ticksToUnits = function(t2) {
      return t2 * (this._beatsToUnits(1) / i2.Transport.PPQ);
    }, i2.TimeBase.prototype._timeSignature = function() {
      return i2.Transport.timeSignature;
    }, i2.TimeBase.prototype._pushExpr = function(t2, e2, n2) {
      return t2 instanceof i2.TimeBase || (t2 = new this.constructor(t2, n2)), this._expr = this._binaryExpressions[e2].method.bind(this, this._expr, t2._expr), this;
    }, i2.TimeBase.prototype.add = function(t2, e2) {
      return this._pushExpr(t2, "+", e2);
    }, i2.TimeBase.prototype.sub = function(t2, e2) {
      return this._pushExpr(t2, "-", e2);
    }, i2.TimeBase.prototype.mult = function(t2, e2) {
      return this._pushExpr(t2, "*", e2);
    }, i2.TimeBase.prototype.div = function(t2, e2) {
      return this._pushExpr(t2, "/", e2);
    }, i2.TimeBase.prototype.valueOf = function() {
      return this._expr();
    }, i2.TimeBase.prototype.dispose = function() {
      this._expr = null;
    }, i2.TimeBase;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(9)], void 0 === (r = function(i2) {
    "use strict";
    return i2.Param = function() {
      var t2 = this.optionsObject(arguments, ["param", "units", "convert"], i2.Param.defaults);
      this._param = this.input = t2.param, this.units = t2.units, this.convert = t2.convert, this.overridden = false, this._lfo = null, this.isObject(t2.lfo) ? this.value = t2.lfo : this.isUndef(t2.value) || (this.value = t2.value);
    }, i2.extend(i2.Param), i2.Param.defaults = { units: i2.Type.Default, convert: true, param: void 0 }, Object.defineProperty(i2.Param.prototype, "value", { get: function() {
      return this._toUnits(this._param.value);
    }, set: function(t2) {
      if (this.isObject(t2)) {
        if (this.isUndef(i2.LFO))
          throw new Error("Include 'Tone.LFO' to use an LFO as a Param value.");
        this._lfo && this._lfo.dispose(), this._lfo = new i2.LFO(t2).start(), this._lfo.connect(this.input);
      } else {
        var e2 = this._fromUnits(t2);
        this._param.cancelScheduledValues(0), this._param.value = e2;
      }
    } }), i2.Param.prototype._fromUnits = function(t2) {
      if (!this.convert && !this.isUndef(this.convert))
        return t2;
      switch (this.units) {
        case i2.Type.Time:
          return this.toSeconds(t2);
        case i2.Type.Frequency:
          return this.toFrequency(t2);
        case i2.Type.Decibels:
          return this.dbToGain(t2);
        case i2.Type.NormalRange:
          return Math.min(Math.max(t2, 0), 1);
        case i2.Type.AudioRange:
          return Math.min(Math.max(t2, -1), 1);
        case i2.Type.Positive:
          return Math.max(t2, 0);
        default:
          return t2;
      }
    }, i2.Param.prototype._toUnits = function(t2) {
      if (!this.convert && !this.isUndef(this.convert))
        return t2;
      switch (this.units) {
        case i2.Type.Decibels:
          return this.gainToDb(t2);
        default:
          return t2;
      }
    }, i2.Param.prototype._minOutput = 1e-5, i2.Param.prototype.setValueAtTime = function(t2, e2) {
      return t2 = this._fromUnits(t2), (e2 = this.toSeconds(e2)) <= this.now() + this.blockTime ? this._param.value = t2 : this._param.setValueAtTime(t2, e2), this;
    }, i2.Param.prototype.setRampPoint = function(t2) {
      t2 = this.defaultArg(t2, this.now());
      var e2 = this._param.value;
      return 0 === e2 && (e2 = this._minOutput), this._param.setValueAtTime(e2, t2), this;
    }, i2.Param.prototype.linearRampToValueAtTime = function(t2, e2) {
      return t2 = this._fromUnits(t2), this._param.linearRampToValueAtTime(t2, this.toSeconds(e2)), this;
    }, i2.Param.prototype.exponentialRampToValueAtTime = function(t2, e2) {
      return t2 = this._fromUnits(t2), t2 = Math.max(this._minOutput, t2), this._param.exponentialRampToValueAtTime(t2, this.toSeconds(e2)), this;
    }, i2.Param.prototype.exponentialRampToValue = function(t2, e2, n2) {
      return n2 = this.toSeconds(n2), this.setRampPoint(n2), this.exponentialRampToValueAtTime(t2, n2 + this.toSeconds(e2)), this;
    }, i2.Param.prototype.linearRampToValue = function(t2, e2, n2) {
      return n2 = this.toSeconds(n2), this.setRampPoint(n2), this.linearRampToValueAtTime(t2, n2 + this.toSeconds(e2)), this;
    }, i2.Param.prototype.setTargetAtTime = function(t2, e2, n2) {
      return t2 = this._fromUnits(t2), t2 = Math.max(this._minOutput, t2), n2 = Math.max(this._minOutput, n2), this._param.setTargetAtTime(t2, this.toSeconds(e2), n2), this;
    }, i2.Param.prototype.setValueCurveAtTime = function(t2, e2, n2) {
      for (var i3 = 0; i3 < t2.length; i3++)
        t2[i3] = this._fromUnits(t2[i3]);
      return this._param.setValueCurveAtTime(t2, this.toSeconds(e2), this.toSeconds(n2)), this;
    }, i2.Param.prototype.cancelScheduledValues = function(t2) {
      return this._param.cancelScheduledValues(this.toSeconds(t2)), this;
    }, i2.Param.prototype.rampTo = function(t2, e2, n2) {
      return e2 = this.defaultArg(e2, 0), this.units === i2.Type.Frequency || this.units === i2.Type.BPM || this.units === i2.Type.Decibels ? this.exponentialRampToValue(t2, e2, n2) : this.linearRampToValue(t2, e2, n2), this;
    }, Object.defineProperty(i2.Param.prototype, "lfo", { get: function() {
      return this._lfo;
    } }), i2.Param.prototype.dispose = function() {
      return i2.prototype.dispose.call(this), this._param = null, this._lfo && (this._lfo.dispose(), this._lfo = null), this;
    }, i2.Param;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(9)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Timeline = function() {
      var t2 = this.optionsObject(arguments, ["memory"], e2.Timeline.defaults);
      this._timeline = [], this._toRemove = [], this._iterating = false, this.memory = t2.memory;
    }, e2.extend(e2.Timeline), e2.Timeline.defaults = { memory: 1 / 0 }, Object.defineProperty(e2.Timeline.prototype, "length", { get: function() {
      return this._timeline.length;
    } }), e2.Timeline.prototype.add = function(t2) {
      if (this.isUndef(t2.time))
        throw new Error("Tone.Timeline: events must have a time attribute");
      if (this._timeline.length) {
        var e3 = this._search(t2.time);
        this._timeline.splice(e3 + 1, 0, t2);
      } else
        this._timeline.push(t2);
      if (this.length > this.memory) {
        var n2 = this.length - this.memory;
        this._timeline.splice(0, n2);
      }
      return this;
    }, e2.Timeline.prototype.remove = function(t2) {
      if (this._iterating)
        this._toRemove.push(t2);
      else {
        var e3 = this._timeline.indexOf(t2);
        -1 !== e3 && this._timeline.splice(e3, 1);
      }
      return this;
    }, e2.Timeline.prototype.get = function(t2) {
      var e3 = this._search(t2);
      return -1 !== e3 ? this._timeline[e3] : null;
    }, e2.Timeline.prototype.peek = function() {
      return this._timeline[0];
    }, e2.Timeline.prototype.shift = function() {
      return this._timeline.shift();
    }, e2.Timeline.prototype.getAfter = function(t2) {
      var e3 = this._search(t2);
      return e3 + 1 < this._timeline.length ? this._timeline[e3 + 1] : null;
    }, e2.Timeline.prototype.getBefore = function(t2) {
      var e3 = this._timeline.length;
      if (0 < e3 && this._timeline[e3 - 1].time < t2)
        return this._timeline[e3 - 1];
      var n2 = this._search(t2);
      return 0 <= n2 - 1 ? this._timeline[n2 - 1] : null;
    }, e2.Timeline.prototype.cancel = function(t2) {
      if (1 < this._timeline.length) {
        var e3 = this._search(t2);
        if (0 <= e3)
          if (this._timeline[e3].time === t2) {
            for (var n2 = e3; 0 <= n2 && this._timeline[n2].time === t2; n2--)
              e3 = n2;
            this._timeline = this._timeline.slice(0, e3);
          } else
            this._timeline = this._timeline.slice(0, e3 + 1);
        else
          this._timeline = [];
      } else
        1 === this._timeline.length && this._timeline[0].time >= t2 && (this._timeline = []);
      return this;
    }, e2.Timeline.prototype.cancelBefore = function(t2) {
      if (this._timeline.length) {
        var e3 = this._search(t2);
        0 <= e3 && (this._timeline = this._timeline.slice(e3 + 1));
      }
      return this;
    }, e2.Timeline.prototype._search = function(t2) {
      var e3 = 0, n2 = this._timeline.length, i2 = n2;
      if (0 < n2 && this._timeline[n2 - 1].time <= t2)
        return n2 - 1;
      for (; e3 < i2; ) {
        var r2 = Math.floor(e3 + (i2 - e3) / 2), o = this._timeline[r2], s = this._timeline[r2 + 1];
        if (o.time === t2) {
          for (var a = r2; a < this._timeline.length; a++)
            this._timeline[a].time === t2 && (r2 = a);
          return r2;
        }
        if (o.time < t2 && s.time > t2)
          return r2;
        o.time > t2 ? i2 = r2 : o.time < t2 && (e3 = r2 + 1);
      }
      return -1;
    }, e2.Timeline.prototype._iterate = function(t2, e3, n2) {
      this._iterating = true, e3 = this.defaultArg(e3, 0), n2 = this.defaultArg(n2, this._timeline.length - 1);
      for (var i2 = e3; i2 <= n2; i2++)
        t2(this._timeline[i2]);
      if (this._iterating = false, 0 < this._toRemove.length) {
        for (var r2 = 0; r2 < this._toRemove.length; r2++) {
          var o = this._timeline.indexOf(this._toRemove[r2]);
          -1 !== o && this._timeline.splice(o, 1);
        }
        this._toRemove = [];
      }
    }, e2.Timeline.prototype.forEach = function(t2) {
      return this._iterate(t2), this;
    }, e2.Timeline.prototype.forEachBefore = function(t2, e3) {
      var n2 = this._search(t2);
      return -1 !== n2 && this._iterate(e3, 0, n2), this;
    }, e2.Timeline.prototype.forEachAfter = function(t2, e3) {
      var n2 = this._search(t2);
      return this._iterate(e3, n2 + 1), this;
    }, e2.Timeline.prototype.forEachFrom = function(t2, e3) {
      for (var n2 = this._search(t2); 0 <= n2 && this._timeline[n2].time >= t2; )
        n2--;
      return this._iterate(e3, n2 + 1), this;
    }, e2.Timeline.prototype.forEachAtTime = function(e3, n2) {
      var t2 = this._search(e3);
      return -1 !== t2 && this._iterate(function(t3) {
        t3.time === e3 && n2(t3);
      }, 0, t2), this;
    }, e2.Timeline.prototype.dispose = function() {
      e2.prototype.dispose.call(this), this._timeline = null, this._toRemove = null;
    }, e2.Timeline;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(1), n(2)], void 0 === (r = function(t2) {
    "use strict";
    return t2.Negate = function() {
      this._multiply = this.input = this.output = new t2.Multiply(-1);
    }, t2.extend(t2.Negate, t2.SignalBase), t2.Negate.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._multiply.dispose(), this._multiply = null, this;
    }, t2.Negate;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(2), n(1), n(6)], void 0 === (r = function(t2) {
    "use strict";
    return t2.GreaterThanZero = function() {
      this._thresh = this.output = new t2.WaveShaper(function(t3) {
        return t3 <= 0 ? 0 : 1;
      }, 127), this._scale = this.input = new t2.Multiply(1e4), this._scale.connect(this._thresh);
    }, t2.extend(t2.GreaterThanZero, t2.SignalBase), t2.GreaterThanZero.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._scale.dispose(), this._scale = null, this._thresh.dispose(), this._thresh = null, this;
    }, t2.GreaterThanZero;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r, o;
  r = [], void 0 === (o = "function" == typeof (i = function() {
    var s = function(t2, e2) {
      this._dragged = false, this._element = t2, this._bindedMove = this._moved.bind(this), this._bindedEnd = this._ended.bind(this, e2), t2.addEventListener("touchstart", this._bindedEnd), t2.addEventListener("touchmove", this._bindedMove), t2.addEventListener("touchend", this._bindedEnd), t2.addEventListener("mouseup", this._bindedEnd);
    };
    function o2(t2) {
      return "running" === t2.state;
    }
    return s.prototype._moved = function(t2) {
      this._dragged = true;
    }, s.prototype._ended = function(t2) {
      this._dragged || function(t3) {
        var e2 = t3.createBuffer(1, 1, t3.sampleRate), n2 = t3.createBufferSource();
        n2.buffer = e2, n2.connect(t3.destination), n2.start(0), t3.resume && t3.resume();
      }(t2), this._dragged = false;
    }, s.prototype.dispose = function() {
      this._element.removeEventListener("touchstart", this._bindedEnd), this._element.removeEventListener("touchmove", this._bindedMove), this._element.removeEventListener("touchend", this._bindedEnd), this._element.removeEventListener("mouseup", this._bindedEnd), this._bindedMove = null, this._bindedEnd = null, this._element = null;
    }, function(e2, t2, n2) {
      var i2 = new Promise(function(t3) {
        !function(e3, n3) {
          o2(e3) ? n3() : function t4() {
            o2(e3) ? n3() : (requestAnimationFrame(t4), e3.resume && e3.resume());
          }();
        }(e2, t3);
      }), r2 = [];
      return function t3(e3, n3, i3) {
        if (Array.isArray(e3) || NodeList && e3 instanceof NodeList)
          for (var r3 = 0; r3 < e3.length; r3++)
            t3(e3[r3], n3, i3);
        else if ("string" == typeof e3)
          t3(document.querySelectorAll(e3), n3, i3);
        else if (e3.jquery && "function" == typeof e3.toArray)
          t3(e3.toArray(), n3, i3);
        else if (Element && e3 instanceof Element) {
          var o3 = new s(e3, i3);
          n3.push(o3);
        }
      }(t2 = t2 || document.body, r2, e2), i2.then(function() {
        for (var t3 = 0; t3 < r2.length; t3++)
          r2[t3].dispose();
        r2 = null, n2 && n2();
      }), i2;
    };
  }) ? i.apply(e, r) : i) || (t.exports = o);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(2), n(32), n(38), n(10)], void 0 === (r = function(e2) {
    "use strict";
    return e2.CrossFade = function(t2) {
      this.createInsOuts(2, 1), this.a = this.input[0] = new e2.Gain(), this.b = this.input[1] = new e2.Gain(), this.fade = new e2.Signal(this.defaultArg(t2, 0.5), e2.Type.NormalRange), this._equalPowerA = new e2.EqualPowerGain(), this._equalPowerB = new e2.EqualPowerGain(), this._invert = new e2.Expr("1 - $0"), this.a.connect(this.output), this.b.connect(this.output), this.fade.chain(this._equalPowerB, this.b.gain), this.fade.chain(this._invert, this._equalPowerA, this.a.gain), this._readOnly("fade");
    }, e2.extend(e2.CrossFade), e2.CrossFade.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._writable("fade"), this._equalPowerA.dispose(), this._equalPowerA = null, this._equalPowerB.dispose(), this._equalPowerB = null, this.fade.dispose(), this.fade = null, this._invert.dispose(), this._invert = null, this.a.dispose(), this.a = null, this.b.dispose(), this.b = null, this;
    }, e2.CrossFade;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e) {
  function l(t2) {
    var i = this, r = {}, o = -1;
    this.parameters.forEach(function(t3, e3) {
      var n3 = a[++o] || (a[o] = new Float32Array(i.bufferSize));
      n3.fill(t3.value), r[e3] = n3;
    }), this.processor.realm.exec("self.sampleRate=sampleRate=" + this.context.sampleRate + ";self.currentTime=currentTime=" + this.context.currentTime);
    var e2 = s(t2.inputBuffer), n2 = s(t2.outputBuffer);
    this.instance.process([e2], [n2], r);
  }
  function s(t2) {
    for (var e2 = [], n2 = 0; n2 < t2.numberOfChannels; n2++)
      e2[n2] = t2.getChannelData(n2);
    return e2;
  }
  function h(t2) {
    return t2.$$processors || (t2.$$processors = {});
  }
  function n(t2) {
    this.$$context = t2;
  }
  var p, a;
  a = [], "function" != typeof AudioWorkletNode && (self.AudioWorkletNode = function(t2, e2, n2) {
    var i = h(t2)[e2], r = t2.createScriptProcessor(void 0, 2, n2 && n2.outputChannelCount ? n2.outputChannelCount[0] : 2);
    if (r.parameters = /* @__PURE__ */ new Map(), i.properties)
      for (var o = 0; o < i.properties.length; o++) {
        var s2 = i.properties[o], a2 = t2.createGain().gain;
        a2.value = s2.defaultValue, r.parameters.set(s2.name, a2);
      }
    var u = new MessageChannel();
    p = u.port2;
    var c = new i.Processor(n2 || {});
    return p = null, r.port = u.port1, r.processor = i, r.instance = c, r.onaudioprocess = l, r;
  }, Object.defineProperty((self.AudioContext || self.webkitAudioContext).prototype, "audioWorklet", { get: function() {
    return this.$$audioWorklet || (this.$$audioWorklet = new self.AudioWorklet(this));
  } }), self.AudioWorklet = (n.prototype.addModule = function(t2, e2) {
    var r = this;
    return fetch(t2).then(function(t3) {
      if (!t3.ok)
        throw Error(t3.status);
      return t3.text();
    }).then(function(t3) {
      var n2 = { sampleRate: 0, currentTime: 0, AudioWorkletProcessor: function() {
        this.port = p;
      }, registerProcessor: function(t4, e3) {
        h(r.$$context)[t4] = { realm: i, context: n2, Processor: e3, properties: e3.parameterDescriptors || [] };
      } }, i = new function(t4, e3) {
        var n3 = document.createElement("iframe");
        n3.style.cssText = "position:absolute;left:0;top:-999px;width:1px;height:1px;", e3.appendChild(n3);
        var i2 = n3.contentWindow, r2 = i2.document, o = "var window,$hook";
        for (var s2 in i2)
          s2 in t4 || "eval" === s2 || (o += ",", o += s2);
        for (var a2 in t4)
          o += ",", o += a2, o += "=self.", o += a2;
        var u = r2.createElement("script");
        u.appendChild(r2.createTextNode('function $hook(self,console) {"use strict";\n        ' + o + ";return function() {return eval(arguments[0])}}")), r2.body.appendChild(u), this.exec = i2.$hook(t4, console);
      }(n2.self = n2, document.documentElement);
      return i.exec((e2 && e2.transpile || String)(t3)), null;
    });
  }, n));
}, function(t, e) {
  function n(t2) {
    t2 && (t2.setTargetAtTime || (t2.setTargetAtTime = t2.setTargetValueAtTime));
  }
  window, window.hasOwnProperty("webkitAudioContext") && !window.hasOwnProperty("AudioContext") && (window.AudioContext = window.webkitAudioContext, "function" != typeof AudioContext.prototype.createGain && (AudioContext.prototype.createGain = AudioContext.prototype.createGainNode), "function" != typeof AudioContext.prototype.createDelay && (AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode), "function" != typeof AudioContext.prototype.createScriptProcessor && (AudioContext.prototype.createScriptProcessor = AudioContext.prototype.createJavaScriptNode), "function" != typeof AudioContext.prototype.createPeriodicWave && (AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable), AudioContext.prototype.internal_createGain = AudioContext.prototype.createGain, AudioContext.prototype.createGain = function() {
    var t2 = this.internal_createGain();
    return n(t2.gain), t2;
  }, AudioContext.prototype.internal_createDelay = AudioContext.prototype.createDelay, AudioContext.prototype.createDelay = function(t2) {
    var e2 = t2 ? this.internal_createDelay(t2) : this.internal_createDelay();
    return n(e2.delayTime), e2;
  }, AudioContext.prototype.internal_createBufferSource = AudioContext.prototype.createBufferSource, AudioContext.prototype.createBufferSource = function() {
    var i2 = this.internal_createBufferSource();
    return i2.start ? (i2.internal_start = i2.start, i2.start = function(t2, e2, n2) {
      void 0 !== n2 ? i2.internal_start(t2 || 0, e2, n2) : i2.internal_start(t2 || 0, e2 || 0);
    }) : i2.start = function(t2, e2, n2) {
      e2 || n2 ? this.noteGrainOn(t2 || 0, e2, n2) : this.noteOn(t2 || 0);
    }, i2.stop ? (i2.internal_stop = i2.stop, i2.stop = function(t2) {
      i2.internal_stop(t2 || 0);
    }) : i2.stop = function(t2) {
      this.noteOff(t2 || 0);
    }, n(i2.playbackRate), i2;
  }, AudioContext.prototype.internal_createDynamicsCompressor = AudioContext.prototype.createDynamicsCompressor, AudioContext.prototype.createDynamicsCompressor = function() {
    var t2 = this.internal_createDynamicsCompressor();
    return n(t2.threshold), n(t2.knee), n(t2.ratio), n(t2.reduction), n(t2.attack), n(t2.release), t2;
  }, AudioContext.prototype.internal_createBiquadFilter = AudioContext.prototype.createBiquadFilter, AudioContext.prototype.createBiquadFilter = function() {
    var t2 = this.internal_createBiquadFilter();
    return n(t2.frequency), n(t2.detune), n(t2.Q), n(t2.gain), t2;
  }, "function" != typeof AudioContext.prototype.createOscillator && (AudioContext.prototype.internal_createOscillator = AudioContext.prototype.createOscillator, AudioContext.prototype.createOscillator = function() {
    var e2 = this.internal_createOscillator();
    return e2.start ? (e2.internal_start = e2.start, e2.start = function(t2) {
      e2.internal_start(t2 || 0);
    }) : e2.start = function(t2) {
      this.noteOn(t2 || 0);
    }, e2.stop ? (e2.internal_stop = e2.stop, e2.stop = function(t2) {
      e2.internal_stop(t2 || 0);
    }) : e2.stop = function(t2) {
      this.noteOff(t2 || 0);
    }, e2.setPeriodicWave || (e2.setPeriodicWave = e2.setWaveTable), n(e2.frequency), n(e2.detune), e2;
  })), window.hasOwnProperty("webkitOfflineAudioContext") && !window.hasOwnProperty("OfflineAudioContext") && (window.OfflineAudioContext = window.webkitOfflineAudioContext), navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
  var i = document.createElement("audio");
  p5.prototype.isSupported = function() {
    return !!i.canPlayType;
  };
  p5.prototype.isFileSupported = function(t2) {
    switch (t2.toLowerCase()) {
      case "mp3":
        return !!i.canPlayType && i.canPlayType("audio/mpeg;");
      case "wav":
        return !!i.canPlayType && i.canPlayType('audio/wav; codecs="1"');
      case "ogg":
        return !!i.canPlayType && i.canPlayType('audio/ogg; codecs="vorbis"');
      case "aac":
      case "m4a":
      case "mp4":
        return !!i.canPlayType && (i.canPlayType("audio/x-m4a;") || i.canPlayType("audio/aac;"));
      case "aif":
      case "aiff":
        return !!i.canPlayType && i.canPlayType("audio/x-aiff;");
      default:
        return false;
    }
  };
}, function(t, e) {
  var n;
  n = /* @__PURE__ */ function() {
    return this;
  }();
  try {
    n = n || new Function("return this")();
  } catch (t2) {
    "object" == typeof window && (n = window);
  }
  t.exports = n;
}, function(t, e, n) {
  "use strict";
  n.r(e), e.default = `function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// import dependencies via preval.require so that they're available as values at compile time
var processorNames = {
  "recorderProcessor": "recorder-processor",
  "soundFileProcessor": "sound-file-processor",
  "amplitudeProcessor": "amplitude-processor"
};
var RingBuffer = {
  "default":
  /*#__PURE__*/
  function () {
    /**
     * @constructor
     * @param  {number} length Buffer length in frames.
     * @param  {number} channelCount Buffer channel count.
     */
    function RingBuffer(length, channelCount) {
      _classCallCheck(this, RingBuffer);

      this._readIndex = 0;
      this._writeIndex = 0;
      this._framesAvailable = 0;
      this._channelCount = channelCount;
      this._length = length;
      this._channelData = [];

      for (var i = 0; i < this._channelCount; ++i) {
        this._channelData[i] = new Float32Array(length);
      }
    }
    /**
     * Getter for Available frames in buffer.
     *
     * @return {number} Available frames in buffer.
     */


    _createClass(RingBuffer, [{
      key: "push",

      /**
       * Push a sequence of Float32Arrays to buffer.
       *
       * @param  {array} arraySequence A sequence of Float32Arrays.
       */
      value: function push(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // Transfer data from the |arraySequence| storage to the internal buffer.
        var sourceLength = arraySequence[0] ? arraySequence[0].length : 0;

        for (var i = 0; i < sourceLength; ++i) {
          var writeIndex = (this._writeIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            this._channelData[channel][writeIndex] = arraySequence[channel][i];
          }
        }

        this._writeIndex += sourceLength;

        if (this._writeIndex >= this._length) {
          this._writeIndex = 0;
        } // For excessive frames, the buffer will be overwritten.


        this._framesAvailable += sourceLength;

        if (this._framesAvailable > this._length) {
          this._framesAvailable = this._length;
        }
      }
      /**
       * Pull data out of buffer and fill a given sequence of Float32Arrays.
       *
       * @param  {array} arraySequence An array of Float32Arrays.
       */

    }, {
      key: "pull",
      value: function pull(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // If the FIFO is completely empty, do nothing.
        if (this._framesAvailable === 0) {
          return;
        }

        var destinationLength = arraySequence[0].length; // Transfer data from the internal buffer to the |arraySequence| storage.

        for (var i = 0; i < destinationLength; ++i) {
          var readIndex = (this._readIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            arraySequence[channel][i] = this._channelData[channel][readIndex];
          }
        }

        this._readIndex += destinationLength;

        if (this._readIndex >= this._length) {
          this._readIndex = 0;
        }

        this._framesAvailable -= destinationLength;

        if (this._framesAvailable < 0) {
          this._framesAvailable = 0;
        }
      }
    }, {
      key: "framesAvailable",
      get: function get() {
        return this._framesAvailable;
      }
    }]);

    return RingBuffer;
  }()
}["default"];

var RecorderProcessor =
/*#__PURE__*/
function (_AudioWorkletProcesso) {
  _inherits(RecorderProcessor, _AudioWorkletProcesso);

  function RecorderProcessor(options) {
    var _this;

    _classCallCheck(this, RecorderProcessor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RecorderProcessor).call(this));
    var processorOptions = options.processorOptions || {};
    _this.numOutputChannels = options.outputChannelCount || 2;
    _this.numInputChannels = processorOptions.numInputChannels || 2;
    _this.bufferSize = processorOptions.bufferSize || 1024;
    _this.recording = false;

    _this.clear();

    _this.port.onmessage = function (event) {
      var data = event.data;

      if (data.name === 'start') {
        _this.record(data.duration);
      } else if (data.name === 'stop') {
        _this.stop();
      }
    };

    return _this;
  }

  _createClass(RecorderProcessor, [{
    key: "process",
    value: function process(inputs) {
      if (!this.recording) {
        return true;
      } else if (this.sampleLimit && this.recordedSamples >= this.sampleLimit) {
        this.stop();
        return true;
      }

      var input = inputs[0];
      this.inputRingBuffer.push(input);

      if (this.inputRingBuffer.framesAvailable >= this.bufferSize) {
        this.inputRingBuffer.pull(this.inputRingBufferArraySequence);

        for (var channel = 0; channel < this.numOutputChannels; ++channel) {
          var inputChannelCopy = this.inputRingBufferArraySequence[channel].slice();

          if (channel === 0) {
            this.leftBuffers.push(inputChannelCopy);

            if (this.numInputChannels === 1) {
              this.rightBuffers.push(inputChannelCopy);
            }
          } else if (channel === 1 && this.numInputChannels > 1) {
            this.rightBuffers.push(inputChannelCopy);
          }
        }

        this.recordedSamples += this.bufferSize;
      }

      return true;
    }
  }, {
    key: "record",
    value: function record(duration) {
      if (duration) {
        this.sampleLimit = Math.round(duration * sampleRate);
      }

      this.recording = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      this.recording = false;
      var buffers = this.getBuffers();
      var leftBuffer = buffers[0].buffer;
      var rightBuffer = buffers[1].buffer;
      this.port.postMessage({
        name: 'buffers',
        leftBuffer: leftBuffer,
        rightBuffer: rightBuffer
      }, [leftBuffer, rightBuffer]);
      this.clear();
    }
  }, {
    key: "getBuffers",
    value: function getBuffers() {
      var buffers = [];
      buffers.push(this.mergeBuffers(this.leftBuffers));
      buffers.push(this.mergeBuffers(this.rightBuffers));
      return buffers;
    }
  }, {
    key: "mergeBuffers",
    value: function mergeBuffers(channelBuffer) {
      var result = new Float32Array(this.recordedSamples);
      var offset = 0;
      var lng = channelBuffer.length;

      for (var i = 0; i < lng; i++) {
        var buffer = channelBuffer[i];
        result.set(buffer, offset);
        offset += buffer.length;
      }

      return result;
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this2 = this;

      this.leftBuffers = [];
      this.rightBuffers = [];
      this.inputRingBuffer = new RingBuffer(this.bufferSize, this.numInputChannels);
      this.inputRingBufferArraySequence = new Array(this.numInputChannels).fill(null).map(function () {
        return new Float32Array(_this2.bufferSize);
      });
      this.recordedSamples = 0;
      this.sampleLimit = null;
    }
  }]);

  return RecorderProcessor;
}(_wrapNativeSuper(AudioWorkletProcessor));

registerProcessor(processorNames.recorderProcessor, RecorderProcessor);`;
}, function(t, e, n) {
  "use strict";
  n.r(e), e.default = `function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// import dependencies via preval.require so that they're available as values at compile time
var processorNames = {
  "recorderProcessor": "recorder-processor",
  "soundFileProcessor": "sound-file-processor",
  "amplitudeProcessor": "amplitude-processor"
};
var RingBuffer = {
  "default":
  /*#__PURE__*/
  function () {
    /**
     * @constructor
     * @param  {number} length Buffer length in frames.
     * @param  {number} channelCount Buffer channel count.
     */
    function RingBuffer(length, channelCount) {
      _classCallCheck(this, RingBuffer);

      this._readIndex = 0;
      this._writeIndex = 0;
      this._framesAvailable = 0;
      this._channelCount = channelCount;
      this._length = length;
      this._channelData = [];

      for (var i = 0; i < this._channelCount; ++i) {
        this._channelData[i] = new Float32Array(length);
      }
    }
    /**
     * Getter for Available frames in buffer.
     *
     * @return {number} Available frames in buffer.
     */


    _createClass(RingBuffer, [{
      key: "push",

      /**
       * Push a sequence of Float32Arrays to buffer.
       *
       * @param  {array} arraySequence A sequence of Float32Arrays.
       */
      value: function push(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // Transfer data from the |arraySequence| storage to the internal buffer.
        var sourceLength = arraySequence[0] ? arraySequence[0].length : 0;

        for (var i = 0; i < sourceLength; ++i) {
          var writeIndex = (this._writeIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            this._channelData[channel][writeIndex] = arraySequence[channel][i];
          }
        }

        this._writeIndex += sourceLength;

        if (this._writeIndex >= this._length) {
          this._writeIndex = 0;
        } // For excessive frames, the buffer will be overwritten.


        this._framesAvailable += sourceLength;

        if (this._framesAvailable > this._length) {
          this._framesAvailable = this._length;
        }
      }
      /**
       * Pull data out of buffer and fill a given sequence of Float32Arrays.
       *
       * @param  {array} arraySequence An array of Float32Arrays.
       */

    }, {
      key: "pull",
      value: function pull(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // If the FIFO is completely empty, do nothing.
        if (this._framesAvailable === 0) {
          return;
        }

        var destinationLength = arraySequence[0].length; // Transfer data from the internal buffer to the |arraySequence| storage.

        for (var i = 0; i < destinationLength; ++i) {
          var readIndex = (this._readIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            arraySequence[channel][i] = this._channelData[channel][readIndex];
          }
        }

        this._readIndex += destinationLength;

        if (this._readIndex >= this._length) {
          this._readIndex = 0;
        }

        this._framesAvailable -= destinationLength;

        if (this._framesAvailable < 0) {
          this._framesAvailable = 0;
        }
      }
    }, {
      key: "framesAvailable",
      get: function get() {
        return this._framesAvailable;
      }
    }]);

    return RingBuffer;
  }()
}["default"];

var SoundFileProcessor =
/*#__PURE__*/
function (_AudioWorkletProcesso) {
  _inherits(SoundFileProcessor, _AudioWorkletProcesso);

  function SoundFileProcessor(options) {
    var _this;

    _classCallCheck(this, SoundFileProcessor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SoundFileProcessor).call(this));
    var processorOptions = options.processorOptions || {};
    _this.bufferSize = processorOptions.bufferSize || 256;
    _this.inputRingBuffer = new RingBuffer(_this.bufferSize, 1);
    _this.inputRingBufferArraySequence = [new Float32Array(_this.bufferSize)];
    return _this;
  }

  _createClass(SoundFileProcessor, [{
    key: "process",
    value: function process(inputs) {
      var input = inputs[0]; // we only care about the first input channel, because that contains the position data

      this.inputRingBuffer.push([input[0]]);

      if (this.inputRingBuffer.framesAvailable >= this.bufferSize) {
        this.inputRingBuffer.pull(this.inputRingBufferArraySequence);
        var inputChannel = this.inputRingBufferArraySequence[0];
        var position = inputChannel[inputChannel.length - 1] || 0;
        this.port.postMessage({
          name: 'position',
          position: position
        });
      }

      return true;
    }
  }]);

  return SoundFileProcessor;
}(_wrapNativeSuper(AudioWorkletProcessor));

registerProcessor(processorNames.soundFileProcessor, SoundFileProcessor);`;
}, function(t, e, n) {
  "use strict";
  n.r(e), e.default = `function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// import dependencies via preval.require so that they're available as values at compile time
var processorNames = {
  "recorderProcessor": "recorder-processor",
  "soundFileProcessor": "sound-file-processor",
  "amplitudeProcessor": "amplitude-processor"
};
var RingBuffer = {
  "default":
  /*#__PURE__*/
  function () {
    /**
     * @constructor
     * @param  {number} length Buffer length in frames.
     * @param  {number} channelCount Buffer channel count.
     */
    function RingBuffer(length, channelCount) {
      _classCallCheck(this, RingBuffer);

      this._readIndex = 0;
      this._writeIndex = 0;
      this._framesAvailable = 0;
      this._channelCount = channelCount;
      this._length = length;
      this._channelData = [];

      for (var i = 0; i < this._channelCount; ++i) {
        this._channelData[i] = new Float32Array(length);
      }
    }
    /**
     * Getter for Available frames in buffer.
     *
     * @return {number} Available frames in buffer.
     */


    _createClass(RingBuffer, [{
      key: "push",

      /**
       * Push a sequence of Float32Arrays to buffer.
       *
       * @param  {array} arraySequence A sequence of Float32Arrays.
       */
      value: function push(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // Transfer data from the |arraySequence| storage to the internal buffer.
        var sourceLength = arraySequence[0] ? arraySequence[0].length : 0;

        for (var i = 0; i < sourceLength; ++i) {
          var writeIndex = (this._writeIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            this._channelData[channel][writeIndex] = arraySequence[channel][i];
          }
        }

        this._writeIndex += sourceLength;

        if (this._writeIndex >= this._length) {
          this._writeIndex = 0;
        } // For excessive frames, the buffer will be overwritten.


        this._framesAvailable += sourceLength;

        if (this._framesAvailable > this._length) {
          this._framesAvailable = this._length;
        }
      }
      /**
       * Pull data out of buffer and fill a given sequence of Float32Arrays.
       *
       * @param  {array} arraySequence An array of Float32Arrays.
       */

    }, {
      key: "pull",
      value: function pull(arraySequence) {
        // The channel count of arraySequence and the length of each channel must
        // match with this buffer obejct.
        // If the FIFO is completely empty, do nothing.
        if (this._framesAvailable === 0) {
          return;
        }

        var destinationLength = arraySequence[0].length; // Transfer data from the internal buffer to the |arraySequence| storage.

        for (var i = 0; i < destinationLength; ++i) {
          var readIndex = (this._readIndex + i) % this._length;

          for (var channel = 0; channel < this._channelCount; ++channel) {
            arraySequence[channel][i] = this._channelData[channel][readIndex];
          }
        }

        this._readIndex += destinationLength;

        if (this._readIndex >= this._length) {
          this._readIndex = 0;
        }

        this._framesAvailable -= destinationLength;

        if (this._framesAvailable < 0) {
          this._framesAvailable = 0;
        }
      }
    }, {
      key: "framesAvailable",
      get: function get() {
        return this._framesAvailable;
      }
    }]);

    return RingBuffer;
  }()
}["default"];

var AmplitudeProcessor =
/*#__PURE__*/
function (_AudioWorkletProcesso) {
  _inherits(AmplitudeProcessor, _AudioWorkletProcesso);

  function AmplitudeProcessor(options) {
    var _this;

    _classCallCheck(this, AmplitudeProcessor);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AmplitudeProcessor).call(this));
    var processorOptions = options.processorOptions || {};
    _this.numOutputChannels = options.outputChannelCount || 1;
    _this.numInputChannels = processorOptions.numInputChannels || 2;
    _this.normalize = processorOptions.normalize || false;
    _this.smoothing = processorOptions.smoothing || 0;
    _this.bufferSize = processorOptions.bufferSize || 2048;
    _this.inputRingBuffer = new RingBuffer(_this.bufferSize, _this.numInputChannels);
    _this.outputRingBuffer = new RingBuffer(_this.bufferSize, _this.numOutputChannels);
    _this.inputRingBufferArraySequence = new Array(_this.numInputChannels).fill(null).map(function () {
      return new Float32Array(_this.bufferSize);
    });
    _this.stereoVol = [0, 0];
    _this.stereoVolNorm = [0, 0];
    _this.volMax = 0.001;

    _this.port.onmessage = function (event) {
      var data = event.data;

      if (data.name === 'toggleNormalize') {
        _this.normalize = data.normalize;
      } else if (data.name === 'smoothing') {
        _this.smoothing = Math.max(0, Math.min(1, data.smoothing));
      }
    };

    return _this;
  } // TO DO make this stereo / dependent on # of audio channels


  _createClass(AmplitudeProcessor, [{
    key: "process",
    value: function process(inputs, outputs) {
      var input = inputs[0];
      var output = outputs[0];
      var smoothing = this.smoothing;
      this.inputRingBuffer.push(input);

      if (this.inputRingBuffer.framesAvailable >= this.bufferSize) {
        this.inputRingBuffer.pull(this.inputRingBufferArraySequence);

        for (var channel = 0; channel < this.numInputChannels; ++channel) {
          var inputBuffer = this.inputRingBufferArraySequence[channel];
          var bufLength = inputBuffer.length;
          var sum = 0;

          for (var i = 0; i < bufLength; i++) {
            var x = inputBuffer[i];

            if (this.normalize) {
              sum += Math.max(Math.min(x / this.volMax, 1), -1) * Math.max(Math.min(x / this.volMax, 1), -1);
            } else {
              sum += x * x;
            }
          } // ... then take the square root of the sum.


          var rms = Math.sqrt(sum / bufLength);
          this.stereoVol[channel] = Math.max(rms, this.stereoVol[channel] * smoothing);
          this.volMax = Math.max(this.stereoVol[channel], this.volMax);
        } // calculate stero normalized volume and add volume from all channels together


        var volSum = 0;

        for (var index = 0; index < this.stereoVol.length; index++) {
          this.stereoVolNorm[index] = Math.max(Math.min(this.stereoVol[index] / this.volMax, 1), 0);
          volSum += this.stereoVol[index];
        } // volume is average of channels


        var volume = volSum / this.stereoVol.length; // normalized value

        var volNorm = Math.max(Math.min(volume / this.volMax, 1), 0);
        this.port.postMessage({
          name: 'amplitude',
          volume: volume,
          volNorm: volNorm,
          stereoVol: this.stereoVol,
          stereoVolNorm: this.stereoVolNorm
        }); // pass input through to output

        this.outputRingBuffer.push(this.inputRingBufferArraySequence);
      } // pull 128 frames out of the ring buffer
      // if the ring buffer does not have enough frames, the output will be silent


      this.outputRingBuffer.pull(output);
      return true;
    }
  }]);

  return AmplitudeProcessor;
}(_wrapNativeSuper(AudioWorkletProcessor));

registerProcessor(processorNames.amplitudeProcessor, AmplitudeProcessor);`;
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(17)], void 0 === (r = function(r2) {
    r2.Frequency = function(t2, e2) {
      if (!(this instanceof r2.Frequency))
        return new r2.Frequency(t2, e2);
      r2.TimeBase.call(this, t2, e2);
    }, r2.extend(r2.Frequency, r2.TimeBase), r2.Frequency.prototype._primaryExpressions = Object.create(r2.TimeBase.prototype._primaryExpressions), r2.Frequency.prototype._primaryExpressions.midi = { regexp: /^(\d+(?:\.\d+)?midi)/, method: function(t2) {
      return this.midiToFrequency(t2);
    } }, r2.Frequency.prototype._primaryExpressions.note = { regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i, method: function(t2, e2) {
      var n2 = i2[t2.toLowerCase()] + 12 * (parseInt(e2) + 1);
      return this.midiToFrequency(n2);
    } }, r2.Frequency.prototype._primaryExpressions.tr = { regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/, method: function(t2, e2, n2) {
      var i3 = 1;
      return t2 && "0" !== t2 && (i3 *= this._beatsToUnits(this._timeSignature() * parseFloat(t2))), e2 && "0" !== e2 && (i3 *= this._beatsToUnits(parseFloat(e2))), n2 && "0" !== n2 && (i3 *= this._beatsToUnits(parseFloat(n2) / 4)), i3;
    } }, r2.Frequency.prototype.transpose = function(t2) {
      return this._expr = function(t3, e2) {
        return t3() * this.intervalToFrequencyRatio(e2);
      }.bind(this, this._expr, t2), this;
    }, r2.Frequency.prototype.harmonize = function(t2) {
      return this._expr = function(t3, e2) {
        for (var n2 = t3(), i3 = [], r3 = 0; r3 < e2.length; r3++)
          i3[r3] = n2 * this.intervalToFrequencyRatio(e2[r3]);
        return i3;
      }.bind(this, this._expr, t2), this;
    }, r2.Frequency.prototype.toMidi = function() {
      return this.frequencyToMidi(this.valueOf());
    }, r2.Frequency.prototype.toNote = function() {
      var t2 = this.valueOf(), e2 = Math.log(t2 / r2.Frequency.A4) / Math.LN2, n2 = Math.round(12 * e2) + 57, i3 = Math.floor(n2 / 12);
      return i3 < 0 && (n2 += -12 * i3), o[n2 % 12] + i3.toString();
    }, r2.Frequency.prototype.toSeconds = function() {
      return 1 / this.valueOf();
    }, r2.Frequency.prototype.toFrequency = function() {
      return this.valueOf();
    }, r2.Frequency.prototype.toTicks = function() {
      var t2 = this._beatsToUnits(1), e2 = this.valueOf() / t2;
      return Math.floor(e2 * r2.Transport.PPQ);
    }, r2.Frequency.prototype._frequencyToUnits = function(t2) {
      return t2;
    }, r2.Frequency.prototype._ticksToUnits = function(t2) {
      return 1 / (60 * t2 / (r2.Transport.bpm.value * r2.Transport.PPQ));
    }, r2.Frequency.prototype._beatsToUnits = function(t2) {
      return 1 / r2.TimeBase.prototype._beatsToUnits.call(this, t2);
    }, r2.Frequency.prototype._secondsToUnits = function(t2) {
      return 1 / t2;
    }, r2.Frequency.prototype._defaultUnits = "hz";
    var i2 = { cbb: -2, cb: -1, c: 0, "c#": 1, cx: 2, dbb: 0, db: 1, d: 2, "d#": 3, dx: 4, ebb: 2, eb: 3, e: 4, "e#": 5, ex: 6, fbb: 3, fb: 4, f: 5, "f#": 6, fx: 7, gbb: 5, gb: 6, g: 7, "g#": 8, gx: 9, abb: 7, ab: 8, a: 9, "a#": 10, ax: 11, bbb: 9, bb: 10, b: 11, "b#": 12, bx: 13 }, o = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
    return r2.Frequency.A4 = 440, r2.Frequency.prototype.midiToFrequency = function(t2) {
      return r2.Frequency.A4 * Math.pow(2, (t2 - 69) / 12);
    }, r2.Frequency.prototype.frequencyToMidi = function(t2) {
      return 69 + 12 * Math.log(t2 / r2.Frequency.A4) / Math.LN2;
    }, r2.Frequency;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(16)], void 0 === (r = function(i2) {
    return i2.TransportTime = function(t2, e2) {
      if (!(this instanceof i2.TransportTime))
        return new i2.TransportTime(t2, e2);
      i2.Time.call(this, t2, e2);
    }, i2.extend(i2.TransportTime, i2.Time), i2.TransportTime.prototype._unaryExpressions = Object.create(i2.Time.prototype._unaryExpressions), i2.TransportTime.prototype._unaryExpressions.quantize = { regexp: /^@/, method: function(t2) {
      var e2 = this._secondsToTicks(t2()), n2 = Math.ceil(i2.Transport.ticks / e2);
      return this._ticksToUnits(n2 * e2);
    } }, i2.TransportTime.prototype._secondsToTicks = function(t2) {
      var e2 = t2 / this._beatsToUnits(1);
      return Math.round(e2 * i2.Transport.PPQ);
    }, i2.TransportTime.prototype.valueOf = function() {
      return this._secondsToTicks(this._expr()) + (this._plusNow ? i2.Transport.ticks : 0);
    }, i2.TransportTime.prototype.toTicks = function() {
      return this.valueOf();
    }, i2.TransportTime.prototype.toSeconds = function() {
      return this._expr() + (this._plusNow ? i2.Transport.seconds : 0);
    }, i2.TransportTime.prototype.toFrequency = function() {
      return 1 / this.toSeconds();
    }, i2.TransportTime;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(4), n(13), n(1), n(33), n(21), n(34), n(20), n(35), n(36), n(37)], void 0 === (r = function(u) {
    "use strict";
    function n2(t2, e2, n3) {
      var i3 = new t2();
      return n3._eval(e2[0]).connect(i3, 0, 0), n3._eval(e2[1]).connect(i3, 0, 1), i3;
    }
    function i2(t2, e2, n3) {
      var i3 = new t2();
      return n3._eval(e2[0]).connect(i3, 0, 0), i3;
    }
    function r2(t2) {
      return t2 ? parseFloat(t2) : void 0;
    }
    function o(t2) {
      return t2 && t2.args ? parseFloat(t2.args) : void 0;
    }
    return u.Expr = function() {
      var t2 = this._replacements(Array.prototype.slice.call(arguments)), e2 = this._parseInputs(t2);
      this._nodes = [], this.input = new Array(e2);
      for (var n3 = 0; n3 < e2; n3++)
        this.input[n3] = this.context.createGain();
      var i3, r3 = this._parseTree(t2);
      try {
        i3 = this._eval(r3);
      } catch (e3) {
        throw this._disposeNodes(), new Error("Tone.Expr: Could evaluate expression: " + t2);
      }
      this.output = i3;
    }, u.extend(u.Expr, u.SignalBase), u.Expr._Expressions = { value: { signal: { regexp: /^\d+\.\d+|^\d+/, method: function(t2) {
      return new u.Signal(r2(t2));
    } }, input: { regexp: /^\$\d/, method: function(t2, e2) {
      return e2.input[r2(t2.substr(1))];
    } } }, glue: { "(": { regexp: /^\(/ }, ")": { regexp: /^\)/ }, ",": { regexp: /^,/ } }, func: { abs: { regexp: /^abs/, method: i2.bind(this, u.Abs) }, mod: { regexp: /^mod/, method: function(t2, e2) {
      var n3 = o(t2[1]), i3 = new u.Modulo(n3);
      return e2._eval(t2[0]).connect(i3), i3;
    } }, pow: { regexp: /^pow/, method: function(t2, e2) {
      var n3 = o(t2[1]), i3 = new u.Pow(n3);
      return e2._eval(t2[0]).connect(i3), i3;
    } }, a2g: { regexp: /^a2g/, method: function(t2, e2) {
      var n3 = new u.AudioToGain();
      return e2._eval(t2[0]).connect(n3), n3;
    } } }, binary: { "+": { regexp: /^\+/, precedence: 1, method: n2.bind(this, u.Add) }, "-": { regexp: /^\-/, precedence: 1, method: function(t2, e2) {
      return 1 === t2.length ? i2(u.Negate, t2, e2) : n2(u.Subtract, t2, e2);
    } }, "*": { regexp: /^\*/, precedence: 0, method: n2.bind(this, u.Multiply) } }, unary: { "-": { regexp: /^\-/, method: i2.bind(this, u.Negate) }, "!": { regexp: /^\!/, method: i2.bind(this, u.NOT) } } }, u.Expr.prototype._parseInputs = function(t2) {
      var e2 = t2.match(/\$\d/g), n3 = 0;
      if (null !== e2)
        for (var i3 = 0; i3 < e2.length; i3++) {
          var r3 = parseInt(e2[i3].substr(1)) + 1;
          n3 = Math.max(n3, r3);
        }
      return n3;
    }, u.Expr.prototype._replacements = function(t2) {
      for (var e2 = t2.shift(), n3 = 0; n3 < t2.length; n3++)
        e2 = e2.replace(/\%/i, t2[n3]);
      return e2;
    }, u.Expr.prototype._tokenize = function(t2) {
      for (var e2 = -1, n3 = []; 0 < t2.length; ) {
        var i3 = r3(t2 = t2.trim());
        n3.push(i3), t2 = t2.substr(i3.value.length);
      }
      function r3(t3) {
        for (var e3 in u.Expr._Expressions) {
          var n4 = u.Expr._Expressions[e3];
          for (var i4 in n4) {
            var r4 = n4[i4], o2 = r4.regexp, s = t3.match(o2);
            if (null !== s)
              return { type: e3, value: s[0], method: r4.method };
          }
        }
        throw new SyntaxError("Tone.Expr: Unexpected token " + t3);
      }
      return { next: function() {
        return n3[++e2];
      }, peek: function() {
        return n3[e2 + 1];
      } };
    }, u.Expr.prototype._parseTree = function(t2) {
      var i3 = this._tokenize(t2), s = this.isUndef.bind(this);
      function r3(t3, e2) {
        return !s(t3) && "glue" === t3.type && t3.value === e2;
      }
      function o2(t3, e2, n3) {
        var i4 = u.Expr._Expressions[e2];
        if (!s(t3))
          for (var r4 in i4) {
            var o3 = i4[r4];
            if (o3.regexp.test(t3.value)) {
              if (s(n3))
                return true;
              if (o3.precedence === n3)
                return true;
            }
          }
        return false;
      }
      function a(t3) {
        var e2;
        s(t3) && (t3 = 5), e2 = t3 < 0 ? function t4() {
          var e3, n4;
          return o2(e3 = i3.peek(), "unary") ? (e3 = i3.next(), n4 = t4(), { operator: e3.value, method: e3.method, args: [n4] }) : function() {
            var t5, e4;
            if (t5 = i3.peek(), s(t5))
              throw new SyntaxError("Tone.Expr: Unexpected termination of expression");
            if ("func" === t5.type)
              return function(t6) {
                var e5 = [];
                if (!r3(i3.next(), "("))
                  throw new SyntaxError('Tone.Expr: Expected ( in a function call "' + t6.value + '"');
                if (r3(i3.peek(), ")") || (e5 = function() {
                  for (var t7, e6 = []; t7 = a(), !s(t7) && (e6.push(t7), r3(i3.peek(), ",")); )
                    i3.next();
                  return e6;
                }()), r3(i3.next(), ")"))
                  return { method: t6.method, args: e5, name };
                throw new SyntaxError('Tone.Expr: Expected ) in a function call "' + t6.value + '"');
              }(t5 = i3.next());
            if ("value" === t5.type)
              return { method: (t5 = i3.next()).method, args: t5.value };
            if (r3(t5, "(")) {
              if (i3.next(), e4 = a(), !r3(t5 = i3.next(), ")"))
                throw new SyntaxError("Expected )");
              return e4;
            }
            throw new SyntaxError("Tone.Expr: Parse error, cannot process token " + t5.value);
          }();
        }() : a(t3 - 1);
        for (var n3 = i3.peek(); o2(n3, "binary", t3); )
          e2 = { operator: (n3 = i3.next()).value, method: n3.method, args: [e2, a(t3 - 1)] }, n3 = i3.peek();
        return e2;
      }
      return a();
    }, u.Expr.prototype._eval = function(t2) {
      if (!this.isUndef(t2)) {
        var e2 = t2.method(t2.args, this);
        return this._nodes.push(e2), e2;
      }
    }, u.Expr.prototype._disposeNodes = function() {
      for (var t2 = 0; t2 < this._nodes.length; t2++) {
        var e2 = this._nodes[t2];
        this.isFunction(e2.dispose) ? e2.dispose() : this.isFunction(e2.disconnect) && e2.disconnect(), e2 = null, this._nodes[t2] = null;
      }
      this._nodes = null;
    }, u.Expr.prototype.dispose = function() {
      u.prototype.dispose.call(this), this._disposeNodes();
    }, u.Expr;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(21), n(13), n(2)], void 0 === (r = function(e2) {
    "use strict";
    return e2.GreaterThan = function(t2) {
      this.createInsOuts(2, 0), this._param = this.input[0] = new e2.Subtract(t2), this.input[1] = this._param.input[1], this._gtz = this.output = new e2.GreaterThanZero(), this._param.connect(this._gtz);
    }, e2.extend(e2.GreaterThan, e2.Signal), e2.GreaterThan.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._param.dispose(), this._param = null, this._gtz.dispose(), this._gtz = null, this;
    }, e2.GreaterThan;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6), n(15)], void 0 === (r = function(t2) {
    "use strict";
    return t2.Abs = function() {
      this._abs = this.input = this.output = new t2.WaveShaper(function(t3) {
        return 0 === t3 ? 0 : Math.abs(t3);
      }, 127);
    }, t2.extend(t2.Abs, t2.SignalBase), t2.Abs.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._abs.dispose(), this._abs = null, this;
    }, t2.Abs;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6), n(1), n(13)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Modulo = function(t2) {
      this.createInsOuts(1, 0), this._shaper = new e2.WaveShaper(Math.pow(2, 16)), this._multiply = new e2.Multiply(), this._subtract = this.output = new e2.Subtract(), this._modSignal = new e2.Signal(t2), this.input.fan(this._shaper, this._subtract), this._modSignal.connect(this._multiply, 0, 0), this._shaper.connect(this._multiply, 0, 1), this._multiply.connect(this._subtract, 0, 1), this._setWaveShaper(t2);
    }, e2.extend(e2.Modulo, e2.SignalBase), e2.Modulo.prototype._setWaveShaper = function(e3) {
      this._shaper.setMap(function(t2) {
        return Math.floor((t2 + 1e-4) / e3);
      });
    }, Object.defineProperty(e2.Modulo.prototype, "value", { get: function() {
      return this._modSignal.value;
    }, set: function(t2) {
      this._modSignal.value = t2, this._setWaveShaper(t2);
    } }), e2.Modulo.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._shaper.dispose(), this._shaper = null, this._multiply.dispose(), this._multiply = null, this._subtract.dispose(), this._subtract = null, this._modSignal.dispose(), this._modSignal = null, this;
    }, e2.Modulo;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6)], void 0 === (r = function(e2) {
    "use strict";
    return e2.Pow = function(t2) {
      this._exp = this.defaultArg(t2, 1), this._expScaler = this.input = this.output = new e2.WaveShaper(this._expFunc(this._exp), 8192);
    }, e2.extend(e2.Pow, e2.SignalBase), Object.defineProperty(e2.Pow.prototype, "value", { get: function() {
      return this._exp;
    }, set: function(t2) {
      this._exp = t2, this._expScaler.setMap(this._expFunc(this._exp));
    } }), e2.Pow.prototype._expFunc = function(e3) {
      return function(t2) {
        return Math.pow(Math.abs(t2), e3);
      };
    }, e2.Pow.prototype.dispose = function() {
      return e2.prototype.dispose.call(this), this._expScaler.dispose(), this._expScaler = null, this;
    }, e2.Pow;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6), n(2)], void 0 === (r = function(t2) {
    "use strict";
    return t2.AudioToGain = function() {
      this._norm = this.input = this.output = new t2.WaveShaper(function(t3) {
        return (t3 + 1) / 2;
      });
    }, t2.extend(t2.AudioToGain, t2.SignalBase), t2.AudioToGain.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._norm.dispose(), this._norm = null, this;
    }, t2.AudioToGain;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(6)], void 0 === (r = function(t2) {
    "use strict";
    return t2.EqualPowerGain = function() {
      this._eqPower = this.input = this.output = new t2.WaveShaper(function(t3) {
        return Math.abs(t3) < 1e-3 ? 0 : this.equalPowerScale(t3);
      }.bind(this), 4096);
    }, t2.extend(t2.EqualPowerGain, t2.SignalBase), t2.EqualPowerGain.prototype.dispose = function() {
      return t2.prototype.dispose.call(this), this._eqPower.dispose(), this._eqPower = null, this;
    }, t2.EqualPowerGain;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  var i, r;
  i = [n(0), n(19), n(9)], void 0 === (r = function(e2) {
    "use strict";
    return e2.TimelineState = function(t2) {
      e2.Timeline.call(this), this._initial = t2;
    }, e2.extend(e2.TimelineState, e2.Timeline), e2.TimelineState.prototype.getValueAtTime = function(t2) {
      var e3 = this.get(t2);
      return null !== e3 ? e3.state : this._initial;
    }, e2.TimelineState.prototype.setStateAtTime = function(t2, e3) {
      this.add({ state: t2, time: e3 });
    }, e2.TimelineState;
  }.apply(e, i)) || (t.exports = r);
}, function(t, e, n) {
  "use strict";
  n.r(e);
  n(24), n(25);
  var c = n(3);
  var o = new function t2() {
    !function(t3, e2) {
      if (!(t3 instanceof e2))
        throw new TypeError("Cannot call a class as a function");
    }(this, t2), this.input = c.a.createGain(), this.output = c.a.createGain(), this.limiter = c.a.createDynamicsCompressor(), this.limiter.threshold.value = -3, this.limiter.ratio.value = 20, this.limiter.knee.value = 1, this.audiocontext = c.a, this.output.disconnect(), this.input.connect(this.limiter), this.limiter.connect(this.output), this.meter = c.a.createGain(), this.fftMeter = c.a.createGain(), this.output.connect(this.meter), this.output.connect(this.fftMeter), this.output.connect(this.audiocontext.destination), this.soundArray = [], this.parts = [], this.extensions = [];
  }();
  p5.prototype.getOutputVolume = function() {
    return o.output.gain.value;
  }, p5.prototype.outputVolume = function(t2) {
    var e2 = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, n2 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;
    if ("number" == typeof t2) {
      var i2 = o.audiocontext.currentTime, r2 = o.output.gain.value;
      o.output.gain.cancelScheduledValues(i2 + n2), o.output.gain.linearRampToValueAtTime(r2, i2 + n2), o.output.gain.linearRampToValueAtTime(t2, i2 + n2 + e2);
    } else {
      if (!t2)
        return o.output.gain;
      t2.connect(o.output.gain);
    }
  }, p5.prototype.soundOut = p5.soundOut = o, p5.soundOut._silentNode = o.audiocontext.createGain(), p5.soundOut._silentNode.gain.value = 0, p5.soundOut._silentNode.connect(o.audiocontext.destination);
  var p = o, i = n(5), s = n.n(i);
  function f(t2) {
    return (f = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function l(t2) {
    var e2 = Math.log(t2 / 440) / Math.log(2);
    return Math.round(12 * e2) + 69;
  }
  function r(t2) {
    return 440 * Math.pow(2, (t2 - 69) / 12);
  }
  function h(t2) {
    if ("string" != typeof t2)
      return t2;
    var e2 = { A: 21, B: 23, C: 24, D: 26, E: 28, F: 29, G: 31 }[t2[0].toUpperCase()];
    switch (e2 += 12 * (~~t2.slice(-1) - 1), t2[1]) {
      case "#":
        e2 += 1;
        break;
      case "b":
        e2 -= 1;
    }
    return r(e2);
  }
  function a(t2) {
    var e2, n2 = u(e2 = t2.getChannelData(0), 1 < t2.numberOfChannels ? t2.getChannelData(1) : e2), i2 = new window.ArrayBuffer(44 + 2 * n2.length), r2 = new window.DataView(i2);
    d(r2, 0, "RIFF"), r2.setUint32(4, 36 + 2 * n2.length, true), d(r2, 8, "WAVE"), d(r2, 12, "fmt "), r2.setUint32(16, 16, true), r2.setUint16(20, 1, true), r2.setUint16(22, 2, true), r2.setUint32(24, p.audiocontext.sampleRate, true), r2.setUint32(28, 4 * p.audiocontext.sampleRate, true), r2.setUint16(32, 4, true), r2.setUint16(34, 16, true), d(r2, 36, "data"), r2.setUint32(40, 2 * n2.length, true);
    for (var o2 = n2.length, s2 = 44, a2 = 0; a2 < o2; a2++)
      r2.setInt16(s2, 32767 * n2[a2], true), s2 += 2;
    return r2;
  }
  function u(t2, e2) {
    for (var n2 = t2.length + e2.length, i2 = new Float32Array(n2), r2 = 0, o2 = 0; o2 < n2; )
      i2[o2++] = t2[r2], i2[o2++] = e2[r2], r2++;
    return i2;
  }
  function d(t2, e2, n2) {
    for (var i2 = n2.length, r2 = 0; r2 < i2; r2++)
      t2.setUint8(e2 + r2, n2.charCodeAt(r2));
  }
  function y(t2) {
    var e2 = t2, n2 = new AudioWorkletNode(p.audiocontext, s.a.soundFileProcessor);
    return n2 instanceof ScriptProcessorNode && (e2 = n2.bufferSize), n2.disconnect(), n2 = null, e2;
  }
  var m = function(t2, e2, n2) {
    var i2, r2, o2 = new Error();
    return o2.name = t2, o2.originalStack = o2.stack + e2, i2 = o2.stack + e2, o2.failedPath = n2, r2 = i2.split("\n").filter(function(t3) {
      return !t3.match(/(p5.|native code|globalInit)/g);
    }), o2.stack = r2.join("\n"), o2;
  }, v = [n(27).default, n(28).default, n(29).default], _ = p.audiocontext, g = false;
  function b(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function T(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function w(t2, e2, n2) {
    return e2 && T(t2.prototype, e2), n2 && T(t2, n2), t2;
  }
  p5.prototype.registerMethod("init", function() {
    if (!g) {
      this.preload || window.preload || (this.preload = function() {
      }), this._incrementPreload();
      var t2 = function() {
        g = true, this._decrementPreload();
      }.bind(this);
      Promise.all(v.map(function(t3) {
        var e2 = new Blob([t3], { type: "application/javascript" }), n2 = URL.createObjectURL(e2);
        return _.audioWorklet.addModule(n2);
      })).then(t2);
    }
  });
  var x, S = p.audiocontext;
  void 0 !== S.createStereoPanner ? x = function() {
    function n2(t2, e2) {
      b(this, n2), this.stereoPanner = this.input = S.createStereoPanner(), t2.connect(this.stereoPanner), this.stereoPanner.connect(e2);
    }
    return w(n2, [{ key: "pan", value: function(t2, e2) {
      var n3 = e2 || 0, i2 = S.currentTime + n3;
      this.stereoPanner.pan.linearRampToValueAtTime(t2, i2);
    } }, { key: "inputChannels", value: function() {
    } }, { key: "connect", value: function(t2) {
      this.stereoPanner.connect(t2);
    } }, { key: "disconnect", value: function() {
      this.stereoPanner && this.stereoPanner.disconnect();
    } }]), n2;
  }() : x = function() {
    function i2(t2, e2, n2) {
      b(this, i2), this.input = S.createGain(), t2.connect(this.input), this.left = S.createGain(), this.right = S.createGain(), this.left.channelInterpretation = "discrete", this.right.channelInterpretation = "discrete", 1 < n2 ? (this.splitter = S.createChannelSplitter(2), this.input.connect(this.splitter), this.splitter.connect(this.left, 1), this.splitter.connect(this.right, 0)) : (this.input.connect(this.left), this.input.connect(this.right)), this.output = S.createChannelMerger(2), this.left.connect(this.output, 0, 1), this.right.connect(this.output, 0, 0), this.output.connect(e2);
    }
    return w(i2, [{ key: "pan", value: function(t2, e2) {
      var n2 = e2 || 0, i3 = S.currentTime + n2, r2 = (t2 + 1) / 2, o2 = Math.cos(r2 * Math.PI / 2), s2 = Math.sin(r2 * Math.PI / 2);
      this.left.gain.linearRampToValueAtTime(s2, i3), this.right.gain.linearRampToValueAtTime(o2, i3);
    } }, { key: "inputChannels", value: function(t2) {
      1 === t2 ? (this.input.disconnect(), this.input.connect(this.left), this.input.connect(this.right)) : 2 === t2 && (void 0 === this.splitter && (this.splitter = S.createChannelSplitter(2)), this.input.disconnect(), this.input.connect(this.splitter), this.splitter.connect(this.left, 1), this.splitter.connect(this.right, 0));
    } }, { key: "connect", value: function(t2) {
      this.output.connect(t2);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }]), i2;
  }();
  var k = x;
  function P(t2) {
    return (P = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function A(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function O(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function C(t2, e2, n2, i2) {
    O(this, C), this.callback = t2, this.time = e2, this.id = n2, this.val = i2;
  }
  var R = p.audiocontext;
  var q = function() {
    function o2(t2, e2, n2, i2) {
      if (O(this, o2), void 0 !== t2) {
        if ("string" == typeof t2 || "string" == typeof t2[0]) {
          var r2 = p5.prototype._checkFileFormats(t2);
          this.url = r2;
        } else if ("object" === P(t2) && !(window.File && window.FileReader && window.FileList && window.Blob))
          throw "Unable to load file because the File API is not supported";
        t2.file && (t2 = t2.file), this.file = t2;
      }
      this._onended = function() {
      }, this._looping = false, this._playing = false, this._paused = false, this._pauseTime = 0, this._cues = [], this._cueIDCounter = 0, this._lastPos = 0, this._counterNode = null, this._workletNode = null, this.bufferSourceNodes = [], this.bufferSourceNode = null, this.buffer = null, this.playbackRate = 1, this.input = p.audiocontext.createGain(), this.output = p.audiocontext.createGain(), this.reversed = false, this.startTime = 0, this.endTime = null, this.pauseTime = 0, this.mode = "sustain", this.startMillis = null, this.panPosition = 0, this.panner = new k(this.output, p.input, 2), (this.url || this.file) && this.load(e2, n2), p.soundArray.push(this), this._whileLoading = "function" == typeof i2 ? i2 : function() {
      }, this._clearOnEnd = function(t3) {
        var e3 = t3.target, n3 = this;
        e3._playing = false, e3.removeEventListener("ended", n3._clearOnEnd), n3._onended(n3), n3.bufferSourceNodes.map(function(t4, e4) {
          return e4;
        }).reverse().forEach(function(t4) {
          false === n3.bufferSourceNodes[t4]._playing && n3.bufferSourceNodes.splice(t4, 1);
        }), 0 === n3.bufferSourceNodes.length && (n3._playing = false);
      }.bind(this), this.amp = this.setVolume, this.fade = this.setVolume;
    }
    return function(t2, e2, n2) {
      e2 && A(t2.prototype, e2), n2 && A(t2, n2);
    }(o2, [{ key: "load", value: function(n2, i2) {
      var r2 = this, o3 = new Error().stack;
      if (void 0 !== this.url && "" !== this.url) {
        var s2 = new XMLHttpRequest();
        s2.addEventListener("progress", function(t3) {
          r2._updateProgress(t3);
        }, false), s2.open("GET", this.url, true), s2.responseType = "arraybuffer", s2.onload = function() {
          if (200 === s2.status) {
            if (!r2.panner)
              return;
            R.decodeAudioData(s2.response, function(t4) {
              r2.panner && (r2.buffer = t4, r2.panner.inputChannels(t4.numberOfChannels), n2 && n2(r2));
            }, function() {
              if (r2.panner) {
                var t4 = new m("decodeAudioData", o3, r2.url), e3 = "AudioContext error at decodeAudioData for " + r2.url;
                i2 && (t4.msg = e3, i2(t4));
              }
            });
          } else {
            if (!r2.panner)
              return;
            var t3 = new m("loadSound", o3, r2.url), e2 = "Unable to load " + r2.url + ". The request status was: " + s2.status + " (" + s2.statusText + ")";
            i2 && (t3.message = e2, i2(t3));
          }
        }, s2.onerror = function() {
          var t3 = new m("loadSound", o3, r2.url), e2 = "There was no response from the server at " + r2.url + ". Check the url and internet connectivity.";
          i2 && (t3.message = e2, i2(t3));
        }, s2.send();
      } else if (void 0 !== this.file) {
        var t2 = new FileReader();
        t2.onload = function() {
          r2.panner && R.decodeAudioData(t2.result, function(t3) {
            r2.panner && (r2.buffer = t3, r2.panner.inputChannels(t3.numberOfChannels), n2 && n2(r2));
          });
        }, t2.onerror = function(t3) {
          r2.panner && onerror && onerror(t3);
        }, t2.readAsArrayBuffer(this.file);
      }
    } }, { key: "_updateProgress", value: function(t2) {
      if (t2.lengthComputable) {
        var e2 = t2.loaded / t2.total * 0.99;
        this._whileLoading(e2, t2);
      } else
        this._whileLoading("size unknown");
    } }, { key: "isLoaded", value: function() {
      return !!this.buffer;
    } }, { key: "play", value: function(t2, e2, n2, i2, r2) {
      if (this.output) {
        var o3, s2, a2 = t2 || 0;
        if (a2 < 0 && (a2 = 0), a2 += p.audiocontext.currentTime, void 0 !== e2 && this.rate(e2), void 0 !== n2 && this.setVolume(n2), !this.buffer)
          throw "not ready to play file, buffer has yet to load. Try preload()";
        if (this._pauseTime = 0, "restart" === this.mode && this.buffer && this.bufferSourceNode && (this.bufferSourceNode.stop(a2), this._counterNode.stop(a2)), "untildone" !== this.mode || !this.isPlaying()) {
          if (this.bufferSourceNode = this._initSourceNode(), delete this._counterNode, this._counterNode = this._initCounterNode(), i2) {
            if (!(0 <= i2 && i2 < this.buffer.duration))
              throw "start time out of range";
            o3 = i2;
          } else
            o3 = 0;
          r2 = r2 && (r2 <= this.buffer.duration - o3 ? r2 : this.buffer.duration), this._paused ? (this.bufferSourceNode.start(a2, this.pauseTime, r2), this._counterNode.start(a2, this.pauseTime, r2)) : (this.bufferSourceNode.start(a2, o3, r2), this._counterNode.start(a2, o3, r2)), this._playing = true, this._paused = false, this.bufferSourceNodes.push(this.bufferSourceNode), this.bufferSourceNode._arrayIndex = this.bufferSourceNodes.length - 1, this.bufferSourceNode.addEventListener("ended", this._clearOnEnd), this.bufferSourceNode.loop = this._looping, this._counterNode.loop = this._looping, true === this._looping && (s2 = r2 || o3 - 1e-15, this.bufferSourceNode.loopStart = o3, this.bufferSourceNode.loopEnd = s2, this._counterNode.loopStart = o3, this._counterNode.loopEnd = s2);
        }
      }
    } }, { key: "playMode", value: function(t2) {
      var e2 = t2.toLowerCase();
      if ("restart" === e2 && this.buffer && this.bufferSourceNode)
        for (var n2 = 0; n2 < this.bufferSourceNodes.length - 1; n2++) {
          var i2 = p.audiocontext.currentTime;
          this.bufferSourceNodes[n2].stop(i2);
        }
      if ("restart" !== e2 && "sustain" !== e2 && "untildone" !== e2)
        throw 'Invalid play mode. Must be either "restart" or "sustain"';
      this.mode = e2;
    } }, { key: "pause", value: function(t2) {
      var e2 = (t2 || 0) + p.audiocontext.currentTime;
      this.isPlaying() && this.buffer && this.bufferSourceNode ? (this._paused = true, this._playing = false, this.pauseTime = this.currentTime(), this.bufferSourceNode.stop(e2), this._counterNode.stop(e2), this._pauseTime = this.currentTime()) : this._pauseTime = 0;
    } }, { key: "loop", value: function(t2, e2, n2, i2, r2) {
      this._looping = true, this.play(t2, e2, n2, i2, r2);
    } }, { key: "setLoop", value: function(t2) {
      if (true === t2)
        this._looping = true;
      else {
        if (false !== t2)
          throw "Error: setLoop accepts either true or false";
        this._looping = false;
      }
      this.bufferSourceNode && (this.bufferSourceNode.loop = this._looping, this._counterNode.loop = this._looping);
    } }, { key: "isLooping", value: function() {
      return !!this.bufferSourceNode && (true === this._looping && true === this.isPlaying());
    } }, { key: "isPlaying", value: function() {
      return this._playing;
    } }, { key: "isPaused", value: function() {
      return this._paused;
    } }, { key: "stop", value: function(t2) {
      var e2 = t2 || 0;
      if ("sustain" === this.mode || "untildone" === this.mode)
        this.stopAll(e2), this._playing = false, this.pauseTime = 0, this._paused = false;
      else if (this.buffer && this.bufferSourceNode) {
        var n2 = p.audiocontext.currentTime, i2 = e2 || 0;
        this.pauseTime = 0, this.bufferSourceNode.stop(n2 + i2), this._counterNode.stop(n2 + i2), this._playing = false, this._paused = false;
      }
    } }, { key: "stopAll", value: function(t2) {
      var e2 = p.audiocontext.currentTime, n2 = t2 || 0;
      if (this.buffer && this.bufferSourceNode) {
        for (var i2 in this.bufferSourceNodes) {
          var r2 = this.bufferSourceNodes[i2];
          if (r2)
            try {
              r2.stop(e2 + n2);
            } catch (t3) {
            }
        }
        this._counterNode.stop(e2 + n2);
      }
    } }, { key: "getVolume", value: function() {
      return this.output.gain.value;
    } }, { key: "pan", value: function(t2, e2) {
      this.panPosition = t2, this.panner.pan(t2, e2);
    } }, { key: "getPan", value: function() {
      return this.panPosition;
    } }, { key: "rate", value: function(t2) {
      var e2 = false;
      if (void 0 === t2)
        return this.playbackRate;
      if (0 === (this.playbackRate = t2) ? t2 = 1e-13 : t2 < 0 && !this.reversed ? (t2 = Math.abs(t2), e2 = true) : 0 < t2 && this.reversed && (e2 = true), this.bufferSourceNode) {
        var n2 = p.audiocontext.currentTime;
        this.bufferSourceNode.playbackRate.cancelScheduledValues(n2), this.bufferSourceNode.playbackRate.linearRampToValueAtTime(Math.abs(t2), n2), this._counterNode.playbackRate.cancelScheduledValues(n2), this._counterNode.playbackRate.linearRampToValueAtTime(Math.abs(t2), n2);
      }
      return e2 && this.reverseBuffer(), this.playbackRate;
    } }, { key: "setPitch", value: function(t2) {
      var e2 = r(t2) / r(60);
      this.rate(e2);
    } }, { key: "getPlaybackRate", value: function() {
      return this.playbackRate;
    } }, { key: "setVolume", value: function(t2, e2, n2) {
      if ("number" == typeof t2) {
        var i2 = e2 || 0, r2 = n2 || 0, o3 = p.audiocontext.currentTime, s2 = this.output.gain.value;
        this.output.gain.cancelScheduledValues(o3 + r2), this.output.gain.linearRampToValueAtTime(s2, o3 + r2), this.output.gain.linearRampToValueAtTime(t2, o3 + r2 + i2);
      } else {
        if (!t2)
          return this.output.gain;
        t2.connect(this.output.gain);
      }
    } }, { key: "duration", value: function() {
      return this.buffer ? this.buffer.duration : 0;
    } }, { key: "currentTime", value: function() {
      return this.reversed ? Math.abs(this._lastPos - this.buffer.length) / R.sampleRate : this._lastPos / R.sampleRate;
    } }, { key: "jump", value: function(t2, e2) {
      if (t2 < 0 || t2 > this.buffer.duration)
        throw "jump time out of range";
      if (e2 > this.buffer.duration - t2)
        throw "end time out of range";
      var n2 = t2 || 0, i2 = e2 || void 0;
      this.isPlaying() && (this.stop(0), this.play(0, this.playbackRate, this.output.gain.value, n2, i2));
    } }, { key: "channels", value: function() {
      return this.buffer.numberOfChannels;
    } }, { key: "sampleRate", value: function() {
      return this.buffer.sampleRate;
    } }, { key: "frames", value: function() {
      return this.buffer.length;
    } }, { key: "getPeaks", value: function(t2) {
      if (!this.buffer)
        throw "Cannot load peaks yet, buffer is not loaded";
      if (t2 = t2 || 5 * window.width, this.buffer) {
        for (var e2 = this.buffer, n2 = e2.length / t2, i2 = ~~(n2 / 10) || 1, r2 = e2.numberOfChannels, o3 = new Float32Array(Math.round(t2)), s2 = 0; s2 < r2; s2++)
          for (var a2 = e2.getChannelData(s2), u2 = 0; u2 < t2; u2++) {
            for (var c2 = ~~(u2 * n2), l2 = ~~(c2 + n2), h2 = 0, p2 = c2; p2 < l2; p2 += i2) {
              var f2 = a2[p2];
              h2 < f2 ? h2 = f2 : h2 < -f2 && (h2 = f2);
            }
            (0 === s2 || Math.abs(h2) > o3[u2]) && (o3[u2] = h2);
          }
        return o3;
      }
    } }, { key: "reverseBuffer", value: function() {
      if (!this.buffer)
        throw "SoundFile is not done loading";
      var t2 = this._lastPos / R.sampleRate, e2 = this.getVolume();
      this.setVolume(0, 1e-3);
      for (var n2 = this.buffer.numberOfChannels, i2 = 0; i2 < n2; i2++)
        this.buffer.getChannelData(i2).reverse();
      this.reversed = !this.reversed, this.isPlaying() && t2 && this.jump(this.duration() - t2), this.setVolume(e2, 1e-3);
    } }, { key: "onended", value: function(t2) {
      return this._onended = t2, this;
    } }, { key: "add", value: function() {
    } }, { key: "dispose", value: function() {
      var t2 = p.audiocontext.currentTime, e2 = p.soundArray.indexOf(this);
      if (p.soundArray.splice(e2, 1), this.stop(t2), this.buffer && this.bufferSourceNode) {
        for (var n2 = 0; n2 < this.bufferSourceNodes.length - 1; n2++)
          if (null !== this.bufferSourceNodes[n2]) {
            this.bufferSourceNodes[n2].disconnect();
            try {
              this.bufferSourceNodes[n2].stop(t2);
            } catch (t3) {
            }
            this.bufferSourceNodes[n2] = null;
          }
        if (this.isPlaying()) {
          try {
            this._counterNode.stop(t2);
          } catch (t3) {
          }
          this._counterNode = null;
        }
      }
      this.output && (this.output.disconnect(), this.output = null), this.panner && (this.panner.disconnect(), this.panner = null);
    } }, { key: "connect", value: function(t2) {
      t2 ? t2.hasOwnProperty("input") ? this.panner.connect(t2.input) : this.panner.connect(t2) : this.panner.connect(p.input);
    } }, { key: "disconnect", value: function() {
      this.panner && this.panner.disconnect();
    } }, { key: "getLevel", value: function() {
    } }, { key: "setPath", value: function(t2, e2) {
      var n2 = p5.prototype._checkFileFormats(t2);
      this.url = n2, this.load(e2);
    } }, { key: "setBuffer", value: function(t2) {
      var e2 = t2.length, n2 = t2[0].length, i2 = R.createBuffer(e2, n2, R.sampleRate);
      t2[0] instanceof Float32Array || (t2[0] = new Float32Array(t2[0]));
      for (var r2 = 0; r2 < e2; r2++) {
        i2.getChannelData(r2).set(t2[r2]);
      }
      this.buffer = i2, this.panner.inputChannels(e2);
    } }, { key: "_initCounterNode", value: function() {
      var e2 = this, n2 = this, t2 = R.currentTime, i2 = R.createBufferSource(), r2 = y(256);
      return n2._workletNode && (n2._workletNode.disconnect(), delete n2._workletNode), n2._workletNode = new AudioWorkletNode(R, s.a.soundFileProcessor, { processorOptions: { bufferSize: r2 } }), n2._workletNode.port.onmessage = function(t3) {
        if ("position" === t3.data.name) {
          if (0 === t3.data.position)
            return;
          e2._lastPos = t3.data.position, e2._onTimeUpdate(n2._lastPos);
        }
      }, i2.buffer = function(t3) {
        for (var e3 = t3.length, n3 = R.createBuffer(1, t3.length, R.sampleRate), i3 = n3.getChannelData(0), r3 = 0; r3 < e3; r3++)
          i3[r3] = r3;
        return n3;
      }(n2.buffer), i2.playbackRate.setValueAtTime(n2.playbackRate, t2), i2.connect(n2._workletNode), n2._workletNode.connect(p5.soundOut._silentNode), i2;
    } }, { key: "_initSourceNode", value: function() {
      var t2 = R.createBufferSource();
      return t2.buffer = this.buffer, t2.playbackRate.value = this.playbackRate, t2.connect(this.output), t2;
    } }, { key: "processPeaks", value: function(t2, e2, n2, i2) {
    } }, { key: "addCue", value: function(t2, e2, n2) {
      var i2 = this._cueIDCounter++, r2 = new C(e2, t2, i2, n2);
      return this._cues.push(r2), i2;
    } }, { key: "removeCue", value: function(t2) {
      for (var e2 = this._cues.length, n2 = 0; n2 < e2; n2++) {
        if (this._cues[n2].id === t2) {
          this._cues.splice(n2, 1);
          break;
        }
      }
      this._cues.length;
    } }, { key: "clearCues", value: function() {
      this._cues = [];
    } }, { key: "_onTimeUpdate", value: function(t2) {
      for (var e2 = t2 / this.buffer.sampleRate, n2 = this._cues.length, i2 = 0; i2 < n2; i2++) {
        var r2 = this._cues[i2], o3 = r2.time, s2 = r2.val;
        (this._prevUpdateTime || 0) <= o3 && o3 <= e2 && r2.callback(s2);
      }
      this._prevUpdateTime = e2;
    } }, { key: "save", value: function(t2) {
      p5.prototype.saveSound(this, t2, "wav");
    } }, { key: "getBlob", value: function() {
      var t2 = a(this.buffer);
      return new Blob([t2], { type: "audio/wav" });
    } }]), o2;
  }();
  var E = q;
  function N(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var B = function() {
    function e2(t2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), this.bufferSize = y(2048), this.audiocontext = p.audiocontext, this._workletNode = new AudioWorkletNode(this.audiocontext, s.a.amplitudeProcessor, { outputChannelCount: [1], parameterData: { smoothing: t2 || 0 }, processorOptions: { normalize: false, smoothing: t2 || 0, numInputChannels: 2, bufferSize: this.bufferSize } }), this._workletNode.port.onmessage = function(t3) {
        "amplitude" === t3.data.name && (this.volume = t3.data.volume, this.volNorm = t3.data.volNorm, this.stereoVol = t3.data.stereoVol, this.stereoVolNorm = t3.data.stereoVolNorm);
      }.bind(this), this.input = this._workletNode, this.output = this.audiocontext.createGain(), this.volume = 0, this.volNorm = 0, this.stereoVol = [0, 0], this.stereoVolNorm = [0, 0], this.normalize = false, this._workletNode.connect(this.output), this.output.gain.value = 0, this.output.connect(this.audiocontext.destination), p.meter.connect(this._workletNode), p.soundArray.push(this);
    }
    return function(t2, e3, n2) {
      e3 && N(t2.prototype, e3), n2 && N(t2, n2);
    }(e2, [{ key: "setInput", value: function(t2, e3) {
      p.meter.disconnect(), e3 && (this._workletNode.parameters.get("smoothing").value = e3), null == t2 ? p.meter.connect(this._workletNode) : t2 ? (t2.connect(this._workletNode), this._workletNode.disconnect(), this._workletNode.connect(this.output)) : p.meter.connect(this._workletNode);
    } }, { key: "connect", value: function(t2) {
      t2 ? t2.hasOwnProperty("input") ? this.output.connect(t2.input) : this.output.connect(t2) : this.output.connect(this.panner.connect(p.input));
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }, { key: "getLevel", value: function(t2) {
      return void 0 !== t2 ? this.normalize ? this.stereoVolNorm[t2] : this.stereoVol[t2] : this.normalize ? this.volNorm : this.volume;
    } }, { key: "toggleNormalize", value: function(t2) {
      this.normalize = "boolean" == typeof t2 ? t2 : !this.normalize, this._workletNode.port.postMessage({ name: "toggleNormalize", normalize: this.normalize });
    } }, { key: "smooth", value: function(t2) {
      0 <= t2 && t2 < 1 && this._workletNode.port.postMessage({ name: "smoothing", smoothing: t2 });
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      p.soundArray.splice(t2, 1), this.input && (this.input.disconnect(), delete this.input), this.output && (this.output.disconnect(), delete this.output), this._workletNode.disconnect(), delete this._workletNode;
    } }]), e2;
  }();
  function V(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var j = function() {
    function n2(t2, e2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, n2), this.input = this.analyser = p.audiocontext.createAnalyser(), Object.defineProperties(this, { bins: { get: function() {
        return this.analyser.fftSize / 2;
      }, set: function(t3) {
        this.analyser.fftSize = 2 * t3;
      }, configurable: true, enumerable: true }, smoothing: { get: function() {
        return this.analyser.smoothingTimeConstant;
      }, set: function(t3) {
        this.analyser.smoothingTimeConstant = t3;
      }, configurable: true, enumerable: true } }), this.smooth(t2), this.bins = e2 || 1024, p.fftMeter.connect(this.analyser), this.freqDomain = new Uint8Array(this.analyser.frequencyBinCount), this.timeDomain = new Uint8Array(this.analyser.frequencyBinCount), this.bass = [20, 140], this.lowMid = [140, 400], this.mid = [400, 2600], this.highMid = [2600, 5200], this.treble = [5200, 14e3], p.soundArray.push(this);
    }
    return function(t2, e2, n3) {
      e2 && V(t2.prototype, e2), n3 && V(t2, n3);
    }(n2, [{ key: "setInput", value: function(t2) {
      t2 ? (t2.output ? t2.output.connect(this.analyser) : t2.connect && t2.connect(this.analyser), p.fftMeter.disconnect()) : p.fftMeter.connect(this.analyser);
    } }, { key: "waveform", value: function() {
      for (var t2, e2, n3 = new Array(), i2 = 0; i2 < arguments.length; i2++)
        "number" == typeof arguments[i2] && (t2 = arguments[i2], this.analyser.fftSize = 2 * t2), "string" == typeof arguments[i2] && (e2 = arguments[i2]);
      if (e2 && !p5.prototype._isSafari())
        return function(t3) {
          t3.timeDomain instanceof Float32Array == false && (t3.timeDomain = new Float32Array(t3.analyser.frequencyBinCount));
        }(this, this.timeDomain), this.analyser.getFloatTimeDomainData(this.timeDomain), this.timeDomain;
      !function(t3) {
        t3.timeDomain instanceof Uint8Array == false && (t3.timeDomain = new Uint8Array(t3.analyser.frequencyBinCount));
      }(this, this.timeDomain), this.analyser.getByteTimeDomainData(this.timeDomain);
      for (var r2 = 0; r2 < this.timeDomain.length; r2++) {
        var o2 = p5.prototype.map(this.timeDomain[r2], 0, 255, -1, 1);
        n3.push(o2);
      }
      return n3;
    } }, { key: "analyze", value: function() {
      for (var t2, e2 = 0; e2 < arguments.length; e2++)
        "number" == typeof arguments[e2] && (this.bins = arguments[e2], this.analyser.fftSize = 2 * this.bins), "string" == typeof arguments[e2] && (t2 = arguments[e2]);
      return t2 && "db" === t2.toLowerCase() ? (function(t3) {
        t3.freqDomain instanceof Float32Array == false && (t3.freqDomain = new Float32Array(t3.analyser.frequencyBinCount));
      }(this), this.analyser.getFloatFrequencyData(this.freqDomain), this.freqDomain) : (function(t3) {
        t3.freqDomain instanceof Uint8Array == false && (t3.freqDomain = new Uint8Array(t3.analyser.frequencyBinCount));
      }(this, this.freqDomain), this.analyser.getByteFrequencyData(this.freqDomain), Array.apply([], this.freqDomain));
    } }, { key: "getEnergy", value: function(t2, e2) {
      var n3 = p.audiocontext.sampleRate / 2;
      if ("bass" === t2 ? (t2 = this.bass[0], e2 = this.bass[1]) : "lowMid" === t2 ? (t2 = this.lowMid[0], e2 = this.lowMid[1]) : "mid" === t2 ? (t2 = this.mid[0], e2 = this.mid[1]) : "highMid" === t2 ? (t2 = this.highMid[0], e2 = this.highMid[1]) : "treble" === t2 && (t2 = this.treble[0], e2 = this.treble[1]), "number" != typeof t2)
        throw "invalid input for getEnergy()";
      if (e2) {
        if (t2 && e2) {
          if (e2 < t2) {
            var i2 = e2;
            e2 = t2, t2 = i2;
          }
          for (var r2 = Math.round(t2 / n3 * this.freqDomain.length), o2 = Math.round(e2 / n3 * this.freqDomain.length), s2 = 0, a2 = 0, u2 = r2; u2 <= o2; u2++)
            s2 += this.freqDomain[u2], a2 += 1;
          return s2 / a2;
        }
        throw "invalid input for getEnergy()";
      }
      var c2 = Math.round(t2 / n3 * this.freqDomain.length);
      return this.freqDomain[c2];
    } }, { key: "getFreq", value: function(t2, e2) {
      return this.getEnergy(t2, e2);
    } }, { key: "getCentroid", value: function() {
      for (var t2 = p.audiocontext.sampleRate / 2, e2 = 0, n3 = 0, i2 = 0; i2 < this.freqDomain.length; i2++)
        e2 += i2 * this.freqDomain[i2], n3 += this.freqDomain[i2];
      var r2 = 0;
      return 0 !== n3 && (r2 = e2 / n3), r2 * (t2 / this.freqDomain.length);
    } }, { key: "smooth", value: function(t2) {
      return void 0 !== t2 && (this.smoothing = t2), this.smoothing;
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      p.soundArray.splice(t2, 1), this.analyser && (this.analyser.disconnect(), delete this.analyser);
    } }, { key: "linAverages", value: function(t2) {
      for (var e2 = t2 || 16, n3 = this.freqDomain, i2 = n3.length, r2 = Math.floor(i2 / e2), o2 = new Array(e2), s2 = 0, a2 = 0; a2 < i2; a2++)
        o2[s2] = void 0 !== o2[s2] ? (o2[s2] + n3[a2]) / 2 : n3[a2], a2 % r2 == r2 - 1 && s2++;
      return o2;
    } }, { key: "logAverages", value: function(t2) {
      for (var e2 = p.audiocontext.sampleRate / 2, n3 = this.freqDomain, i2 = n3.length, r2 = new Array(t2.length), o2 = 0, s2 = 0; s2 < i2; s2++) {
        Math.round(s2 * e2 / this.freqDomain.length) > t2[o2].hi && o2++, r2[o2] = void 0 !== r2[o2] ? (r2[o2] + n3[s2]) / 2 : n3[s2];
      }
      return r2;
    } }, { key: "getOctaveBands", value: function(t2, e2) {
      var n3 = t2 || 3, i2 = e2 || 15.625, r2 = [], o2 = { lo: i2 / Math.pow(2, 1 / (2 * n3)), ctr: i2, hi: i2 * Math.pow(2, 1 / (2 * n3)) };
      r2.push(o2);
      for (var s2 = p.audiocontext.sampleRate / 2; o2.hi < s2; ) {
        var a2 = {};
        a2.lo = o2.hi, a2.ctr = o2.ctr * Math.pow(2, 1 / n3), a2.hi = a2.ctr * Math.pow(2, 1 / (2 * n3)), r2.push(a2), o2 = a2;
      }
      return r2;
    } }]), n2;
  }(), M = n(4), F = n.n(M), D = n(1), I = n.n(D), U = n(8), G = n.n(U);
  function L(t2) {
    return (L = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function z(t2, e2) {
    return !e2 || "object" !== L(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function W(t2) {
    return (W = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function Z(t2, e2) {
    if ("function" != typeof e2 && null !== e2)
      throw new TypeError("Super expression must either be null or a function");
    t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && X(t2, e2);
  }
  function X(t2, e2) {
    return (X = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  function Y(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function H(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function $(t2, e2, n2, i2, r2) {
    var o2 = t2.oscillator;
    for (var s2 in t2.mathOps)
      t2.mathOps[s2] instanceof r2 && (o2.disconnect(), t2.mathOps[s2].dispose(), (n2 = s2) < t2.mathOps.length - 2 && (i2 = t2.mathOps[s2 + 1]));
    return n2 === t2.mathOps.length - 1 && t2.mathOps.push(i2), 0 < s2 && (o2 = t2.mathOps[s2 - 1]), o2.disconnect(), o2.connect(e2), e2.connect(i2), t2.mathOps[n2] = e2, t2;
  }
  var Q = function() {
    function r2(t2, e2) {
      if (Y(this, r2), "string" == typeof t2) {
        var n2 = e2;
        e2 = t2, t2 = n2;
      }
      if ("number" == typeof e2) {
        var i2 = e2;
        e2 = t2, t2 = i2;
      }
      this.started = false, this.phaseAmount = void 0, this.oscillator = p.audiocontext.createOscillator(), this.f = t2 || 440, this.oscillator.type = e2 || "sine", this.oscillator.frequency.setValueAtTime(this.f, p.audiocontext.currentTime), this.output = p.audiocontext.createGain(), this._freqMods = [], this.output.gain.value = 0.5, this.output.gain.setValueAtTime(0.5, p.audiocontext.currentTime), this.oscillator.connect(this.output), this.panPosition = 0, this.connection = p.input, this.panner = new k(this.output, this.connection, 1), this.mathOps = [this.output], p.soundArray.push(this), this.fade = this.amp;
    }
    return function(t2, e2, n2) {
      e2 && H(t2.prototype, e2), n2 && H(t2, n2);
    }(r2, [{ key: "start", value: function(t2, e2) {
      if (this.started) {
        var n2 = p.audiocontext.currentTime;
        this.stop(n2);
      }
      if (!this.started) {
        var i2 = e2 || this.f, r3 = this.oscillator.type;
        for (var o2 in this.oscillator && (this.oscillator.disconnect(), delete this.oscillator), this.oscillator = p.audiocontext.createOscillator(), this.oscillator.frequency.value = Math.abs(i2), this.oscillator.type = r3, this.oscillator.connect(this.output), t2 = t2 || 0, this.oscillator.start(t2 + p.audiocontext.currentTime), this.freqNode = this.oscillator.frequency, this._freqMods)
          void 0 !== this._freqMods[o2].connect && this._freqMods[o2].connect(this.oscillator.frequency);
        this.started = true;
      }
    } }, { key: "stop", value: function(t2) {
      if (this.started) {
        var e2 = t2 || 0, n2 = p.audiocontext.currentTime;
        this.oscillator.stop(e2 + n2), this.started = false;
      }
    } }, { key: "amp", value: function(t2, e2, n2) {
      var i2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, r3 = 2 < arguments.length && void 0 !== n2 ? n2 : 0;
      if ("number" == typeof t2) {
        var o2 = p.audiocontext.currentTime;
        this.output.gain.linearRampToValueAtTime(t2, o2 + r3 + i2);
      } else {
        if (!t2)
          return this.output.gain;
        t2.connect(this.output.gain);
      }
    } }, { key: "getAmp", value: function() {
      return this.output.gain.value;
    } }, { key: "freq", value: function(t2, e2, n2) {
      var i2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, r3 = 2 < arguments.length && void 0 !== n2 ? n2 : 0;
      if ("number" != typeof t2 || isNaN(t2)) {
        if (!t2)
          return this.oscillator.frequency;
        t2.output && (t2 = t2.output), t2.connect(this.oscillator.frequency), this._freqMods.push(t2);
      } else {
        this.f = t2;
        var o2 = p.audiocontext.currentTime;
        0 === i2 ? this.oscillator.frequency.setValueAtTime(t2, r3 + o2) : 0 < t2 ? this.oscillator.frequency.exponentialRampToValueAtTime(t2, r3 + i2 + o2) : this.oscillator.frequency.linearRampToValueAtTime(t2, r3 + i2 + o2), this.phaseAmount && this.phase(this.phaseAmount);
      }
    } }, { key: "getFreq", value: function() {
      return this.oscillator.frequency.value;
    } }, { key: "setType", value: function(t2) {
      this.oscillator.type = t2;
    } }, { key: "getType", value: function() {
      return this.oscillator.type;
    } }, { key: "connect", value: function(t2) {
      t2 ? t2.hasOwnProperty("input") ? (this.panner.connect(t2.input), this.connection = t2.input) : (this.panner.connect(t2), this.connection = t2) : this.panner.connect(p.input);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect(), this.panner && (this.panner.disconnect(), this.output && this.output.connect(this.panner)), this.oscMods = [];
    } }, { key: "pan", value: function(t2, e2) {
      this.panPosition = t2, this.panner.pan(t2, e2);
    } }, { key: "getPan", value: function() {
      return this.panPosition;
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      if (p.soundArray.splice(t2, 1), this.oscillator) {
        var e2 = p.audiocontext.currentTime;
        this.stop(e2), this.disconnect(), this.panner = null, this.oscillator = null;
      }
      this.osc2 && this.osc2.dispose();
    } }, { key: "phase", value: function(t2) {
      var e2 = p5.prototype.map(t2, 0, 1, 0, 1 / this.f), n2 = p.audiocontext.currentTime;
      this.phaseAmount = t2, this.dNode || (this.dNode = p.audiocontext.createDelay(), this.oscillator.disconnect(), this.oscillator.connect(this.dNode), this.dNode.connect(this.output)), this.dNode.delayTime.setValueAtTime(e2, n2);
    } }, { key: "add", value: function(t2) {
      var e2 = new F.a(t2);
      return $(this, e2, this.mathOps.length - 1, this.output, F.a);
    } }, { key: "mult", value: function(t2) {
      var e2 = new I.a(t2);
      return $(this, e2, this.mathOps.length - 1, this.output, I.a);
    } }, { key: "scale", value: function(t2, e2, n2, i2) {
      var r3, o2;
      o2 = 4 === arguments.length ? (r3 = p5.prototype.map(n2, t2, e2, 0, 1) - 0.5, p5.prototype.map(i2, t2, e2, 0, 1) - 0.5) : (r3 = t2, e2);
      var s2 = new G.a(r3, o2);
      return $(this, s2, this.mathOps.length - 1, this.output, G.a);
    } }]), r2;
  }(), J = function() {
    function e2(t2) {
      return Y(this, e2), z(this, W(e2).call(this, t2, "sine"));
    }
    return Z(e2, Q), e2;
  }(), K = function() {
    function e2(t2) {
      return Y(this, e2), z(this, W(e2).call(this, t2, "triangle"));
    }
    return Z(e2, Q), e2;
  }(), tt = function() {
    function e2(t2) {
      return Y(this, e2), z(this, W(e2).call(this, t2, "sawtooth"));
    }
    return Z(e2, Q), e2;
  }(), et = function() {
    function e2(t2) {
      return Y(this, e2), z(this, W(e2).call(this, t2, "square"));
    }
    return Z(e2, Q), e2;
  }(), nt = Q, it = n(7), rt = n.n(it);
  p5.Envelope = function(t2, e2, n2, i2, r2, o2) {
    this.aTime = t2 || 0.1, this.aLevel = e2 || 1, this.dTime = n2 || 0.5, this.dLevel = i2 || 0, this.rTime = r2 || 0, this.rLevel = o2 || 0, this._rampHighPercentage = 0.98, this._rampLowPercentage = 0.02, this.output = p.audiocontext.createGain(), this.control = new rt.a(), this._init(), this.control.connect(this.output), this.connection = null, this.mathOps = [this.control], this.isExponential = false, this.sourceToClear = null, this.wasTriggered = false, p.soundArray.push(this);
  }, p5.Envelope.prototype._init = function() {
    var t2 = p.audiocontext.currentTime;
    this.control.setTargetAtTime(1e-5, t2, 1e-3), this._setRampAD(this.aTime, this.dTime);
  }, p5.Envelope.prototype.set = function(t2, e2, n2, i2, r2, o2) {
    this.aTime = t2, this.aLevel = e2, this.dTime = n2 || 0, this.dLevel = i2 || 0, this.rTime = r2 || 0, this.rLevel = o2 || 0, this._setRampAD(t2, n2);
  }, p5.Envelope.prototype.setADSR = function(t2, e2, n2, i2) {
    this.aTime = t2, this.dTime = e2 || 0, this.sPercent = n2 || 0, this.dLevel = void 0 !== n2 ? n2 * (this.aLevel - this.rLevel) + this.rLevel : 0, this.rTime = i2 || 0, this._setRampAD(t2, e2);
  }, p5.Envelope.prototype.setRange = function(t2, e2) {
    this.aLevel = t2 || 1, this.rLevel = e2 || 0;
  }, p5.Envelope.prototype._setRampAD = function(t2, e2) {
    this._rampAttackTime = this.checkExpInput(t2), this._rampDecayTime = this.checkExpInput(e2);
    var n2 = 1;
    n2 = Math.log(1 / this.checkExpInput(1 - this._rampHighPercentage)), this._rampAttackTC = t2 / this.checkExpInput(n2), n2 = Math.log(1 / this._rampLowPercentage), this._rampDecayTC = e2 / this.checkExpInput(n2);
  }, p5.Envelope.prototype.setRampPercentages = function(t2, e2) {
    this._rampHighPercentage = this.checkExpInput(t2), this._rampLowPercentage = this.checkExpInput(e2);
    var n2 = 1;
    n2 = Math.log(1 / this.checkExpInput(1 - this._rampHighPercentage)), this._rampAttackTC = this._rampAttackTime / this.checkExpInput(n2), n2 = Math.log(1 / this._rampLowPercentage), this._rampDecayTC = this._rampDecayTime / this.checkExpInput(n2);
  }, p5.Envelope.prototype.setInput = function() {
    for (var t2 = 0; t2 < arguments.length; t2++)
      this.connect(arguments[t2]);
  }, p5.Envelope.prototype.setExp = function(t2) {
    this.isExponential = t2;
  }, p5.Envelope.prototype.checkExpInput = function(t2) {
    return t2 <= 0 && (t2 = 1e-8), t2;
  }, p5.Envelope.prototype.play = function(t2, e2, n2) {
    var i2 = e2 || 0;
    t2 && this.connection !== t2 && this.connect(t2), this.triggerAttack(t2, i2), this.triggerRelease(t2, i2 + this.aTime + this.dTime + ~~n2);
  }, p5.Envelope.prototype.triggerAttack = function(t2, e2) {
    var n2 = p.audiocontext.currentTime + (e2 || 0);
    this.lastAttack = n2, this.wasTriggered = true, t2 && this.connection !== t2 && this.connect(t2);
    var i2 = this.control.getValueAtTime(n2);
    true === this.isExponential ? this.control.exponentialRampToValueAtTime(this.checkExpInput(i2), n2) : this.control.linearRampToValueAtTime(i2, n2), n2 += this.aTime, true === this.isExponential ? (this.control.exponentialRampToValueAtTime(this.checkExpInput(this.aLevel), n2), i2 = this.checkExpInput(this.control.getValueAtTime(n2)), this.control.cancelScheduledValues(n2), this.control.exponentialRampToValueAtTime(i2, n2)) : (this.control.linearRampToValueAtTime(this.aLevel, n2), i2 = this.control.getValueAtTime(n2), this.control.cancelScheduledValues(n2), this.control.linearRampToValueAtTime(i2, n2)), n2 += this.dTime, true === this.isExponential ? (this.control.exponentialRampToValueAtTime(this.checkExpInput(this.dLevel), n2), i2 = this.checkExpInput(this.control.getValueAtTime(n2)), this.control.cancelScheduledValues(n2), this.control.exponentialRampToValueAtTime(i2, n2)) : (this.control.linearRampToValueAtTime(this.dLevel, n2), i2 = this.control.getValueAtTime(n2), this.control.cancelScheduledValues(n2), this.control.linearRampToValueAtTime(i2, n2));
  }, p5.Envelope.prototype.triggerRelease = function(t2, e2) {
    if (this.wasTriggered) {
      var n2 = p.audiocontext.currentTime + (e2 || 0);
      t2 && this.connection !== t2 && this.connect(t2);
      var i2 = this.control.getValueAtTime(n2);
      true === this.isExponential ? this.control.exponentialRampToValueAtTime(this.checkExpInput(i2), n2) : this.control.linearRampToValueAtTime(i2, n2), n2 += this.rTime, true === this.isExponential ? (this.control.exponentialRampToValueAtTime(this.checkExpInput(this.rLevel), n2), i2 = this.checkExpInput(this.control.getValueAtTime(n2)), this.control.cancelScheduledValues(n2), this.control.exponentialRampToValueAtTime(i2, n2)) : (this.control.linearRampToValueAtTime(this.rLevel, n2), i2 = this.control.getValueAtTime(n2), this.control.cancelScheduledValues(n2), this.control.linearRampToValueAtTime(i2, n2)), this.wasTriggered = false;
    }
  }, p5.Envelope.prototype.ramp = function(t2, e2, n2, i2) {
    var r2 = p.audiocontext.currentTime + (e2 || 0), o2 = this.checkExpInput(n2), s2 = void 0 !== i2 ? this.checkExpInput(i2) : void 0;
    t2 && this.connection !== t2 && this.connect(t2);
    var a2 = this.checkExpInput(this.control.getValueAtTime(r2));
    a2 < o2 ? (this.control.setTargetAtTime(o2, r2, this._rampAttackTC), r2 += this._rampAttackTime) : o2 < a2 && (this.control.setTargetAtTime(o2, r2, this._rampDecayTC), r2 += this._rampDecayTime), void 0 !== s2 && (o2 < s2 ? this.control.setTargetAtTime(s2, r2, this._rampAttackTC) : s2 < o2 && this.control.setTargetAtTime(s2, r2, this._rampDecayTC));
  }, p5.Envelope.prototype.connect = function(t2) {
    ((this.connection = t2) instanceof p5.Oscillator || t2 instanceof p5.SoundFile || t2 instanceof p5.AudioIn || t2 instanceof p5.Reverb || t2 instanceof p5.Noise || t2 instanceof p5.Filter || t2 instanceof p5.Delay) && (t2 = t2.output.gain), t2 instanceof AudioParam && t2.setValueAtTime(0, p.audiocontext.currentTime), this.output.connect(t2);
  }, p5.Envelope.prototype.disconnect = function() {
    this.output && this.output.disconnect();
  }, p5.Envelope.prototype.add = function(t2) {
    var e2 = new F.a(t2), n2 = this.mathOps.length, i2 = this.output;
    return p5.prototype._mathChain(this, e2, n2, i2, F.a);
  }, p5.Envelope.prototype.mult = function(t2) {
    var e2 = new I.a(t2), n2 = this.mathOps.length, i2 = this.output;
    return p5.prototype._mathChain(this, e2, n2, i2, I.a);
  }, p5.Envelope.prototype.scale = function(t2, e2, n2, i2) {
    var r2 = new G.a(t2, e2, n2, i2), o2 = this.mathOps.length, s2 = this.output;
    return p5.prototype._mathChain(this, r2, o2, s2, G.a);
  }, p5.Envelope.prototype.dispose = function() {
    var t2 = p.soundArray.indexOf(this);
    p.soundArray.splice(t2, 1), this.disconnect(), this.control && (this.control.dispose(), this.control = null);
    for (var e2 = 1; e2 < this.mathOps.length; e2++)
      this.mathOps[e2].dispose();
  }, p5.Env = function(t2, e2, n2, i2, r2, o2) {
    p5.Envelope.call(this, t2, e2, n2, i2, r2, o2);
  }, p5.Env.prototype = Object.create(p5.Envelope.prototype);
  var ot = p5.Envelope;
  function st(t2) {
    return (st = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function at(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function ut(t2, e2) {
    return !e2 || "object" !== st(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function ct(t2) {
    return (ct = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function lt(t2, e2) {
    return (lt = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var ht = function() {
    for (var t2 = 2 * p.audiocontext.sampleRate, e2 = p.audiocontext.createBuffer(1, t2, p.audiocontext.sampleRate), n2 = e2.getChannelData(0), i2 = 0; i2 < t2; i2++)
      n2[i2] = 2 * Math.random() - 1;
    return e2.type = "white", e2;
  }(), pt = function() {
    var t2, e2, n2, i2, r2, o2, s2, a2 = 2 * p.audiocontext.sampleRate, u2 = p.audiocontext.createBuffer(1, a2, p.audiocontext.sampleRate), c2 = u2.getChannelData(0);
    t2 = e2 = n2 = i2 = r2 = o2 = s2 = 0;
    for (var l2 = 0; l2 < a2; l2++) {
      var h2 = 2 * Math.random() - 1;
      t2 = 0.99886 * t2 + 0.0555179 * h2, e2 = 0.99332 * e2 + 0.0750759 * h2, n2 = 0.969 * n2 + 0.153852 * h2, i2 = 0.8665 * i2 + 0.3104856 * h2, r2 = 0.55 * r2 + 0.5329522 * h2, o2 = -0.7616 * o2 - 0.016898 * h2, c2[l2] = t2 + e2 + n2 + i2 + r2 + o2 + s2 + 0.5362 * h2, c2[l2] *= 0.11, s2 = 0.115926 * h2;
    }
    return u2.type = "pink", u2;
  }(), ft = function() {
    for (var t2 = 2 * p.audiocontext.sampleRate, e2 = p.audiocontext.createBuffer(1, t2, p.audiocontext.sampleRate), n2 = e2.getChannelData(0), i2 = 0, r2 = 0; r2 < t2; r2++) {
      var o2 = 2 * Math.random() - 1;
      n2[r2] = (i2 + 0.02 * o2) / 1.02, i2 = n2[r2], n2[r2] *= 3.5;
    }
    return e2.type = "brown", e2;
  }(), dt = function() {
    function i2(t2) {
      var e2, n2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, i2), delete (e2 = ut(this, ct(i2).call(this))).f, delete e2.freq, delete e2.oscillator, n2 = "brown" === t2 ? ft : "pink" === t2 ? pt : ht, e2.buffer = n2, e2;
    }
    return function(t2, e2) {
      if ("function" != typeof e2 && null !== e2)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && lt(t2, e2);
    }(i2, nt), function(t2, e2, n2) {
      e2 && at(t2.prototype, e2), n2 && at(t2, n2);
    }(i2, [{ key: "setType", value: function(t2) {
      switch (t2) {
        case "white":
          this.buffer = ht;
          break;
        case "pink":
          this.buffer = pt;
          break;
        case "brown":
          this.buffer = ft;
          break;
        default:
          this.buffer = ht;
      }
      if (this.started) {
        var e2 = p.audiocontext.currentTime;
        this.stop(e2), this.start(e2 + 0.01);
      }
    } }, { key: "getType", value: function() {
      return this.buffer.type;
    } }, { key: "start", value: function() {
      this.started && this.stop(), this.noise = p.audiocontext.createBufferSource(), this.noise.buffer = this.buffer, this.noise.loop = true, this.noise.connect(this.output);
      var t2 = p.audiocontext.currentTime;
      this.noise.start(t2), this.started = true;
    } }, { key: "stop", value: function() {
      var t2 = p.audiocontext.currentTime;
      this.noise && (this.noise.stop(t2), this.started = false);
    } }, { key: "dispose", value: function() {
      var t2 = p.audiocontext.currentTime, e2 = p.soundArray.indexOf(this);
      p.soundArray.splice(e2, 1), this.noise && (this.noise.disconnect(), this.stop(t2)), this.output && this.output.disconnect(), this.panner && this.panner.disconnect(), this.output = null, this.panner = null, this.buffer = null, this.noise = null;
    } }]), i2;
  }(), yt = n(2), mt = n.n(yt);
  function vt(t2) {
    return (vt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function _t(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function gt(t2, e2) {
    return !e2 || "object" !== vt(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function bt(t2) {
    return (bt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function Tt(t2, e2) {
    return (Tt = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  function wt() {
    for (var t2 = p.audiocontext, e2 = t2.createBuffer(1, 2048, t2.sampleRate), n2 = e2.getChannelData(0), i2 = 0; i2 < 2048; i2++)
      n2[i2] = 1;
    var r2 = t2.createBufferSource();
    return r2.buffer = e2, r2.loop = true, r2;
  }
  var xt = function() {
    function r2(t2, e2) {
      var n2;
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, r2), (n2 = gt(this, bt(r2).call(this, t2, "sawtooth"))).w = e2 || 0, n2.osc2 = new tt(t2), n2.dNode = p.audiocontext.createDelay(), n2.dcOffset = wt(), n2.dcGain = p.audiocontext.createGain(), n2.dcOffset.connect(n2.dcGain), n2.dcGain.connect(n2.output), n2.f = t2 || 440;
      var i2 = n2.w / n2.oscillator.frequency.value;
      return n2.dNode.delayTime.value = i2, n2.dcGain.gain.value = 1.7 * (0.5 - n2.w), n2.osc2.disconnect(), n2.osc2.panner.disconnect(), n2.osc2.amp(-1), n2.osc2.output.connect(n2.dNode), n2.dNode.connect(n2.output), n2.output.gain.value = 1, n2.output.connect(n2.panner), n2;
    }
    return function(t2, e2) {
      if ("function" != typeof e2 && null !== e2)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && Tt(t2, e2);
    }(r2, nt), function(t2, e2, n2) {
      e2 && _t(t2.prototype, e2), n2 && _t(t2, n2);
    }(r2, [{ key: "width", value: function(t2) {
      if ("number" == typeof t2) {
        if (t2 <= 1 && 0 <= t2) {
          this.w = t2;
          var e2 = this.w / this.oscillator.frequency.value;
          this.dNode.delayTime.value = e2;
        }
        this.dcGain.gain.value = 1.7 * (0.5 - this.w);
      } else {
        t2.connect(this.dNode.delayTime);
        var n2 = new mt.a(-0.5);
        t2.connect(n2);
        var i2 = new I.a(-1), r3 = new I.a(1.7);
        (n2 = n2.connect(i2).connect(r3)).connect(this.dcGain.gain);
      }
    } }, { key: "start", value: function(t2, e2) {
      var n2 = p.audiocontext.currentTime, i2 = e2 || 0;
      if (!this.started) {
        var r3 = t2 || this.f, o2 = this.oscillator.type;
        this.oscillator = p.audiocontext.createOscillator(), this.oscillator.frequency.setValueAtTime(r3, n2), this.oscillator.type = o2, this.oscillator.connect(this.output), this.oscillator.start(i2 + n2), this.osc2.oscillator = p.audiocontext.createOscillator(), this.osc2.oscillator.frequency.setValueAtTime(r3, i2 + n2), this.osc2.oscillator.type = o2, this.osc2.oscillator.connect(this.osc2.output), this.osc2.start(i2 + n2), this.freqNode = [this.oscillator.frequency, this.osc2.oscillator.frequency], this.dcOffset = wt(), this.dcOffset.connect(this.dcGain), this.dcOffset.start(i2 + n2), void 0 !== this.mods && void 0 !== this.mods.frequency && (this.mods.frequency.connect(this.freqNode[0]), this.mods.frequency.connect(this.freqNode[1])), this.started = true, this.osc2.started = true;
      }
    } }, { key: "stop", value: function(t2) {
      if (this.started) {
        var e2 = t2 || 0, n2 = p.audiocontext.currentTime;
        this.oscillator.stop(e2 + n2), this.osc2.oscillator && this.osc2.oscillator.stop(e2 + n2), this.dcOffset.stop(e2 + n2), this.started = false, this.osc2.started = false;
      }
    } }, { key: "freq", value: function(t2, e2, n2) {
      var i2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, r3 = 2 < arguments.length && void 0 !== n2 ? n2 : 0;
      if ("number" == typeof t2) {
        this.f = t2;
        var o2 = p.audiocontext.currentTime, s2 = this.oscillator.frequency.value;
        this.oscillator.frequency.cancelScheduledValues(o2), this.oscillator.frequency.setValueAtTime(s2, o2 + r3), this.oscillator.frequency.exponentialRampToValueAtTime(t2, r3 + i2 + o2), this.osc2.oscillator.frequency.cancelScheduledValues(o2), this.osc2.oscillator.frequency.setValueAtTime(s2, o2 + r3), this.osc2.oscillator.frequency.exponentialRampToValueAtTime(t2, r3 + i2 + o2), this.freqMod && (this.freqMod.output.disconnect(), this.freqMod = null);
      } else
        t2.output && (t2.output.disconnect(), t2.output.connect(this.oscillator.frequency), t2.output.connect(this.osc2.oscillator.frequency), this.freqMod = t2);
    } }]), r2;
  }();
  function St(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  p.inputSources = [];
  var kt = function() {
    function e2(t2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), this.input = p.audiocontext.createGain(), this.output = p.audiocontext.createGain(), this.stream = null, this.mediaStream = null, this.currentSource = null, this.enabled = false, this.amplitude = new B(), this.output.connect(this.amplitude.input), window.MediaStreamTrack && window.navigator.mediaDevices && window.navigator.mediaDevices.getUserMedia || (t2 ? t2() : window.alert("This browser does not support MediaStreamTrack and mediaDevices")), p.soundArray.push(this);
    }
    return function(t2, e3, n2) {
      e3 && St(t2.prototype, e3), n2 && St(t2, n2);
    }(e2, [{ key: "start", value: function(e3, n2) {
      var i2 = this;
      this.stream && this.stop();
      var t2 = p.inputSources[i2.currentSource], r2 = { audio: { sampleRate: p.audiocontext.sampleRate, echoCancellation: false } };
      p.inputSources[this.currentSource] && (r2.audio.deviceId = t2.deviceId), window.navigator.mediaDevices.getUserMedia(r2).then(function(t3) {
        i2.stream = t3, i2.enabled = true, i2.mediaStream = p.audiocontext.createMediaStreamSource(t3), i2.mediaStream.connect(i2.output), i2.amplitude.setInput(i2.output), e3 && e3();
      }).catch(function(t3) {
        n2 && n2(t3);
      });
    } }, { key: "stop", value: function() {
      this.stream && (this.stream.getTracks().forEach(function(t2) {
        t2.stop();
      }), this.mediaStream.disconnect(), delete this.mediaStream, delete this.stream);
    } }, { key: "connect", value: function(t2) {
      t2 ? t2.hasOwnProperty("input") ? this.output.connect(t2.input) : t2.hasOwnProperty("analyser") ? this.output.connect(t2.analyser) : this.output.connect(t2) : this.output.connect(p.input);
    } }, { key: "disconnect", value: function() {
      this.output && (this.output.disconnect(), this.output.connect(this.amplitude.input));
    } }, { key: "getLevel", value: function(t2) {
      return t2 && (this.amplitude.smoothing = t2), this.amplitude.getLevel();
    } }, { key: "amp", value: function(t2, e3) {
      if (e3) {
        var n2 = e3 || 0, i2 = this.output.gain.value;
        this.output.gain.cancelScheduledValues(p.audiocontext.currentTime), this.output.gain.setValueAtTime(i2, p.audiocontext.currentTime), this.output.gain.linearRampToValueAtTime(t2, n2 + p.audiocontext.currentTime);
      } else
        this.output.gain.cancelScheduledValues(p.audiocontext.currentTime), this.output.gain.setValueAtTime(t2, p.audiocontext.currentTime);
    } }, { key: "getSources", value: function(i2, r2) {
      return new Promise(function(e3, n2) {
        window.navigator.mediaDevices.enumerateDevices().then(function(t2) {
          p.inputSources = t2.filter(function(t3) {
            return "audioinput" === t3.kind;
          }), e3(p.inputSources), i2 && i2(p.inputSources);
        }).catch(function(t2) {
          n2(t2), r2 && r2(t2);
        });
      });
    } }, { key: "setSource", value: function(t2) {
      0 < p.inputSources.length && t2 < p.inputSources.length && (this.currentSource = t2), this.stream && this.stream.active && this.start();
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      p.soundArray.splice(t2, 1), this.stop(), this.output && this.output.disconnect(), this.amplitude && this.amplitude.disconnect(), delete this.amplitude, delete this.output;
    } }]), e2;
  }(), Pt = n(23), At = n.n(Pt);
  function Ot(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Ct = function() {
    function t2() {
      !function(t3, e2) {
        if (!(t3 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }(this, t2), this.ac = p.audiocontext, this.input = this.ac.createGain(), this.output = this.ac.createGain(), this._drywet = new At.a(1), this.wet = this.ac.createGain(), this.input.connect(this._drywet.a), this.wet.connect(this._drywet.b), this._drywet.connect(this.output), this.connect(), p.soundArray.push(this);
    }
    return function(t3, e2, n2) {
      e2 && Ot(t3.prototype, e2), n2 && Ot(t3, n2);
    }(t2, [{ key: "amp", value: function(t3, e2, n2) {
      var i2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, r2 = 2 < arguments.length && void 0 !== n2 ? n2 : 0, o2 = p.audiocontext.currentTime, s2 = o2 + r2, a2 = s2 + i2 + 1e-3, u2 = this.output.gain.value;
      this.output.gain.cancelScheduledValues(o2), this.output.gain.linearRampToValueAtTime(u2, s2 + 1e-3), this.output.gain.linearRampToValueAtTime(t3, a2);
    } }, { key: "chain", value: function(t3) {
      if (0 < arguments.length) {
        this.connect(t3);
        for (var e2 = 1; e2 < arguments.length; e2 += 1)
          arguments[e2 - 1].connect(arguments[e2]);
      }
      return this;
    } }, { key: "drywet", value: function(t3) {
      return void 0 !== t3 && (this._drywet.fade.value = t3), this._drywet.fade.value;
    } }, { key: "connect", value: function(t3) {
      var e2 = t3 || p5.soundOut.input;
      this.output.connect(e2.input ? e2.input : e2);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }, { key: "dispose", value: function() {
      var t3 = p.soundArray.indexOf(this);
      p.soundArray.splice(t3, 1), this.input && (this.input.disconnect(), delete this.input), this.output && (this.output.disconnect(), delete this.output), this._drywet && (this._drywet.disconnect(), delete this._drywet), this.wet && (this.wet.disconnect(), delete this.wet), this.ac = void 0;
    } }]), t2;
  }();
  function Rt(t2) {
    return (Rt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function qt(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function Et(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function Nt(t2, e2) {
    return !e2 || "object" !== Rt(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function Bt(t2, e2, n2) {
    return (Bt = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = Vt(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function Vt(t2) {
    return (Vt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function jt(t2, e2) {
    if ("function" != typeof e2 && null !== e2)
      throw new TypeError("Super expression must either be null or a function");
    t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && Mt(t2, e2);
  }
  function Mt(t2, e2) {
    return (Mt = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var Ft = function() {
    function n2(t2) {
      var e2;
      return qt(this, n2), (e2 = Nt(this, Vt(n2).call(this))).biquad = e2.ac.createBiquadFilter(), e2.input.connect(e2.biquad), e2.biquad.connect(e2.wet), t2 && e2.setType(t2), e2._on = true, e2._untoggledType = e2.biquad.type, e2;
    }
    return jt(n2, Ct), function(t2, e2, n3) {
      e2 && Et(t2.prototype, e2), n3 && Et(t2, n3);
    }(n2, [{ key: "process", value: function(t2, e2, n3, i2) {
      t2.connect(this.input), this.set(e2, n3, i2);
    } }, { key: "set", value: function(t2, e2, n3) {
      t2 && this.freq(t2, n3), e2 && this.res(e2, n3);
    } }, { key: "freq", value: function(t2, e2) {
      var n3 = e2 || 0;
      return t2 <= 0 && (t2 = 1), "number" == typeof t2 ? (this.biquad.frequency.cancelScheduledValues(this.ac.currentTime + 0.01 + n3), this.biquad.frequency.exponentialRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n3)) : t2 && t2.connect(this.biquad.frequency), this.biquad.frequency.value;
    } }, { key: "res", value: function(t2, e2) {
      var n3 = e2 || 0;
      return "number" == typeof t2 ? (this.biquad.Q.value = t2, this.biquad.Q.cancelScheduledValues(this.ac.currentTime + 0.01 + n3), this.biquad.Q.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n3)) : t2 && t2.connect(this.biquad.Q), this.biquad.Q.value;
    } }, { key: "gain", value: function(t2, e2) {
      var n3 = e2 || 0;
      return "number" == typeof t2 ? (this.biquad.gain.value = t2, this.biquad.gain.cancelScheduledValues(this.ac.currentTime + 0.01 + n3), this.biquad.gain.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n3)) : t2 && t2.connect(this.biquad.gain), this.biquad.gain.value;
    } }, { key: "toggle", value: function() {
      return this._on = !this._on, true === this._on ? this.biquad.type = this._untoggledType : false === this._on && (this.biquad.type = "allpass"), this._on;
    } }, { key: "setType", value: function(t2) {
      this.biquad.type = t2, this._untoggledType = this.biquad.type;
    } }, { key: "dispose", value: function() {
      Bt(Vt(n2.prototype), "dispose", this).call(this), this.biquad && (this.biquad.disconnect(), delete this.biquad);
    } }]), n2;
  }(), Dt = function() {
    function t2() {
      return qt(this, t2), Nt(this, Vt(t2).call(this, "lowpass"));
    }
    return jt(t2, Ft), t2;
  }(), It = function() {
    function t2() {
      return qt(this, t2), Nt(this, Vt(t2).call(this, "highpass"));
    }
    return jt(t2, Ft), t2;
  }(), Ut = function() {
    function t2() {
      return qt(this, t2), Nt(this, Vt(t2).call(this, "bandpass"));
    }
    return jt(t2, Ft), t2;
  }(), Gt = Ft;
  function Lt(t2) {
    return (Lt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function zt(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function Wt(t2, e2) {
    return !e2 || "object" !== Lt(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function Zt(t2) {
    return (Zt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function Xt(t2, e2) {
    return (Xt = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var Yt = function() {
    function i2(t2, e2) {
      var n2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, i2), (n2 = Wt(this, Zt(i2).call(this, "peaking"))).disconnect(), n2.set(t2, e2), n2.biquad.gain.value = 0, delete n2.input, delete n2.output, delete n2._drywet, delete n2.wet, n2;
    }
    return function(t2, e2) {
      if ("function" != typeof e2 && null !== e2)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && Xt(t2, e2);
    }(i2, Gt), function(t2, e2, n2) {
      e2 && zt(t2.prototype, e2), n2 && zt(t2, n2);
    }(i2, [{ key: "amp", value: function() {
    } }, { key: "drywet", value: function() {
    } }, { key: "connect", value: function(t2) {
      var e2 = t2 || p5.soundOut.input;
      this.biquad ? this.biquad.connect(e2.input ? e2.input : e2) : this.output.connect(e2.input ? e2.input : e2);
    } }, { key: "disconnect", value: function() {
      this.biquad && this.biquad.disconnect();
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      p.soundArray.splice(t2, 1), this.disconnect(), delete this.biquad;
    } }]), i2;
  }();
  function Ht(t2) {
    return (Ht = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function $t(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function Qt(t2, e2) {
    return !e2 || "object" !== Ht(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function Jt(t2, e2, n2) {
    return (Jt = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = Kt(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function Kt(t2) {
    return (Kt = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function te(t2, e2) {
    return (te = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var ee = function() {
    function s2(t2) {
      var e2, n2, i2, r2;
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, s2), e2 = Qt(this, Kt(s2).call(this)), n2 = 3 === (t2 = 3 === t2 || 8 === t2 ? t2 : 3) ? Math.pow(2, 3) : 2, e2.bands = [];
      for (var o2 = 0; o2 < t2; o2++)
        r2 = o2 === t2 - 1 ? (i2 = 21e3, 0.01) : 0 === o2 ? (i2 = 100, 0.1) : (i2 = 1 === o2 ? 3 === t2 ? 360 * n2 : 360 : e2.bands[o2 - 1].freq() * n2, 1), e2.bands[o2] = e2._newBand(i2, r2), 0 < o2 ? e2.bands[o2 - 1].connect(e2.bands[o2].biquad) : e2.input.connect(e2.bands[o2].biquad);
      return e2.bands[t2 - 1].connect(e2.output), e2;
    }
    return function(t2, e2) {
      if ("function" != typeof e2 && null !== e2)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && te(t2, e2);
    }(s2, Ct), function(t2, e2, n2) {
      e2 && $t(t2.prototype, e2), n2 && $t(t2, n2);
    }(s2, [{ key: "process", value: function(t2) {
      t2.connect(this.input);
    } }, { key: "set", value: function() {
      if (arguments.length === 2 * this.bands.length)
        for (var t2 = 0; t2 < arguments.length; t2 += 2)
          this.bands[t2 / 2].freq(arguments[t2]), this.bands[t2 / 2].gain(arguments[t2 + 1]);
    } }, { key: "_newBand", value: function(t2, e2) {
      return new Yt(t2, e2);
    } }, { key: "dispose", value: function() {
      if (Jt(Kt(s2.prototype), "dispose", this).call(this), this.bands) {
        for (; 0 < this.bands.length; )
          this.bands.pop().dispose();
        delete this.bands;
      }
    } }]), s2;
  }();
  function ne(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var ie = function() {
    function e2(t2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), this.ac = p.audiocontext, this.listener = this.ac.listener;
    }
    return function(t2, e3, n2) {
      e3 && ne(t2.prototype, e3), n2 && ne(t2, n2);
    }(e2, [{ key: "process", value: function(t2) {
      t2.connect(this.input);
    } }, { key: "position", value: function(t2, e3, n2, i2) {
      return this.positionX(t2, i2), this.positionY(e3, i2), this.positionZ(n2, i2), [this.listener.positionX.value, this.listener.positionY.value, this.listener.positionZ.value];
    } }, { key: "positionX", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.positionX.value = t2, this.listener.positionX.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.positionX.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.positionX), this.listener.positionX.value;
    } }, { key: "positionY", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.positionY.value = t2, this.listener.positionY.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.positionY.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.positionY), this.listener.positionY.value;
    } }, { key: "positionZ", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.positionZ.value = t2, this.listener.positionZ.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.positionZ.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.positionZ), this.listener.positionZ.value;
    } }, { key: "orient", value: function(t2, e3, n2, i2, r2, o2, s2) {
      return 3 === arguments.length || 4 === arguments.length ? (s2 = i2, this.orientForward(t2, e3, n2, s2)) : 6 !== arguments.length && 7 !== arguments || (this.orientForward(t2, e3, n2), this.orientUp(i2, r2, o2, s2)), [this.listener.forwardX.value, this.listener.forwardY.value, this.listener.forwardZ.value, this.listener.upX.value, this.listener.upY.value, this.listener.upZ.value];
    } }, { key: "orientForward", value: function(t2, e3, n2, i2) {
      return this.forwardX(t2, i2), this.forwardY(e3, i2), this.forwardZ(n2, i2), [this.listener.forwardX, this.listener.forwardY, this.listener.forwardZ];
    } }, { key: "orientUp", value: function(t2, e3, n2, i2) {
      return this.upX(t2, i2), this.upY(e3, i2), this.upZ(n2, i2), [this.listener.upX, this.listener.upY, this.listener.upZ];
    } }, { key: "forwardX", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.forwardX.value = t2, this.listener.forwardX.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.forwardX.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.forwardX), this.listener.forwardX.value;
    } }, { key: "forwardY", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.forwardY.value = t2, this.listener.forwardY.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.forwardY.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.forwardY), this.listener.forwardY.value;
    } }, { key: "forwardZ", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.forwardZ.value = t2, this.listener.forwardZ.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.forwardZ.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.forwardZ), this.listener.forwardZ.value;
    } }, { key: "upX", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.upX.value = t2, this.listener.upX.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.upX.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.upX), this.listener.upX.value;
    } }, { key: "upY", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.upY.value = t2, this.listener.upY.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.upY.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.upY), this.listener.upY.value;
    } }, { key: "upZ", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.listener.upZ.value = t2, this.listener.upZ.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.listener.upZ.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.listener.upZ), this.listener.upZ.value;
    } }]), e2;
  }();
  function re(t2) {
    return (re = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function oe(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function se(t2, e2) {
    return !e2 || "object" !== re(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function ae(t2, e2, n2) {
    return (ae = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = ue(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function ue(t2) {
    return (ue = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function ce(t2, e2) {
    return (ce = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var le = function() {
    function e2() {
      var t2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), (t2 = se(this, ue(e2).call(this))).panner = t2.ac.createPanner(), t2.panner.panningModel = "HRTF", t2.panner.distanceModel = "linear", t2.panner.connect(t2.output), t2.input.connect(t2.panner), t2;
    }
    return function(t2, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e3 && ce(t2, e3);
    }(e2, Ct), function(t2, e3, n2) {
      e3 && oe(t2.prototype, e3), n2 && oe(t2, n2);
    }(e2, [{ key: "process", value: function(t2) {
      t2.connect(this.input);
    } }, { key: "set", value: function(t2, e3, n2, i2) {
      return this.positionX(t2, i2), this.positionY(e3, i2), this.positionZ(n2, i2), [this.panner.positionX.value, this.panner.positionY.value, this.panner.positionZ.value];
    } }, { key: "positionX", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.positionX.value = t2, this.panner.positionX.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.positionX.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.positionX), this.panner.positionX.value;
    } }, { key: "positionY", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.positionY.value = t2, this.panner.positionY.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.positionY.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.positionY), this.panner.positionY.value;
    } }, { key: "positionZ", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.positionZ.value = t2, this.panner.positionZ.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.positionZ.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.positionZ), this.panner.positionZ.value;
    } }, { key: "orient", value: function(t2, e3, n2, i2) {
      return this.orientX(t2, i2), this.orientY(e3, i2), this.orientZ(n2, i2), [this.panner.orientationX.value, this.panner.orientationY.value, this.panner.orientationZ.value];
    } }, { key: "orientX", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.orientationX.value = t2, this.panner.orientationX.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.orientationX.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.orientationX), this.panner.orientationX.value;
    } }, { key: "orientY", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.orientationY.value = t2, this.panner.orientationY.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.orientationY.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.orientationY), this.panner.orientationY.value;
    } }, { key: "orientZ", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.panner.orientationZ.value = t2, this.panner.orientationZ.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.panner.orientationZ.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : t2 && t2.connect(this.panner.orientationZ), this.panner.orientationZ.value;
    } }, { key: "setFalloff", value: function(t2, e3) {
      this.maxDist(t2), this.rolloff(e3);
    } }, { key: "maxDist", value: function(t2) {
      return "number" == typeof t2 && (this.panner.maxDistance = t2), this.panner.maxDistance;
    } }, { key: "rolloff", value: function(t2) {
      return "number" == typeof t2 && (this.panner.rolloffFactor = t2), this.panner.rolloffFactor;
    } }, { key: "dispose", value: function() {
      ae(ue(e2.prototype), "dispose", this).call(this), this.panner && (this.panner.disconnect(), delete this.panner);
    } }]), e2;
  }();
  function he(t2) {
    return (he = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function pe(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function fe(t2, e2) {
    return !e2 || "object" !== he(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function de(t2, e2, n2) {
    return (de = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = ye(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function ye(t2) {
    return (ye = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function me(t2, e2) {
    return (me = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var ve = function() {
    function e2() {
      var t2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), (t2 = fe(this, ye(e2).call(this)))._split = t2.ac.createChannelSplitter(2), t2._merge = t2.ac.createChannelMerger(2), t2._leftGain = t2.ac.createGain(), t2._rightGain = t2.ac.createGain(), t2.leftDelay = t2.ac.createDelay(), t2.rightDelay = t2.ac.createDelay(), t2._leftFilter = new Gt(), t2._rightFilter = new Gt(), t2._leftFilter.disconnect(), t2._rightFilter.disconnect(), t2._leftFilter.biquad.frequency.setValueAtTime(1200, t2.ac.currentTime), t2._rightFilter.biquad.frequency.setValueAtTime(1200, t2.ac.currentTime), t2._leftFilter.biquad.Q.setValueAtTime(0.3, t2.ac.currentTime), t2._rightFilter.biquad.Q.setValueAtTime(0.3, t2.ac.currentTime), t2.input.connect(t2._split), t2.leftDelay.connect(t2._leftGain), t2.rightDelay.connect(t2._rightGain), t2._leftGain.connect(t2._leftFilter.input), t2._rightGain.connect(t2._rightFilter.input), t2._merge.connect(t2.wet), t2._leftFilter.biquad.gain.setValueAtTime(1, t2.ac.currentTime), t2._rightFilter.biquad.gain.setValueAtTime(1, t2.ac.currentTime), t2.setType(0), t2._maxDelay = t2.leftDelay.delayTime.maxValue, t2.feedback(0.5), t2;
    }
    return function(t2, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e3 && me(t2, e3);
    }(e2, Ct), function(t2, e3, n2) {
      e3 && pe(t2.prototype, e3), n2 && pe(t2, n2);
    }(e2, [{ key: "process", value: function(t2, e3, n2, i2) {
      var r2 = n2 || 0, o2 = e3 || 0;
      if (1 <= r2)
        throw new Error("Feedback value will force a positive feedback loop.");
      if (o2 >= this._maxDelay)
        throw new Error("Delay Time exceeds maximum delay time of " + this._maxDelay + " second.");
      t2.connect(this.input), this.leftDelay.delayTime.setValueAtTime(o2, this.ac.currentTime), this.rightDelay.delayTime.setValueAtTime(o2, this.ac.currentTime), this._leftGain.gain.value = r2, this._rightGain.gain.value = r2, i2 && (this._leftFilter.freq(i2), this._rightFilter.freq(i2));
    } }, { key: "delayTime", value: function(t2) {
      "number" != typeof t2 ? (t2.connect(this.leftDelay.delayTime), t2.connect(this.rightDelay.delayTime)) : (this.leftDelay.delayTime.cancelScheduledValues(this.ac.currentTime), this.rightDelay.delayTime.cancelScheduledValues(this.ac.currentTime), this.leftDelay.delayTime.linearRampToValueAtTime(t2, this.ac.currentTime), this.rightDelay.delayTime.linearRampToValueAtTime(t2, this.ac.currentTime));
    } }, { key: "feedback", value: function(t2) {
      if (t2 && "number" != typeof t2)
        t2.connect(this._leftGain.gain), t2.connect(this._rightGain.gain);
      else {
        if (1 <= t2)
          throw new Error("Feedback value will force a positive feedback loop.");
        "number" == typeof t2 && (this._leftGain.gain.value = t2, this._rightGain.gain.value = t2);
      }
      return this._leftGain.gain.value;
    } }, { key: "filter", value: function(t2, e3) {
      this._leftFilter.set(t2, e3), this._rightFilter.set(t2, e3);
    } }, { key: "setType", value: function(t2) {
      switch (1 === t2 && (t2 = "pingPong"), this._split.disconnect(), this._leftFilter.disconnect(), this._rightFilter.disconnect(), this._split.connect(this.leftDelay, 0), this._split.connect(this.rightDelay, 1), t2) {
        case "pingPong":
          this._rightFilter.setType(this._leftFilter.biquad.type), this._leftFilter.output.connect(this._merge, 0, 0), this._rightFilter.output.connect(this._merge, 0, 1), this._leftFilter.output.connect(this.rightDelay), this._rightFilter.output.connect(this.leftDelay);
          break;
        default:
          this._leftFilter.output.connect(this._merge, 0, 0), this._rightFilter.output.connect(this._merge, 0, 1), this._leftFilter.output.connect(this.leftDelay), this._rightFilter.output.connect(this.rightDelay);
      }
    } }, { key: "dispose", value: function() {
      de(ye(e2.prototype), "dispose", this).call(this), this._split.disconnect(), this._leftFilter.dispose(), this._rightFilter.dispose(), this._merge.disconnect(), this._leftGain.disconnect(), this._rightGain.disconnect(), this.leftDelay.disconnect(), this.rightDelay.disconnect(), this._split = void 0, this._leftFilter = void 0, this._rightFilter = void 0, this._merge = void 0, this._leftGain = void 0, this._rightGain = void 0, this.leftDelay = void 0, this.rightDelay = void 0;
    } }]), e2;
  }();
  function _e(t2) {
    return (_e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function ge(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  function be(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function Te(t2, e2, n2) {
    return e2 && be(t2.prototype, e2), n2 && be(t2, n2), t2;
  }
  function we(t2, e2) {
    return !e2 || "object" !== _e(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function xe(t2, e2, n2) {
    return (xe = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = Se(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function Se(t2) {
    return (Se = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function ke(t2, e2) {
    if ("function" != typeof e2 && null !== e2)
      throw new TypeError("Super expression must either be null or a function");
    t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && Pe(t2, e2);
  }
  function Pe(t2, e2) {
    return (Pe = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var Ae = function() {
    function e2() {
      var t2;
      return ge(this, e2), (t2 = we(this, Se(e2).call(this)))._initConvolverNode(), t2.input.gain.value = 0.5, t2._seconds = 3, t2._decay = 2, t2._reverse = false, t2._buildImpulse(), t2;
    }
    return ke(e2, Ct), Te(e2, [{ key: "_initConvolverNode", value: function() {
      this.convolverNode = this.ac.createConvolver(), this.input.connect(this.convolverNode), this.convolverNode.connect(this.wet);
    } }, { key: "_teardownConvolverNode", value: function() {
      this.convolverNode && (this.convolverNode.disconnect(), delete this.convolverNode);
    } }, { key: "_setBuffer", value: function(t2) {
      this._teardownConvolverNode(), this._initConvolverNode(), this.convolverNode.buffer = t2;
    } }, { key: "process", value: function(t2, e3, n2, i2) {
      t2.connect(this.input);
      var r2 = false;
      e3 && (this._seconds = e3, r2 = true), n2 && (this._decay = n2), i2 && (this._reverse = i2), r2 && this._buildImpulse();
    } }, { key: "set", value: function(t2, e3, n2) {
      var i2 = false;
      t2 && (this._seconds = t2, i2 = true), e3 && (this._decay = e3), n2 && (this._reverse = n2), i2 && this._buildImpulse();
    } }, { key: "_buildImpulse", value: function() {
      var t2, e3, n2 = this.ac.sampleRate, i2 = n2 * this._seconds, r2 = this._decay, o2 = this.ac.createBuffer(2, i2, n2), s2 = o2.getChannelData(0), a2 = o2.getChannelData(1);
      for (e3 = 0; e3 < i2; e3++)
        t2 = this._reverse ? i2 - e3 : e3, s2[e3] = (2 * Math.random() - 1) * Math.pow(1 - t2 / i2, r2), a2[e3] = (2 * Math.random() - 1) * Math.pow(1 - t2 / i2, r2);
      this._setBuffer(o2);
    } }, { key: "dispose", value: function() {
      xe(Se(e2.prototype), "dispose", this).call(this), this._teardownConvolverNode();
    } }]), e2;
  }(), Oe = function() {
    function r2(t2, e2, n2) {
      var i2;
      return ge(this, r2), (i2 = we(this, Se(r2).call(this)))._initConvolverNode(), i2.input.gain.value = 0.5, t2 ? (i2.impulses = [], i2._loadBuffer(t2, e2, n2)) : (i2._seconds = 3, i2._decay = 2, i2._reverse = false, i2._buildImpulse()), i2.impulses = [], i2.set = null, i2;
    }
    return ke(r2, Ae), Te(r2, [{ key: "_loadBuffer", value: function(t2, i2, n2) {
      var r3 = p5.prototype._checkFileFormats(t2), o2 = this, s2 = new Error().stack, a2 = Object(c.b)(), u2 = new XMLHttpRequest();
      u2.open("GET", r3, true), u2.responseType = "arraybuffer", u2.onload = function() {
        if (200 === u2.status)
          a2.decodeAudioData(u2.response, function(t4) {
            var e3 = {}, n3 = r3.split("/");
            e3.name = n3[n3.length - 1], e3.audioBuffer = t4, o2.impulses.push(e3), o2._setBuffer(e3.audioBuffer), i2 && i2(e3);
          }, function() {
            var t4 = new m("decodeAudioData", s2, o2.url), e3 = "AudioContext error at decodeAudioData for " + o2.url;
            n2 && (t4.msg = e3, n2(t4));
          });
        else {
          var t3 = new m("loadConvolver", s2, o2.url), e2 = "Unable to load " + o2.url + ". The request status was: " + u2.status + " (" + u2.statusText + ")";
          n2 && (t3.message = e2, n2(t3));
        }
      }, u2.onerror = function() {
        var t3 = new m("loadConvolver", s2, o2.url), e2 = "There was no response from the server at " + o2.url + ". Check the url and internet connectivity.";
        n2 && (t3.message = e2, n2(t3));
      }, u2.send();
    } }, { key: "process", value: function(t2) {
      t2.connect(this.input);
    } }, { key: "addImpulse", value: function(t2, e2, n2) {
      -1 < window.location.origin.indexOf("file://") && "undefined" === window.cordova && alert("This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS"), this._loadBuffer(t2, e2, n2);
    } }, { key: "resetImpulse", value: function(t2, e2, n2) {
      -1 < window.location.origin.indexOf("file://") && "undefined" === window.cordova && alert("This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS"), this.impulses = [], this._loadBuffer(t2, e2, n2);
    } }, { key: "toggleImpulse", value: function(t2) {
      if ("number" == typeof t2 && t2 < this.impulses.length && this._setBuffer(this.impulses[t2].audioBuffer), "string" == typeof t2) {
        for (var e2 = 0; e2 < this.impulses.length; e2++)
          if (this.impulses[e2].name === t2) {
            this._setBuffer(this.impulses[e2].audioBuffer);
            break;
          }
      }
    } }, { key: "dispose", value: function() {
      for (var t2 in xe(Se(r2.prototype), "dispose", this).call(this), this.impulses)
        this.impulses[t2] && (this.impulses[t2] = null);
    } }]), r2;
  }();
  var Ce = n(11), Re = n.n(Ce);
  function qe(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Ee = function() {
    function t2() {
      !function(t3, e2) {
        if (!(t3 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }(this, t2), this.clock = new Re.a({ callback: this.ontick.bind(this) }), this.syncedParts = [], this.bpm = 120, this._init(), this.prevTick = 0, this.tatumTime = 0, this.tickCallback = function() {
      };
    }
    return function(t3, e2, n2) {
      e2 && qe(t3.prototype, e2), n2 && qe(t3, n2);
    }(t2, [{ key: "ontick", value: function(t3) {
      var e2 = t3 - this.prevTick, i2 = t3 - p.audiocontext.currentTime;
      if (!(e2 - this.tatumTime <= -0.02)) {
        this.prevTick = t3;
        var r2 = this;
        this.syncedParts.forEach(function(t4) {
          t4.isPlaying && (t4.incrementStep(i2), t4.phrases.forEach(function(t5) {
            var e3 = t5.sequence, n2 = r2.metroTicks % e3.length;
            0 !== e3[n2] && (r2.metroTicks < e3.length || !t5.looping) && t5.callback(i2, e3[n2]);
          }));
        }), this.metroTicks += 1, this.tickCallback(i2);
      }
    } }, { key: "setBPM", value: function(t3, e2) {
      var n2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, i2 = 60 / (t3 * this.tatums), r2 = p.audiocontext.currentTime;
      this.tatumTime = i2, this.clock.frequency.setValueAtTime(this.clock.frequency.value, r2), this.clock.frequency.linearRampToValueAtTime(t3, r2 + n2), this.bpm = t3;
    } }, { key: "getBPM", value: function() {
      return this.clock.getRate() / this.tatums * 60;
    } }, { key: "_init", value: function() {
      this.metroTicks = 0;
    } }, { key: "resetSync", value: function(t3) {
      this.syncedParts = [t3];
    } }, { key: "pushSync", value: function(t3) {
      this.syncedParts.push(t3);
    } }, { key: "start", value: function(t3) {
      var e2 = t3 || 0, n2 = p.audiocontext.currentTime;
      this.clock.start(n2 + e2), this.setBPM(this.bpm);
    } }, { key: "stop", value: function(t3) {
      var e2 = t3 || 0, n2 = p.audiocontext.currentTime;
      this.clock.stop(n2 + e2);
    } }, { key: "beatLength", value: function(t3) {
      this.tatums = 1 / t3 / 4;
    } }]), t2;
  }();
  function Ne(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function Be(t2, e2, n2) {
    return e2 && Ne(t2.prototype, e2), n2 && Ne(t2, n2), t2;
  }
  function Ve(t2, e2) {
    if (!(t2 instanceof e2))
      throw new TypeError("Cannot call a class as a function");
  }
  var je = 120;
  p5.prototype.setBPM = function(t2, e2) {
    for (var n2 in je = t2, p.parts)
      p.parts[n2] && p.parts[n2].setBPM(t2, e2);
  };
  function Me(t2, e2, n2) {
    Ve(this, Me), this.phraseStep = 0, this.name = t2, this.callback = e2, this.sequence = n2;
  }
  var Fe = function() {
    function n2(t2, e2) {
      Ve(this, n2), this.length = t2 || 0, this.partStep = 0, this.phrases = [], this.isPlaying = false, this.noLoop(), this.tatums = e2 || 0.0625, this.metro = new Ee(), this.metro._init(), this.metro.beatLength(this.tatums), this.metro.setBPM(je), p.parts.push(this), this.callback = function() {
      };
    }
    return Be(n2, [{ key: "setBPM", value: function(t2, e2) {
      this.metro.setBPM(t2, e2);
    } }, { key: "getBPM", value: function() {
      return this.metro.getBPM();
    } }, { key: "start", value: function(t2) {
      if (!this.isPlaying) {
        this.isPlaying = true, this.metro.resetSync(this);
        var e2 = t2 || 0;
        this.metro.start(e2);
      }
    } }, { key: "loop", value: function(t2) {
      this.looping = true, this.onended = function() {
        this.partStep = 0;
      };
      var e2 = t2 || 0;
      this.start(e2);
    } }, { key: "noLoop", value: function() {
      this.looping = false, this.onended = function() {
        this.stop();
      };
    } }, { key: "stop", value: function(t2) {
      this.partStep = 0, this.pause(t2);
    } }, { key: "pause", value: function(t2) {
      this.isPlaying = false;
      var e2 = t2 || 0;
      this.metro.stop(e2);
    } }, { key: "addPhrase", value: function(t2, e2, n3) {
      var i2;
      if (3 === arguments.length)
        i2 = new Me(t2, e2, n3);
      else {
        if (!(t2 instanceof Me))
          throw "invalid input. addPhrase accepts name, callback, array or a p5.Phrase";
        i2 = t2;
      }
      this.phrases.push(i2), i2.sequence.length > this.length && (this.length = i2.sequence.length);
    } }, { key: "removePhrase", value: function(t2) {
      for (var e2 in this.phrases)
        this.phrases[e2].name === t2 && this.phrases.splice(e2, 1);
    } }, { key: "getPhrase", value: function(t2) {
      for (var e2 in this.phrases)
        if (this.phrases[e2].name === t2)
          return this.phrases[e2];
    } }, { key: "replaceSequence", value: function(t2, e2) {
      for (var n3 in this.phrases)
        this.phrases[n3].name === t2 && (this.phrases[n3].sequence = e2);
    } }, { key: "incrementStep", value: function(t2) {
      this.partStep < this.length - 1 ? (this.callback(t2), this.partStep += 1) : this.looping || this.partStep !== this.length - 1 || this.onended();
    } }, { key: "onStep", value: function(t2) {
      this.callback = t2;
    } }]), n2;
  }(), De = function() {
    function n2() {
      Ve(this, n2), this.parts = [], this.currentPart = new Array(arguments.length);
      var t2 = this;
      for (var e2 in arguments)
        this.parts[e2] = arguments[e2], this.parts[e2].nextPart = this.parts[e2 + 1], this.parts[e2].onended = function() {
          t2.resetPart(e2), Ie(t2);
        };
      this.looping = false;
    }
    return Be(n2, [{ key: "onended", value: function() {
      this.looping ? this.parts[0].start() : this.parts[this.parts.length - 1].onended = function() {
        this.stop(), this.resetParts();
      }, this.currentPart = 0;
    } }, { key: "start", value: function() {
      this.parts[this.currentPart].start(), this.scoreStep = 0;
    } }, { key: "stop", value: function() {
      this.parts[this.currentPart].stop(), this.currentPart = 0, this.scoreStep = 0;
    } }, { key: "pause", value: function() {
      this.parts[this.currentPart].stop();
    } }, { key: "loop", value: function() {
      this.looping = true, this.start();
    } }, { key: "noLoop", value: function() {
      this.looping = false;
    } }, { key: "resetParts", value: function() {
      var e2 = this;
      this.parts.forEach(function(t2) {
        e2.resetParts[t2];
      });
    } }, { key: "resetPart", value: function(t2) {
      for (var e2 in this.parts[t2].stop(), this.parts[t2].partStep = 0, this.parts[t2].phrases)
        this.parts[t2] && (this.parts[t2].phrases[e2].phraseStep = 0);
    } }, { key: "setBPM", value: function(t2, e2) {
      for (var n3 in this.parts)
        this.parts[n3] && this.parts[n3].setBPM(t2, e2);
    } }]), n2;
  }();
  function Ie(t2) {
    t2.currentPart++, t2.currentPart >= t2.parts.length ? (t2.scoreStep = 0, t2.onended()) : (t2.scoreStep = 0, t2.parts[t2.currentPart - 1].stop(), t2.parts[t2.currentPart].start());
  }
  function Ue(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Ge = function() {
    function i2(t2, e2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, i2), Object.defineProperty(this, "bpm", { get: function() {
        return this._bpm;
      }, set: function(t3) {
        this.musicalTimeMode, this._bpm = t3, this._update();
      } }), Object.defineProperty(this, "timeSignature", { get: function() {
        return this._timeSignature;
      }, set: function(t3) {
        this.musicalTimeMode, this._timeSignature = t3, this._update();
      } }), Object.defineProperty(this, "interval", { get: function() {
        return this._interval;
      }, set: function(t3) {
        this.musicalTimeMode = "number" != typeof t3, this._interval = t3, this._update();
      } }), Object.defineProperty(this, "iterations", { get: function() {
        return this.clock.ticks;
      } }), this.callback = t2, this.musicalTimeMode = "number" != typeof this._interval, this._interval = e2 || 1, this._timeSignature = 4, this._bpm = 60, this.isPlaying = false, this.maxIterations = 1 / 0;
      var n2 = this;
      this.clock = new Re.a({ callback: function(t3) {
        var e3 = t3 - p.audiocontext.currentTime;
        0 < e3 && n2.iterations <= n2.maxIterations && n2.callback(e3);
      }, frequency: this._calcFreq() });
    }
    return function(t2, e2, n2) {
      e2 && Ue(t2.prototype, e2), n2 && Ue(t2, n2);
    }(i2, [{ key: "start", value: function(t2) {
      var e2 = t2 || 0, n2 = p.audiocontext.currentTime;
      this.isPlaying || (this.clock.start(n2 + e2), this.isPlaying = true);
    } }, { key: "stop", value: function(t2) {
      var e2 = t2 || 0, n2 = p.audiocontext.currentTime;
      this.isPlaying && (this.clock.stop(n2 + e2), this.isPlaying = false);
    } }, { key: "pause", value: function(t2) {
      var e2 = t2 || 0, n2 = p.audiocontext.currentTime;
      this.isPlaying && (this.clock.pause(n2 + e2), this.isPlaying = false);
    } }, { key: "syncedStart", value: function(t2, e2) {
      var n2 = e2 || 0, i3 = p.audiocontext.currentTime;
      if (t2.isPlaying) {
        if (t2.isPlaying) {
          var r2 = t2.clock._nextTick - p.audiocontext.currentTime;
          this.clock.start(i3 + r2), this.isPlaying = true;
        }
      } else
        t2.clock.start(i3 + n2), t2.isPlaying = true, this.clock.start(i3 + n2), this.isPlaying = true;
    } }, { key: "_update", value: function() {
      this.clock.frequency.value = this._calcFreq();
    } }, { key: "_calcFreq", value: function() {
      return "number" == typeof this._interval ? (this.musicalTimeMode = false, 1 / this._interval) : "string" == typeof this._interval ? (this.musicalTimeMode = true, this._bpm / 60 / this._convertNotation(this._interval) * (this._timeSignature / 4)) : void 0;
    } }, { key: "_convertNotation", value: function(t2) {
      var e2 = t2.slice(-1);
      switch (t2 = Number(t2.slice(0, -1)), e2) {
        case "m":
          return this._measure(t2);
        case "n":
          return this._note(t2);
      }
    } }, { key: "_measure", value: function(t2) {
      return t2 * this._timeSignature;
    } }, { key: "_note", value: function(t2) {
      return this._timeSignature / t2;
    } }]), i2;
  }();
  function Le(t2) {
    return (Le = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function ze(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function We(t2, e2) {
    return !e2 || "object" !== Le(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function Ze(t2, e2, n2) {
    return (Ze = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = Xe(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function Xe(t2) {
    return (Xe = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function Ye(t2, e2) {
    return (Ye = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var He = function() {
    function e2() {
      var t2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), (t2 = We(this, Xe(e2).call(this))).compressor = t2.ac.createDynamicsCompressor(), t2.input.connect(t2.compressor), t2.compressor.connect(t2.wet), t2;
    }
    return function(t2, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e3 && Ye(t2, e3);
    }(e2, Ct), function(t2, e3, n2) {
      e3 && ze(t2.prototype, e3), n2 && ze(t2, n2);
    }(e2, [{ key: "process", value: function(t2, e3, n2, i2, r2, o2) {
      t2.connect(this.input), this.set(e3, n2, i2, r2, o2);
    } }, { key: "set", value: function(t2, e3, n2, i2, r2) {
      void 0 !== t2 && this.attack(t2), void 0 !== e3 && this.knee(e3), void 0 !== n2 && this.ratio(n2), void 0 !== i2 && this.threshold(i2), void 0 !== r2 && this.release(r2);
    } }, { key: "attack", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.compressor.attack.value = t2, this.compressor.attack.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.compressor.attack.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : void 0 !== t2 && t2.connect(this.compressor.attack), this.compressor.attack.value;
    } }, { key: "knee", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.compressor.knee.value = t2, this.compressor.knee.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.compressor.knee.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : void 0 !== t2 && t2.connect(this.compressor.knee), this.compressor.knee.value;
    } }, { key: "ratio", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.compressor.ratio.value = t2, this.compressor.ratio.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.compressor.ratio.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : void 0 !== t2 && t2.connect(this.compressor.ratio), this.compressor.ratio.value;
    } }, { key: "threshold", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.compressor.threshold.value = t2, this.compressor.threshold.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.compressor.threshold.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : void 0 !== t2 && t2.connect(this.compressor.threshold), this.compressor.threshold.value;
    } }, { key: "release", value: function(t2, e3) {
      var n2 = e3 || 0;
      return "number" == typeof t2 ? (this.compressor.release.value = t2, this.compressor.release.cancelScheduledValues(this.ac.currentTime + 0.01 + n2), this.compressor.release.linearRampToValueAtTime(t2, this.ac.currentTime + 0.02 + n2)) : "undefined" != typeof number && t2.connect(this.compressor.release), this.compressor.release.value;
    } }, { key: "reduction", value: function() {
      return this.compressor.reduction.value;
    } }, { key: "dispose", value: function() {
      Ze(Xe(e2.prototype), "dispose", this).call(this), this.compressor && (this.compressor.disconnect(), delete this.compressor);
    } }]), e2;
  }();
  function $e(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Qe = function() {
    function r2(t2, e2, n2, i2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, r2), this.framesPerPeak = i2 || 20, this.framesSinceLastPeak = 0, this.decayRate = 0.95, this.threshold = n2 || 0.35, this.cutoff = 0, this.cutoffMult = 1.5, this.energy = 0, this.penergy = 0, this.currentValue = 0, this.isDetected = false, this.f1 = t2 || 40, this.f2 = e2 || 2e4, this._onPeak = function() {
      };
    }
    return function(t2, e2, n2) {
      e2 && $e(t2.prototype, e2), n2 && $e(t2, n2);
    }(r2, [{ key: "update", value: function(t2) {
      var e2 = this.energy = t2.getEnergy(this.f1, this.f2) / 255;
      e2 > this.cutoff && e2 > this.threshold && 0 < e2 - this.penergy ? (this._onPeak(), this.isDetected = true, this.cutoff = e2 * this.cutoffMult, this.framesSinceLastPeak = 0) : (this.isDetected = false, this.framesSinceLastPeak <= this.framesPerPeak ? this.framesSinceLastPeak++ : (this.cutoff *= this.decayRate, this.cutoff = Math.max(this.cutoff, this.threshold))), this.currentValue = e2, this.penergy = e2;
    } }, { key: "onPeak", value: function(t2, e2) {
      var n2 = this;
      n2._onPeak = function() {
        t2(n2.energy, e2);
      };
    } }]), r2;
  }();
  function Je(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Ke = p.audiocontext, tn = function() {
    function e2() {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), this.input = Ke.createGain(), this.output = Ke.createGain(), this._inputChannels = 2, this._outputChannels = 2;
      var t2 = y(1024);
      this._workletNode = new AudioWorkletNode(Ke, s.a.recorderProcessor, { outputChannelCount: [this._outputChannels], processorOptions: { numInputChannels: this._inputChannels, bufferSize: t2 } }), this._workletNode.port.onmessage = function(t3) {
        if ("buffers" === t3.data.name) {
          var e3 = [new Float32Array(t3.data.leftBuffer), new Float32Array(t3.data.rightBuffer)];
          this._callback(e3);
        }
      }.bind(this), this._callback = function() {
      }, this._workletNode.connect(p5.soundOut._silentNode), this.setInput(), p.soundArray.push(this);
    }
    return function(t2, e3, n2) {
      e3 && Je(t2.prototype, e3), n2 && Je(t2, n2);
    }(e2, [{ key: "setInput", value: function(t2) {
      this.input.disconnect(), this.input = null, this.input = Ke.createGain(), this.input.connect(this._workletNode), this.input.connect(this.output), t2 ? t2.connect(this.input) : p5.soundOut.output.connect(this.input);
    } }, { key: "record", value: function(e3, t2, n2) {
      this._workletNode.port.postMessage({ name: "start", duration: t2 }), e3 && n2 ? this._callback = function(t3) {
        e3.setBuffer(t3), n2();
      } : e3 && (this._callback = function(t3) {
        e3.setBuffer(t3);
      });
    } }, { key: "stop", value: function() {
      this._workletNode.port.postMessage({ name: "stop" });
    } }, { key: "dispose", value: function() {
      var t2 = p.soundArray.indexOf(this);
      p.soundArray.splice(t2, 1), this._callback = function() {
      }, this.input && this.input.disconnect(), this.input = null, this._workletNode = null;
    } }]), e2;
  }();
  function en(t2) {
    return (en = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function nn(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function rn(t2, e2) {
    return !e2 || "object" !== en(e2) && "function" != typeof e2 ? function(t3) {
      if (void 0 !== t3)
        return t3;
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }(t2) : e2;
  }
  function on(t2, e2, n2) {
    return (on = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = sn(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function sn(t2) {
    return (sn = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function an(t2, e2) {
    return (an = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  function un(t2) {
    for (var e2, n2 = "number" == typeof t2 ? t2 : 50, i2 = new Float32Array(44100), r2 = Math.PI / 180, o2 = 0; o2 < 44100; ++o2)
      e2 = 2 * o2 / 44100 - 1, i2[o2] = (3 + n2) * e2 * 20 * r2 / (Math.PI + n2 * Math.abs(e2));
    return i2;
  }
  var cn = function() {
    function r2(t2, e2) {
      var n2;
      if (function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, r2), n2 = rn(this, sn(r2).call(this)), void 0 === t2 && (t2 = 0.25), "number" != typeof t2)
        throw new Error("amount must be a number");
      if (void 0 === e2 && (e2 = "2x"), "string" != typeof e2)
        throw new Error("oversample must be a String");
      var i2 = p5.prototype.map(t2, 0, 1, 0, 2e3);
      return n2.waveShaperNode = n2.ac.createWaveShaper(), n2.amount = i2, n2.waveShaperNode.curve = un(i2), n2.waveShaperNode.oversample = e2, n2.input.connect(n2.waveShaperNode), n2.waveShaperNode.connect(n2.wet), n2;
    }
    return function(t2, e2) {
      if ("function" != typeof e2 && null !== e2)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e2 && e2.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e2 && an(t2, e2);
    }(r2, Ct), function(t2, e2, n2) {
      e2 && nn(t2.prototype, e2), n2 && nn(t2, n2);
    }(r2, [{ key: "process", value: function(t2, e2, n2) {
      t2.connect(this.input), this.set(e2, n2);
    } }, { key: "set", value: function(t2, e2) {
      if (t2) {
        var n2 = p5.prototype.map(t2, 0, 1, 0, 2e3);
        this.amount = n2, this.waveShaperNode.curve = un(n2);
      }
      e2 && (this.waveShaperNode.oversample = e2);
    } }, { key: "getAmount", value: function() {
      return this.amount;
    } }, { key: "getOversample", value: function() {
      return this.waveShaperNode.oversample;
    } }, { key: "dispose", value: function() {
      on(sn(r2.prototype), "dispose", this).call(this), this.waveShaperNode && (this.waveShaperNode.disconnect(), this.waveShaperNode = null);
    } }]), r2;
  }();
  function ln(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var hn = function() {
    function t2() {
      !function(t3, e2) {
        if (!(t3 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }(this, t2), this.ac = p.audiocontext, this.input = this.ac.createGain(), this.output = this.ac.createGain(), this.input.gain.value = 0.5, this.input.connect(this.output), p.soundArray.push(this);
    }
    return function(t3, e2, n2) {
      e2 && ln(t3.prototype, e2), n2 && ln(t3, n2);
    }(t2, [{ key: "setInput", value: function(t3) {
      t3.connect(this.input);
    } }, { key: "connect", value: function(t3) {
      var e2 = t3 || p5.soundOut.input;
      this.output.connect(e2.input ? e2.input : e2);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }, { key: "amp", value: function(t3, e2, n2) {
      var i2 = 1 < arguments.length && void 0 !== e2 ? e2 : 0, r2 = 2 < arguments.length && void 0 !== n2 ? n2 : 0, o2 = p.audiocontext.currentTime, s2 = this.output.gain.value;
      this.output.gain.cancelScheduledValues(o2), this.output.gain.linearRampToValueAtTime(s2, o2 + r2), this.output.gain.linearRampToValueAtTime(t3, o2 + r2 + i2);
    } }, { key: "dispose", value: function() {
      var t3 = p.soundArray.indexOf(this);
      p.soundArray.splice(t3, 1), this.output && (this.output.disconnect(), delete this.output), this.input && (this.input.disconnect(), delete this.input);
    } }]), t2;
  }();
  function pn(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var fn = function() {
    function t2() {
      !function(t3, e2) {
        if (!(t3 instanceof e2))
          throw new TypeError("Cannot call a class as a function");
      }(this, t2), this.ac = p.audiocontext, this.output = this.ac.createGain(), this.connect(), p.soundArray.push(this);
    }
    return function(t3, e2, n2) {
      e2 && pn(t3.prototype, e2), n2 && pn(t3, n2);
    }(t2, [{ key: "play", value: function(t3, e2, n2, i2) {
    } }, { key: "triggerAttack", value: function(t3, e2, n2) {
    } }, { key: "triggerRelease", value: function(t3) {
    } }, { key: "amp", value: function(t3, e2) {
    } }, { key: "connect", value: function(t3) {
      var e2 = t3 || p.input;
      this.output.connect(e2.input ? e2.input : e2);
    } }, { key: "disconnect", value: function() {
      this.output.disconnect();
    } }, { key: "dispose", value: function() {
      this.output && (this.output.disconnect(), delete this.output);
    } }]), t2;
  }();
  function dn(t2) {
    return (dn = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t3) {
      return typeof t3;
    } : function(t3) {
      return t3 && "function" == typeof Symbol && t3.constructor === Symbol && t3 !== Symbol.prototype ? "symbol" : typeof t3;
    })(t2);
  }
  function yn(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  function mn(t2) {
    if (void 0 === t2)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return t2;
  }
  function vn(t2, e2, n2) {
    return (vn = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t3, e3, n3) {
      var i2 = function(t4, e4) {
        for (; !Object.prototype.hasOwnProperty.call(t4, e4) && null !== (t4 = _n(t4)); )
          ;
        return t4;
      }(t3, e3);
      if (i2) {
        var r2 = Object.getOwnPropertyDescriptor(i2, e3);
        return r2.get ? r2.get.call(n3) : r2.value;
      }
    })(t2, e2, n2 || t2);
  }
  function _n(t2) {
    return (_n = Object.setPrototypeOf ? Object.getPrototypeOf : function(t3) {
      return t3.__proto__ || Object.getPrototypeOf(t3);
    })(t2);
  }
  function gn(t2, e2) {
    return (gn = Object.setPrototypeOf || function(t3, e3) {
      return t3.__proto__ = e3, t3;
    })(t2, e2);
  }
  var bn = function() {
    function e2() {
      var t2;
      return function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, e2), (t2 = function(t3, e3) {
        return !e3 || "object" !== dn(e3) && "function" != typeof e3 ? mn(t3) : e3;
      }(this, _n(e2).call(this))).oscillator = new nt(), t2.env = new ot(), t2.env.setRange(1, 0), t2.env.setExp(true), t2.setADSR(0.02, 0.25, 0.05, 0.35), t2.oscillator.disconnect(), t2.oscillator.connect(t2.output), t2.env.disconnect(), t2.env.setInput(t2.output.gain), t2.oscillator.output.gain.value = 1, t2.oscillator.start(), t2.connect(), p.soundArray.push(mn(t2)), Object.defineProperties(mn(t2), { attack: { get: function() {
        return this.env.aTime;
      }, set: function(t3) {
        this.env.setADSR(t3, this.env.dTime, this.env.sPercent, this.env.rTime);
      } }, decay: { get: function() {
        return this.env.dTime;
      }, set: function(t3) {
        this.env.setADSR(this.env.aTime, t3, this.env.sPercent, this.env.rTime);
      } }, sustain: { get: function() {
        return this.env.sPercent;
      }, set: function(t3) {
        this.env.setADSR(this.env.aTime, this.env.dTime, t3, this.env.rTime);
      } }, release: { get: function() {
        return this.env.rTime;
      }, set: function(t3) {
        this.env.setADSR(this.env.aTime, this.env.dTime, this.env.sPercent, t3);
      } } }), t2;
    }
    return function(t2, e3) {
      if ("function" != typeof e3 && null !== e3)
        throw new TypeError("Super expression must either be null or a function");
      t2.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t2, writable: true, configurable: true } }), e3 && gn(t2, e3);
    }(e2, fn), function(t2, e3, n2) {
      e3 && yn(t2.prototype, e3), n2 && yn(t2, n2);
    }(e2, [{ key: "play", value: function(t2, e3, n2, i2) {
      this.triggerAttack(t2, e3, ~~n2), this.triggerRelease(~~n2 + (i2 || 0.15));
    } }, { key: "triggerAttack", value: function(t2, e3, n2) {
      var i2 = 2 < arguments.length && void 0 !== n2 ? n2 : 0, r2 = h(t2), o2 = e3 || 0.1;
      this.oscillator.freq(r2, 0, i2), this.env.ramp(this.output.gain, i2, o2);
    } }, { key: "triggerRelease", value: function(t2) {
      var e3 = 0 < arguments.length && void 0 !== t2 ? t2 : 0;
      this.env.ramp(this.output.gain, e3, 0);
    } }, { key: "setADSR", value: function(t2, e3, n2, i2) {
      this.env.setADSR(t2, e3, n2, i2);
    } }, { key: "amp", value: function(t2, e3) {
      var n2 = e3 || 0;
      return void 0 !== t2 && this.oscillator.amp(t2, n2), this.oscillator.amp().value;
    } }, { key: "connect", value: function(t2) {
      var e3 = t2 || p.input;
      this.output.connect(e3.input ? e3.input : e3);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }, { key: "dispose", value: function() {
      vn(_n(e2.prototype), "dispose", this).call(this), this.env && this.env.dispose(), this.oscillator && this.oscillator.dispose();
    } }]), e2;
  }();
  function Tn(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var wn = function() {
    function r2(t2, e2, n2, i2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, r2), this.isDetected = false, this.freqLow = t2, this.freqHigh = e2, this.treshold = n2, this.energy = 0, this.penergy = 0, this.sensitivity = 500, this.callback = i2;
    }
    return function(t2, e2, n2) {
      e2 && Tn(t2.prototype, e2), n2 && Tn(t2, n2);
    }(r2, [{ key: "update", value: function(t2, e2) {
      if (this.energy = t2.getEnergy(this.freqLow, this.freqHigh) / 255, false === this.isDetected && this.energy - this.penergy > this.treshold) {
        this.isDetected = true, this.callback ? this.callback(this.energy) : e2 && e2(this.energy);
        var n2 = this;
        setTimeout(function() {
          n2.isDetected = false;
        }, this.sensitivity);
      }
      this.penergy = this.energy;
    } }]), r2;
  }();
  function xn(t2, e2) {
    for (var n2 = 0; n2 < e2.length; n2++) {
      var i2 = e2[n2];
      i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(t2, i2.key, i2);
    }
  }
  var Sn = function() {
    function n2(t2, e2) {
      !function(t3, e3) {
        if (!(t3 instanceof e3))
          throw new TypeError("Cannot call a class as a function");
      }(this, n2), this.audiovoices = [], this.notes = {}, this._newest = 0, this._oldest = 0, this.maxVoices = e2 || 8, this.AudioVoice = void 0 === t2 ? p5.MonoSynth : t2, this._voicesInUse = new rt.a(0), this.output = p.audiocontext.createGain(), this.connect(), this._allocateVoices(), p.soundArray.push(this);
    }
    return function(t2, e2, n3) {
      e2 && xn(t2.prototype, e2), n3 && xn(t2, n3);
    }(n2, [{ key: "_allocateVoices", value: function() {
      for (var t2 = 0; t2 < this.maxVoices; t2++)
        this.audiovoices.push(new this.AudioVoice()), this.audiovoices[t2].disconnect(), this.audiovoices[t2].connect(this.output);
    } }, { key: "play", value: function(t2, e2, n3, i2) {
      var r2 = 3 < arguments.length && void 0 !== i2 ? i2 : 1;
      this.noteAttack(t2, e2, n3), this.noteRelease(t2, n3 + r2);
    } }, { key: "noteADSR", value: function(t2, e2, n3, i2, r2, o2) {
      var s2 = 5 < arguments.length && void 0 !== o2 ? o2 : 0, a2 = p.audiocontext.currentTime + s2;
      this.audiovoices[this.notes[t2].getValueAtTime(a2)].setADSR(e2, n3, i2, r2);
    } }, { key: "setADSR", value: function(e2, n3, i2, r2) {
      this.audiovoices.forEach(function(t2) {
        t2.setADSR(e2, n3, i2, r2);
      });
    } }, { key: "noteAttack", value: function(t2, e2, n3) {
      var i2, r2 = 2 < arguments.length && void 0 !== n3 ? n3 : 0, o2 = p.audiocontext.currentTime + r2, s2 = h(t2), a2 = e2 || 0.1;
      this.notes[s2] && null !== this.notes[s2].getValueAtTime(o2) && this.noteRelease(s2, 0), this._voicesInUse.getValueAtTime(o2) < this.maxVoices ? i2 = Math.max(~~this._voicesInUse.getValueAtTime(o2), 0) : (i2 = this._oldest, oldestNote = l(this.audiovoices[this._oldest].oscillator.freq().value), this.noteRelease(oldestNote), this._oldest = (this._oldest + 1) % (this.maxVoices - 1)), this.notes[s2] = new rt.a(), this.notes[s2].setValueAtTime(i2, o2);
      var u2 = null === this._voicesInUse._searchBefore(o2) ? 0 : this._voicesInUse._searchBefore(o2).value;
      if (this._voicesInUse.setValueAtTime(u2 + 1, o2), this._updateAfter(o2, 1), this._newest = i2, "number" == typeof a2) {
        var c2 = 1 / this._voicesInUse.getValueAtTime(o2) * 2;
        a2 = c2 < a2 ? c2 : a2;
      }
      this.audiovoices[i2].triggerAttack(s2, a2, r2);
    } }, { key: "_updateAfter", value: function(t2, e2) {
      if (null !== this._voicesInUse._searchAfter(t2)) {
        this._voicesInUse._searchAfter(t2).value += e2;
        var n3 = this._voicesInUse._searchAfter(t2).time;
        this._updateAfter(n3, e2);
      }
    } }, { key: "noteRelease", value: function(t2, e2) {
      var n3 = p.audiocontext.currentTime, i2 = e2 || 0, r2 = n3 + i2;
      if (t2) {
        var o2 = h(t2);
        if (this.notes[o2] && null !== this.notes[o2].getValueAtTime(r2)) {
          var s2 = Math.max(~~this._voicesInUse.getValueAtTime(r2).value, 1);
          this._voicesInUse.setValueAtTime(s2 - 1, r2), 0 < s2 && this._updateAfter(r2, -1), this.audiovoices[this.notes[o2].getValueAtTime(r2)].triggerRelease(i2), this.notes[o2].dispose(), delete this.notes[o2], this._newest = 0 === this._newest ? 0 : (this._newest - 1) % (this.maxVoices - 1);
        } else
          ;
      } else
        for (var a2 in this.audiovoices.forEach(function(t3) {
          t3.triggerRelease(i2);
        }), this._voicesInUse.setValueAtTime(0, r2), this.notes)
          this.notes[a2].dispose(), delete this.notes[a2];
    } }, { key: "connect", value: function(t2) {
      var e2 = t2 || p.input;
      this.output.connect(e2.input ? e2.input : e2);
    } }, { key: "disconnect", value: function() {
      this.output && this.output.disconnect();
    } }, { key: "dispose", value: function() {
      this.audiovoices.forEach(function(t2) {
        t2.dispose();
      }), this.output && (this.output.disconnect(), delete this.output);
    } }]), n2;
  }();
  function kn() {
    !function(t2, e2) {
      if (!(t2 instanceof e2))
        throw new TypeError("Cannot call a class as a function");
    }(this, kn);
  }
  p5.prototype.getAudioContext = c.b, p5.prototype.userStartAudio = c.c, p5.prototype.sampleRate = function() {
    return p.audiocontext.sampleRate;
  }, p5.prototype.freqToMidi = l, p5.prototype.midiToFreq = r, p5.prototype.noteToFreq = h, p5.prototype.soundFormats = function() {
    p.extensions = [];
    for (var t2 = 0; t2 < arguments.length; t2++) {
      if (arguments[t2] = arguments[t2].toLowerCase(), !(-1 < ["mp3", "wav", "ogg", "m4a", "aac"].indexOf(arguments[t2])))
        throw arguments[t2] + " is not a valid sound format!";
      p.extensions.push(arguments[t2]);
    }
  }, p5.prototype.disposeSound = function() {
    for (var t2 = 0; t2 < p.soundArray.length; t2++)
      p.soundArray[t2].dispose();
  }, p5.prototype._checkFileFormats = function(t2) {
    var e2;
    if ("string" == typeof t2) {
      var n2 = (e2 = t2).split(".").pop();
      if (-1 < ["mp3", "wav", "ogg", "m4a", "aac"].indexOf(n2)) {
        if (!p5.prototype.isFileSupported(n2))
          for (var i2 = e2.split("."), r2 = i2[i2.length - 1], o2 = 0; o2 < p.extensions.length; o2++) {
            var s2 = p.extensions[o2];
            if (p5.prototype.isFileSupported(s2)) {
              r2 = "", 2 === i2.length && (r2 += i2[0]);
              for (var a2 = 1; a2 <= i2.length - 2; a2++) {
                r2 += "." + i2[a2];
              }
              e2 = r2 += ".", e2 = e2 += s2;
              break;
            }
          }
      } else
        for (var u2 = 0; u2 < p.extensions.length; u2++) {
          var c2 = p.extensions[u2];
          if (p5.prototype.isFileSupported(c2)) {
            e2 = e2 + "." + c2;
            break;
          }
        }
    } else if ("object" === f(t2))
      for (var l2 = 0; l2 < t2.length; l2++) {
        var h2 = t2[l2].split(".").pop();
        if (p5.prototype.isFileSupported(h2)) {
          e2 = t2[l2];
          break;
        }
      }
    return e2;
  }, p5.prototype._mathChain = function(t2, e2, n2, i2, r2) {
    for (var o2 in t2.mathOps)
      t2.mathOps[o2] instanceof r2 && (t2.mathOps[o2].dispose(), (n2 = o2) < t2.mathOps.length - 1 && (i2 = t2.mathOps[o2 + 1]));
    return t2.mathOps[n2 - 1].disconnect(), t2.mathOps[n2 - 1].connect(e2), e2.connect(i2), t2.mathOps[n2] = e2, t2;
  }, p5.prototype.convertToWav = a, p5.prototype.interleave = u, p5.prototype.writeUTFBytes = d, p5.prototype.safeBufferSize = y, p5.prototype.saveSound = function(t2, e2) {
    var n2 = a(t2.buffer);
    p5.prototype.writeFile([n2], e2, "wav");
  }, p5.prototype.registerMethod("remove", p5.prototype.disposeSound), p5.Panner = k, p5.SoundFile = E, p5.prototype.loadSound = function(t2, e2, n2, i2) {
    -1 < window.location.origin.indexOf("file://") && "undefined" === window.cordova && window.alert("This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS");
    var r2 = this;
    return new q(t2, function() {
      "function" == typeof e2 && e2.apply(r2, arguments), "function" == typeof r2._decrementPreload && r2._decrementPreload();
    }, n2, i2);
  }, p5.prototype.registerPreloadMethod("loadSound", p5.prototype), p5.Amplitude = B, p5.FFT = j, p5.Oscillator = nt, p5.SinOsc = J, p5.TriOsc = K, p5.SawOsc = tt, p5.SqrOsc = et, p5.Noise = dt, p5.Pulse = xt, p5.AudioIn = kt, p5.Effect = Ct, p5.Filter = Gt, p5.LowPass = Dt, p5.HighPass = It, p5.BandPass = Ut, p5.EQ = ee, p5.listener3D = ie, p5.Panner3D = le, p5.Delay = ve, p5.Reverb = Ae, p5.Convolver = Oe, p5.prototype.createConvolver = function(t2, e2, n2) {
    -1 < window.location.origin.indexOf("file://") && "undefined" === window.cordova && alert("This sketch may require a server to load external files. Please see http://bit.ly/1qcInwS");
    var i2 = this, r2 = new Oe(t2, function(t3) {
      "function" == typeof e2 && e2(t3), "function" == typeof i2._decrementPreload && i2._decrementPreload();
    }, n2);
    return r2.impulses = [], r2;
  }, p5.prototype.registerPreloadMethod("createConvolver", p5.prototype), p5.Metro = Ee, p5.Phrase = Me, p5.Part = Fe, p5.Score = De, p5.SoundLoop = Ge, p5.Compressor = He, p5.peakDetect = Qe, p5.SoundRecorder = tn, p5.Distortion = cn, p5.Gain = hn, p5.AudioVoice = fn, p5.MonoSynth = bn, p5.OnsetDetect = wn, p5.PolySynth = Sn, p5.PeakDetect = Qe, p5.Signal = kn;
}]);
