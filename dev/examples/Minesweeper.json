{"version":1.3,"file":[{"jsfile":{"data":"this.init = function () {player = {update: () => {},lateUpdate: () => {},camera: () => {},checkCollisions: () => {},display: () => {},};setTimeout(() => {globalThis.dead = false;}, 500);this.cameraPos = {x: 320,y: 320,};engine.activeScene.boxes = [this];const rows = 10;const columns = 10;const numMines = 10;const minesweeperMap = this.generateMinesweeperMap(rows, columns, numMines);window.Mmap = {};this.placeFromMap(minesweeperMap);};this.update = function () {if (mouseIsPressed && mouseButton === RIGHT) {let diffX = mouseX - pmouseX;let diffY = mouseY - pmouseY;this.cameraPos.x -= diffX / 2;this.cameraPos.y -= diffY / 2;}engine.cameraPos = this.cameraPos;if (globalThis.dead) {engine.gui.textSize(50);engine.gui.textAlign(CENTER);engine.gui.fill(255, 0, 0);engine.gui.text('Game Over!', width / 2, height / 2);engine.gui.textSize(12);engine.gui.textAlign(LEFT);}if (globalThis.dead && mouseIsPressed && !this?.lastWasPressed) {this.init();globalThis.dead = false;}this.lastWasPressed = mouseIsPressed;};this.generateMinesweeperMap = function (rows, columns, numMines) {const map = [];for (let i = 0; i < rows; i++) {map.push(new Array(columns).fill(0));}let minesPlaced = 0;while (minesPlaced < numMines) {const row = Math.floor(Math.random() * rows);const col = Math.floor(Math.random() * columns);if (map[row][col] !== 'mine') {map[row][col] = 'mine';minesPlaced++;}}for (let i = 0; i < rows; i++) {for (let j = 0; j < columns; j++) {if (map[i][j] !== 'mine') {let count = 0;for (let r = -1; r <= 1; r++) {for (let c = -1; c <= 1; c++) {if (i + r >= 0 &&i + r < rows &&j + c >= 0 &&j + c < columns &&map[i + r][j + c] === 'mine') {count++;}}}map[i][j] = count;}}}return map;};this.placeFromMap = function (map) {let xPos = 0;let yPos = 0;for (let row of map) {yPos++;for (let mine of row) {xPos++;let box = new Box(xPos * 64, yPos * 64, 64, 64);let params = {fileUUID: engine.getByReference('name', 'Mine').UUID,vals: {type: mine,location: [xPos, yPos],},};box.components.push(new engine.componentList['gameScript']({...params,obj: box,}));box.init();box.typeId = undefined;engine.getActiveScene().boxes.push(box);if (window.Mmap) {if (!window.Mmap[xPos]) {window.Mmap[xPos] = [];}window.Mmap[xPos][yPos] = box;}}xPos = 0;}};","type":".js","references":{"name":"Minesweeper"}}},{"jsfile0":{"data":"this.draw = function () {this.__proto__.draw.bind(this)();if (this.clr === 255) {fill(0);text(this.shown.type, this.x + 32, this.y + 32);}return 1;};this.update = function () {if (!globalThis?.dead &&mouseIsPressed &&mouseButton === 'left' &&!this.lastPress) {/*check if inside of Box*/let pos = engine.mouseScreen();let circle = {x: pos.x,y: pos.y,r: 1,};if (collideCircle(this, circle)) {if (this.shown.type === 'mine') {this.clr = 125;globalThis.dead = true;} else {this.show();}}}this.lastPress = mouseIsPressed;};this.show = function () {this.clr = 255;if (this.shown.type === 0) {this.checkThenShow(this.shown.location[0], this.shown.location[1]);}};this.checkThenShow = function (x, y) {if (globalThis?.dead) {return;}for (let i = -1; i < 2; i++) {for (let iy = -1; iy < 2; iy++) {if (i != 0 || iy != 0) {let row = window.Mmap[x + i];if (row) {let box = row[y + iy];if (box) {console.log(box);if (box.clr !== 255) {box.show();}}}}}}};","type":".js","references":{"name":"Mine"}}}],"scenes":{"0":{"Data":[[0,100,100,500,50]],"sceneData":[0,400,-10,500],"componentData":[{"0":[{"name":"gameScript","params":{"fileUUID":"jsfile","vals":{}}}]}]}},"GUI":{"default":true}}