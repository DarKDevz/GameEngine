{"version":3,"sources":["../../../src/swc/__tests__/options.test.ts"],"sourcesContent":["import type { Options } from \"@swc/core\";\nimport deepmerge from \"deepmerge\";\n\nimport parserArgs, { CliOptions, initProgram } from \"../options\";\n\ninterface ParserArgsReturn {\n  swcOptions: Options;\n  cliOptions: CliOptions;\n}\n\nconst createDefaultResult = (): ParserArgsReturn => ({\n  cliOptions: {\n    copyFiles: false,\n    deleteDirOnStart: false,\n    extensions: [\n      \".js\",\n      \".jsx\",\n      \".es6\",\n      \".es\",\n      \".mjs\",\n      \".ts\",\n      \".tsx\",\n      \".cts\",\n      \".mts\",\n    ],\n    // @ts-expect-error\n    filename: undefined,\n    filenames: [\"src\"],\n    includeDotfiles: false,\n    // @ts-expect-error\n    outDir: undefined,\n    // @ts-expect-error\n    outFile: undefined,\n    quiet: false,\n    sourceMapTarget: undefined,\n    sync: false,\n    watch: false,\n  },\n  swcOptions: {\n    configFile: undefined,\n    jsc: { parser: undefined, transform: {} },\n    sourceFileName: undefined,\n    sourceMaps: undefined,\n    sourceRoot: undefined,\n    swcrc: true,\n  },\n});\n\ndescribe(\"parserArgs\", () => {\n  let defaultResult: ParserArgsReturn;\n\n  beforeEach(() => {\n    defaultResult = createDefaultResult();\n    initProgram();\n  });\n\n  it(\"minimal args returns default result\", async () => {\n    const args = [\"node\", \"/path/to/node_modules/swc-cli/bin/swc.js\", \"src\"];\n    const result = await parserArgs(args);\n    expect(result).toEqual(defaultResult);\n  });\n\n  describe(\"errors\", () => {\n    let mockExit: jest.SpyInstance;\n    let mockConsoleError: jest.SpyInstance;\n\n    beforeAll(() => {\n      //@ts-expect-error\n      mockExit = jest.spyOn(process, \"exit\").mockImplementation(() => {});\n      mockConsoleError = jest\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n    });\n\n    beforeEach(() => {\n      mockExit.mockClear();\n      mockConsoleError.mockClear();\n    });\n\n    afterAll(() => {\n      mockExit.mockRestore();\n      mockConsoleError.mockRestore();\n    });\n\n    it(\"exits without filenames\", async () => {\n      const args = [\"node\", \"/path/to/node_modules/swc-cli/bin/swc.js\"];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--watch exits without --out-dir\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--watch\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n\n    it(\"--watch exits without filenames\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--watch\",\n        \"--out-dir\",\n        \"esm\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(3);\n    });\n\n    it(\"--out-dir exits with conflicting -out-file\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--out-file\",\n        \"esm/index.js\",\n        \"--out-dir\",\n        \"esm\",\n      ];\n      await parserArgs(args);\n      expect(mockExit).toHaveBeenCalledWith(2);\n      expect(mockConsoleError).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"--source-maps\", () => {\n    it(\"source maps is ambiguous\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"--source-maps\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: true },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps true\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--source-maps\",\n        \"true\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: true },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n\n    it(\"source maps inline\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"-s\",\n        \"inline\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult, {\n        swcOptions: { sourceMaps: \"inline\" },\n      });\n      expect(result).toEqual(expectedOptions);\n    });\n  });\n\n  describe(\"--config\", () => {\n    it(\"throws with no config\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"src\",\n        \"-C\",\n      ];\n      expect(() => parserArgs(args)).toThrow();\n    });\n\n    it(\"react development\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (two config options)\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true\",\n        \"-C\",\n        \"module.type=commonjs\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: \"commonjs\" },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"react development and commonjs (comma-separated)\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"jsc.transform.react.development=true,module.type=commonjs\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        jsc: { transform: { react: { development: true } } },\n        module: { type: \"commonjs\" },\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n\n    it(\"no equals sign\", async () => {\n      const args = [\n        \"node\",\n        \"/path/to/node_modules/swc-cli/bin/swc.js\",\n        \"--config\",\n        \"no_equals\",\n        \"src\",\n      ];\n      const result = await parserArgs(args);\n      const expectedOptions = deepmerge(defaultResult.swcOptions, {\n        no_equals: true,\n      });\n      expect(result.swcOptions).toEqual(expectedOptions);\n    });\n  });\n});\n"],"names":["createDefaultResult","cliOptions","copyFiles","deleteDirOnStart","extensions","filename","undefined","filenames","includeDotfiles","outDir","outFile","quiet","sourceMapTarget","sync","watch","swcOptions","configFile","jsc","parser","transform","sourceFileName","sourceMaps","sourceRoot","swcrc","describe","defaultResult","beforeEach","initProgram","it","args","result","parserArgs","expect","toEqual","mockExit","mockConsoleError","beforeAll","jest","spyOn","process","mockImplementation","console","mockClear","afterAll","mockRestore","toHaveBeenCalledWith","toHaveBeenCalledTimes","expectedOptions","deepmerge","toThrow","react","development","module","type","no_equals"],"mappings":";;;;gEACsB;+DAE8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOpD,MAAMA,sBAAsB,IAAyB,CAAA;QACnDC,YAAY;YACVC,WAAW,KAAK;YAChBC,kBAAkB,KAAK;YACvBC,YAAY;gBACV;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,mBAAmB;YACnBC,UAAUC;YACVC,WAAW;gBAAC;aAAM;YAClBC,iBAAiB,KAAK;YACtB,mBAAmB;YACnBC,QAAQH;YACR,mBAAmB;YACnBI,SAASJ;YACTK,OAAO,KAAK;YACZC,iBAAiBN;YACjBO,MAAM,KAAK;YACXC,OAAO,KAAK;QACd;QACAC,YAAY;YACVC,YAAYV;YACZW,KAAK;gBAAEC,QAAQZ;gBAAWa,WAAW,CAAC;YAAE;YACxCC,gBAAgBd;YAChBe,YAAYf;YACZgB,YAAYhB;YACZiB,OAAO,IAAI;QACb;IACF,CAAA;AAEAC,SAAS,cAAc,IAAM;IAC3B,IAAIC;IAEJC,WAAW,IAAM;QACfD,gBAAgBzB;QAChB2B,IAAAA,oBAAW;IACb;IAEAC,GAAG,uCAAuC,UAAY;QACpD,MAAMC,OAAO;YAAC;YAAQ;YAA4C;SAAM;QACxE,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;QAChCG,OAAOF,QAAQG,OAAO,CAACR;IACzB;IAEAD,SAAS,UAAU,IAAM;QACvB,IAAIU;QACJ,IAAIC;QAEJC,UAAU,IAAM;YACd,kBAAkB;YAClBF,WAAWG,KAAKC,KAAK,CAACC,SAAS,QAAQC,kBAAkB,CAAC,IAAM,CAAC;YACjEL,mBAAmBE,KAChBC,KAAK,CAACG,SAAS,SACfD,kBAAkB,CAAC,IAAM,CAAC;QAC/B;QAEAd,WAAW,IAAM;YACfQ,SAASQ,SAAS;YAClBP,iBAAiBO,SAAS;QAC5B;QAEAC,SAAS,IAAM;YACbT,SAASU,WAAW;YACpBT,iBAAiBS,WAAW;QAC9B;QAEAhB,GAAG,2BAA2B,UAAY;YACxC,MAAMC,OAAO;gBAAC;gBAAQ;aAA2C;YACjE,MAAME,IAAAA,gBAAU,EAACF;YACjBG,OAAOE,UAAUW,oBAAoB,CAAC;YACtCb,OAAOG,kBAAkBW,qBAAqB,CAAC;QACjD;QAEAlB,GAAG,mCAAmC,UAAY;YAChD,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;aACD;YACD,MAAME,IAAAA,gBAAU,EAACF;YACjBG,OAAOE,UAAUW,oBAAoB,CAAC;YACtCb,OAAOG,kBAAkBW,qBAAqB,CAAC;QACjD;QAEAlB,GAAG,mCAAmC,UAAY;YAChD,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAME,IAAAA,gBAAU,EAACF;YACjBG,OAAOE,UAAUW,oBAAoB,CAAC;YACtCb,OAAOG,kBAAkBW,qBAAqB,CAAC;QACjD;QAEAlB,GAAG,8CAA8C,UAAY;YAC3D,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAME,IAAAA,gBAAU,EAACF;YACjBG,OAAOE,UAAUW,oBAAoB,CAAC;YACtCb,OAAOG,kBAAkBW,qBAAqB,CAAC;QACjD;IACF;IAEAtB,SAAS,iBAAiB,IAAM;QAC9BI,GAAG,4BAA4B,UAAY;YACzC,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,eAAe;gBAC/CV,YAAY;oBAAEM,YAAY,IAAI;gBAAC;YACjC;YACAW,OAAOF,QAAQG,OAAO,CAACc;QACzB;QAEAnB,GAAG,oBAAoB,UAAY;YACjC,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,eAAe;gBAC/CV,YAAY;oBAAEM,YAAY,IAAI;gBAAC;YACjC;YACAW,OAAOF,QAAQG,OAAO,CAACc;QACzB;QAEAnB,GAAG,sBAAsB,UAAY;YACnC,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,eAAe;gBAC/CV,YAAY;oBAAEM,YAAY;gBAAS;YACrC;YACAW,OAAOF,QAAQG,OAAO,CAACc;QACzB;IACF;IAEAvB,SAAS,YAAY,IAAM;QACzBI,GAAG,yBAAyB,UAAY;YACtC,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;aACD;YACDG,OAAO,IAAMD,IAAAA,gBAAU,EAACF,OAAOoB,OAAO;QACxC;QAEArB,GAAG,qBAAqB,UAAY;YAClC,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,cAAcV,UAAU,EAAE;gBAC1DE,KAAK;oBAAEE,WAAW;wBAAE+B,OAAO;4BAAEC,aAAa,IAAI;wBAAC;oBAAE;gBAAE;YACrD;YACAnB,OAAOF,OAAOf,UAAU,EAAEkB,OAAO,CAACc;QACpC;QAEAnB,GAAG,uDAAuD,UAAY;YACpE,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,cAAcV,UAAU,EAAE;gBAC1DE,KAAK;oBAAEE,WAAW;wBAAE+B,OAAO;4BAAEC,aAAa,IAAI;wBAAC;oBAAE;gBAAE;gBACnDC,QAAQ;oBAAEC,MAAM;gBAAW;YAC7B;YACArB,OAAOF,OAAOf,UAAU,EAAEkB,OAAO,CAACc;QACpC;QAEAnB,GAAG,oDAAoD,UAAY;YACjE,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,cAAcV,UAAU,EAAE;gBAC1DE,KAAK;oBAAEE,WAAW;wBAAE+B,OAAO;4BAAEC,aAAa,IAAI;wBAAC;oBAAE;gBAAE;gBACnDC,QAAQ;oBAAEC,MAAM;gBAAW;YAC7B;YACArB,OAAOF,OAAOf,UAAU,EAAEkB,OAAO,CAACc;QACpC;QAEAnB,GAAG,kBAAkB,UAAY;YAC/B,MAAMC,OAAO;gBACX;gBACA;gBACA;gBACA;gBACA;aACD;YACD,MAAMC,SAAS,MAAMC,IAAAA,gBAAU,EAACF;YAChC,MAAMkB,kBAAkBC,IAAAA,kBAAS,EAACvB,cAAcV,UAAU,EAAE;gBAC1DuC,WAAW,IAAI;YACjB;YACAtB,OAAOF,OAAOf,UAAU,EAAEkB,OAAO,CAACc;QACpC;IACF;AACF"}